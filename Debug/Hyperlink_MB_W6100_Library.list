
Hyperlink_MB_W6100_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c90  08000c98  00010c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c90  08000c90  00010c98  2**0
                  CONTENTS
  4 .ARM          00000000  08000c90  08000c90  00010c98  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c90  08000c98  00010c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c90  08000c90  00010c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c94  08000c94  00010c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000c98  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000c98  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010c98  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002dc3  00000000  00000000  00010cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000741  00000000  00000000  00013a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000108  00000000  00000000  000141d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000c0  00000000  00000000  000142d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001899e  00000000  00000000  00014398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001a58  00000000  00000000  0002cd36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083734  00000000  00000000  0002e78e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b1ec2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002f8  00000000  00000000  000b1f40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000c78 	.word	0x08000c78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000c78 	.word	0x08000c78

080001c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	db0a      	blt.n	80001f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	490c      	ldr	r1, [pc, #48]	; (8000214 <__NVIC_SetPriority+0x4c>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	0112      	lsls	r2, r2, #4
 80001e8:	b2d2      	uxtb	r2, r2
 80001ea:	440b      	add	r3, r1
 80001ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001f0:	e00a      	b.n	8000208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	4908      	ldr	r1, [pc, #32]	; (8000218 <__NVIC_SetPriority+0x50>)
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	f003 030f 	and.w	r3, r3, #15
 80001fe:	3b04      	subs	r3, #4
 8000200:	0112      	lsls	r2, r2, #4
 8000202:	b2d2      	uxtb	r2, r2
 8000204:	440b      	add	r3, r1
 8000206:	761a      	strb	r2, [r3, #24]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	e000e100 	.word	0xe000e100
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3b01      	subs	r3, #1
 8000228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800022c:	d301      	bcc.n	8000232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800022e:	2301      	movs	r3, #1
 8000230:	e00f      	b.n	8000252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000232:	4a0a      	ldr	r2, [pc, #40]	; (800025c <SysTick_Config+0x40>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3b01      	subs	r3, #1
 8000238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800023a:	210f      	movs	r1, #15
 800023c:	f04f 30ff 	mov.w	r0, #4294967295
 8000240:	f7ff ffc2 	bl	80001c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <SysTick_Config+0x40>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <SysTick_Config+0x40>)
 800024c:	2207      	movs	r2, #7
 800024e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000250:	2300      	movs	r3, #0
}
 8000252:	4618      	mov	r0, r3
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	e000e010 	.word	0xe000e010

08000260 <SystemRegisterCFG>:
 *      Author: Michal Makowka
 */
#include "config.h"


void SystemRegisterCFG(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	// RCC Configuration
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;	// GPIO Clock
 8000264:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <SystemRegisterCFG+0x90>)
 8000266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000268:	4a21      	ldr	r2, [pc, #132]	; (80002f0 <SystemRegisterCFG+0x90>)
 800026a:	f043 0307 	orr.w	r3, r3, #7
 800026e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;		// SPI1 clock
 8000270:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <SystemRegisterCFG+0x90>)
 8000272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000274:	4a1e      	ldr	r2, [pc, #120]	; (80002f0 <SystemRegisterCFG+0x90>)
 8000276:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800027a:	6453      	str	r3, [r2, #68]	; 0x44

	// Standard GPIO Config
	GPIOC->MODER |= GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE11_0 | GPIO_MODER_MODE12_0;	// STM LEDs output
 800027c:	4b1d      	ldr	r3, [pc, #116]	; (80002f4 <SystemRegisterCFG+0x94>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1c      	ldr	r2, [pc, #112]	; (80002f4 <SystemRegisterCFG+0x94>)
 8000282:	f043 73a2 	orr.w	r3, r3, #21233664	; 0x1440000
 8000286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800028a:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD8 | GPIO_ODR_OD9 | GPIO_ODR_OD11 | GPIO_ODR_OD12;		// STM LEDs OFF
 800028c:	4b19      	ldr	r3, [pc, #100]	; (80002f4 <SystemRegisterCFG+0x94>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <SystemRegisterCFG+0x94>)
 8000292:	f443 53d8 	orr.w	r3, r3, #6912	; 0x1b00
 8000296:	6153      	str	r3, [r2, #20]

	// W6100 External Reset config
	GPIOC->MODER |= GPIO_MODER_MODE4_0;		// Output
 8000298:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <SystemRegisterCFG+0x94>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a15      	ldr	r2, [pc, #84]	; (80002f4 <SystemRegisterCFG+0x94>)
 800029e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD4;				// Level high (reset disable)
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <SystemRegisterCFG+0x94>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <SystemRegisterCFG+0x94>)
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	6153      	str	r3, [r2, #20]

	// SPI GPIO Config
	GPIOA->MODER |= GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1;		// SPI1 AFIO Set (NSS Software)
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <SystemRegisterCFG+0x98>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <SystemRegisterCFG+0x98>)
 80002b6:	f443 4329 	orr.w	r3, r3, #43264	; 0xa900
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_OD4;		// Slave select HIGH (disable)
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <SystemRegisterCFG+0x98>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <SystemRegisterCFG+0x98>)
 80002c2:	f043 0310 	orr.w	r3, r3, #16
 80002c6:	6153      	str	r3, [r2, #20]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL5_0 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL6_0 |
 80002c8:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <SystemRegisterCFG+0x98>)
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <SystemRegisterCFG+0x98>)
 80002ce:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002d2:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80002d6:	6213      	str	r3, [r2, #32]
					 GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL7_0 | GPIO_AFRL_AFRL7_2;			// SPI1 AFIO => SPI1

	// SPI Config
	SPI1->CR1 |= SPI_CR1_SPE | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_MSTR;
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <SystemRegisterCFG+0x9c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a07      	ldr	r2, [pc, #28]	; (80002fc <SystemRegisterCFG+0x9c>)
 80002de:	f443 7351 	orr.w	r3, r3, #836	; 0x344
 80002e2:	6013      	str	r3, [r2, #0]


	// SysTic Config
	SysTick_Config(16000000);
 80002e4:	4806      	ldr	r0, [pc, #24]	; (8000300 <SystemRegisterCFG+0xa0>)
 80002e6:	f7ff ff99 	bl	800021c <SysTick_Config>
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020800 	.word	0x40020800
 80002f8:	40020000 	.word	0x40020000
 80002fc:	40013000 	.word	0x40013000
 8000300:	00f42400 	.word	0x00f42400

08000304 <SysTick_Handler>:





__attribute__((interrupt)) void SysTick_Handler(void){
 8000304:	4668      	mov	r0, sp
 8000306:	f020 0107 	bic.w	r1, r0, #7
 800030a:	468d      	mov	sp, r1
 800030c:	b481      	push	{r0, r7}
 800030e:	af00      	add	r7, sp, #0
//	GPIOC->ODR ^= GPIO_ODR_OD8;
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	bc81      	pop	{r0, r7}
 8000316:	4685      	mov	sp, r0
 8000318:	4770      	bx	lr
	...

0800031c <main>:




int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0

	SystemRegisterCFG();
 8000322:	f7ff ff9d 	bl	8000260 <SystemRegisterCFG>

	GPIOC->ODR &= ~GPIO_ODR_OD9;						// Server RED LED ON
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <main+0xc8>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a2e      	ldr	r2, [pc, #184]	; (80003e4 <main+0xc8>)
 800032c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000330:	6153      	str	r3, [r2, #20]

	uint8_t rx_dat[20];
	memset(rx_dat, '0', sizeof(rx_dat));
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2214      	movs	r2, #20
 8000336:	2130      	movs	r1, #48	; 0x30
 8000338:	4618      	mov	r0, r3
 800033a:	f000 fc94 	bl	8000c66 <memset>

	uint32_t destination_adr;


	W6100_INIT();										// Initialise W6100 with basic network information
 800033e:	f000 f94a 	bl	80005d6 <W6100_INIT>

	/* Socket Configuration */
	uint8_t txTotalSize = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	77fb      	strb	r3, [r7, #31]
	uint8_t rxTotalSize = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	77bb      	strb	r3, [r7, #30]

	for (uint8_t i=0; i<7; i++) {
 800034a:	2300      	movs	r3, #0
 800034c:	777b      	strb	r3, [r7, #29]
 800034e:	e016      	b.n	800037e <main+0x62>
		SPI_W6100_WSOCK(Sn_TX_BSR, 0x02, i, REG);		// assign 2 Kbytes TX buffer per SOCKET
 8000350:	7f7a      	ldrb	r2, [r7, #29]
 8000352:	2301      	movs	r3, #1
 8000354:	2102      	movs	r1, #2
 8000356:	f44f 7000 	mov.w	r0, #512	; 0x200
 800035a:	f000 f8fd 	bl	8000558 <SPI_W6100_WSOCK>
		SPI_W6100_WSOCK(Sn_RX_BSR, 0x02, i, REG);		// assign 2 Kbytes RX buffer per SOCKET
 800035e:	7f7a      	ldrb	r2, [r7, #29]
 8000360:	2301      	movs	r3, #1
 8000362:	2102      	movs	r1, #2
 8000364:	f44f 7008 	mov.w	r0, #544	; 0x220
 8000368:	f000 f8f6 	bl	8000558 <SPI_W6100_WSOCK>
		txTotalSize += 0x02;
 800036c:	7ffb      	ldrb	r3, [r7, #31]
 800036e:	3302      	adds	r3, #2
 8000370:	77fb      	strb	r3, [r7, #31]
		rxTotalSize += 0x02;
 8000372:	7fbb      	ldrb	r3, [r7, #30]
 8000374:	3302      	adds	r3, #2
 8000376:	77bb      	strb	r3, [r7, #30]
	for (uint8_t i=0; i<7; i++) {
 8000378:	7f7b      	ldrb	r3, [r7, #29]
 800037a:	3301      	adds	r3, #1
 800037c:	777b      	strb	r3, [r7, #29]
 800037e:	7f7b      	ldrb	r3, [r7, #29]
 8000380:	2b06      	cmp	r3, #6
 8000382:	d9e5      	bls.n	8000350 <main+0x34>
	}

	destination_adr = W6100_OpenTCPSocket(0);			// Open TCP socket 0 and return its destination address
 8000384:	2000      	movs	r0, #0
 8000386:	f000 facf 	bl	8000928 <W6100_OpenTCPSocket>
 800038a:	61b8      	str	r0, [r7, #24]


	while (1) {

		if (W6100_ReceiveData(0, destination_adr, rx_dat)) {		// Check if data arrived
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	461a      	mov	r2, r3
 8000390:	69b9      	ldr	r1, [r7, #24]
 8000392:	2000      	movs	r0, #0
 8000394:	f000 fb54 	bl	8000a40 <W6100_ReceiveData>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0f6      	beq.n	800038c <main+0x70>
			if (rx_dat[0] == 'A' && rx_dat[1] == 'B') { GPIOC->ODR &= ~GPIO_ODR_OD12; }
 800039e:	793b      	ldrb	r3, [r7, #4]
 80003a0:	2b41      	cmp	r3, #65	; 0x41
 80003a2:	d109      	bne.n	80003b8 <main+0x9c>
 80003a4:	797b      	ldrb	r3, [r7, #5]
 80003a6:	2b42      	cmp	r3, #66	; 0x42
 80003a8:	d106      	bne.n	80003b8 <main+0x9c>
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <main+0xc8>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <main+0xc8>)
 80003b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	e00e      	b.n	80003d6 <main+0xba>
			else if (rx_dat[0] == 'C' && rx_dat[1] == 'D' && rx_dat[2] == 'F')	{ GPIOC->ODR |= GPIO_ODR_OD12; }
 80003b8:	793b      	ldrb	r3, [r7, #4]
 80003ba:	2b43      	cmp	r3, #67	; 0x43
 80003bc:	d10b      	bne.n	80003d6 <main+0xba>
 80003be:	797b      	ldrb	r3, [r7, #5]
 80003c0:	2b44      	cmp	r3, #68	; 0x44
 80003c2:	d108      	bne.n	80003d6 <main+0xba>
 80003c4:	79bb      	ldrb	r3, [r7, #6]
 80003c6:	2b46      	cmp	r3, #70	; 0x46
 80003c8:	d105      	bne.n	80003d6 <main+0xba>
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <main+0xc8>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <main+0xc8>)
 80003d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003d4:	6153      	str	r3, [r2, #20]
			memset(rx_dat, '0', sizeof(rx_dat));
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2214      	movs	r2, #20
 80003da:	2130      	movs	r1, #48	; 0x30
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fc42 	bl	8000c66 <memset>
		if (W6100_ReceiveData(0, destination_adr, rx_dat)) {		// Check if data arrived
 80003e2:	e7d3      	b.n	800038c <main+0x70>
 80003e4:	40020800 	.word	0x40020800

080003e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <SystemInit+0x28>)
 80003ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003f2:	4a07      	ldr	r2, [pc, #28]	; (8000410 <SystemInit+0x28>)
 80003f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <SystemInit+0x28>)
 80003fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000402:	609a      	str	r2, [r3, #8]
#endif
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000ed00 	.word	0xe000ed00

08000414 <SPI_Eth_SS>:
#include "w6100.h"




void SPI_Eth_SS(uint8_t state) {
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
	if (state) {
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d006      	beq.n	8000432 <SPI_Eth_SS+0x1e>
		GPIOA->ODR &= ~GPIO_ODR_OD4;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <SPI_Eth_SS+0x3c>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4a09      	ldr	r2, [pc, #36]	; (8000450 <SPI_Eth_SS+0x3c>)
 800042a:	f023 0310 	bic.w	r3, r3, #16
 800042e:	6153      	str	r3, [r2, #20]
	}
	else if (!state) {
		GPIOA->ODR |= GPIO_ODR_OD4;
	}
}
 8000430:	e008      	b.n	8000444 <SPI_Eth_SS+0x30>
	else if (!state) {
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d105      	bne.n	8000444 <SPI_Eth_SS+0x30>
		GPIOA->ODR |= GPIO_ODR_OD4;
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <SPI_Eth_SS+0x3c>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <SPI_Eth_SS+0x3c>)
 800043e:	f043 0310 	orr.w	r3, r3, #16
 8000442:	6153      	str	r3, [r2, #20]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40020000 	.word	0x40020000

08000454 <SPI_Eth_RT>:

uint8_t SPI_Eth_RT(uint8_t data) {
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
	while(!(SPI1->SR & SPI_SR_TXE));	// Wait for Tx buffer empty
 800045e:	bf00      	nop
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <SPI_Eth_RT+0x40>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	f003 0302 	and.w	r3, r3, #2
 8000468:	2b00      	cmp	r3, #0
 800046a:	d0f9      	beq.n	8000460 <SPI_Eth_RT+0xc>
	SPI1->DR = data;
 800046c:	4a09      	ldr	r2, [pc, #36]	; (8000494 <SPI_Eth_RT+0x40>)
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_RXNE));	// Wait for Rx buffer not empty
 8000472:	bf00      	nop
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <SPI_Eth_RT+0x40>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	f003 0301 	and.w	r3, r3, #1
 800047c:	2b00      	cmp	r3, #0
 800047e:	d0f9      	beq.n	8000474 <SPI_Eth_RT+0x20>
	data = SPI1->DR;
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SPI_Eth_RT+0x40>)
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	71fb      	strb	r3, [r7, #7]
	return data;
 8000486:	79fb      	ldrb	r3, [r7, #7]
}
 8000488:	4618      	mov	r0, r3
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40013000 	.word	0x40013000

08000498 <SPI_W6100_WCR>:
	dat = SPI_Eth_RT(0x00);	// Send garbage data to read the Common Register
	SPI_Eth_SS(OFF);		// NSS Slave Disable
	return dat;
}

void SPI_W6100_WCR(uint16_t adr, uint8_t val) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	460a      	mov	r2, r1
 80004a2:	80fb      	strh	r3, [r7, #6]
 80004a4:	4613      	mov	r3, r2
 80004a6:	717b      	strb	r3, [r7, #5]
	// See Page 76 - W6100 datasheet
	SPI_Eth_SS(ON);			// NSS Slave Enable
 80004a8:	2001      	movs	r0, #1
 80004aa:	f7ff ffb3 	bl	8000414 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 80004ae:	88fb      	ldrh	r3, [r7, #6]
 80004b0:	0a1b      	lsrs	r3, r3, #8
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ffcc 	bl	8000454 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 80004bc:	88fb      	ldrh	r3, [r7, #6]
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ffc7 	bl	8000454 <SPI_Eth_RT>
	SPI_Eth_RT(0x04);		// Send Control Byte	[CR, Write, Variable Length Data Mode]
 80004c6:	2004      	movs	r0, #4
 80004c8:	f7ff ffc4 	bl	8000454 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 80004cc:	797b      	ldrb	r3, [r7, #5]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ffc0 	bl	8000454 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 80004d4:	2000      	movs	r0, #0
 80004d6:	f7ff ff9d 	bl	8000414 <SPI_Eth_SS>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <SPI_W6100_RSOCK>:

uint8_t SPI_W6100_RSOCK(uint16_t adr, uint8_t socket_nbr, uint8_t block) {
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b084      	sub	sp, #16
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	80fb      	strh	r3, [r7, #6]
 80004ec:	460b      	mov	r3, r1
 80004ee:	717b      	strb	r3, [r7, #5]
 80004f0:	4613      	mov	r3, r2
 80004f2:	713b      	strb	r3, [r7, #4]
	uint8_t dat;
	uint8_t cb_temp = 0x00;
 80004f4:	2300      	movs	r3, #0
 80004f6:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 80004f8:	797b      	ldrb	r3, [r7, #5]
 80004fa:	015b      	lsls	r3, r3, #5
 80004fc:	b25a      	sxtb	r2, r3
 80004fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000502:	4313      	orrs	r3, r2
 8000504:	b25b      	sxtb	r3, r3
 8000506:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 8000508:	793b      	ldrb	r3, [r7, #4]
 800050a:	00db      	lsls	r3, r3, #3
 800050c:	b25a      	sxtb	r2, r3
 800050e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000512:	4313      	orrs	r3, r2
 8000514:	b25b      	sxtb	r3, r3
 8000516:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000518:	2001      	movs	r0, #1
 800051a:	f7ff ff7b 	bl	8000414 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	0a1b      	lsrs	r3, r3, #8
 8000522:	b29b      	uxth	r3, r3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff ff94 	bl	8000454 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 800052c:	88fb      	ldrh	r3, [r7, #6]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff8f 	bl	8000454 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff8b 	bl	8000454 <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);		// Send garbage data to read the Common Register
 800053e:	2000      	movs	r0, #0
 8000540:	f7ff ff88 	bl	8000454 <SPI_Eth_RT>
 8000544:	4603      	mov	r3, r0
 8000546:	73bb      	strb	r3, [r7, #14]
	SPI_Eth_SS(OFF);
 8000548:	2000      	movs	r0, #0
 800054a:	f7ff ff63 	bl	8000414 <SPI_Eth_SS>
	return dat;
 800054e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <SPI_W6100_WSOCK>:

void SPI_W6100_WSOCK(uint16_t adr, uint8_t val, uint8_t socket_nbr, uint8_t block) {
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	4604      	mov	r4, r0
 8000560:	4608      	mov	r0, r1
 8000562:	4611      	mov	r1, r2
 8000564:	461a      	mov	r2, r3
 8000566:	4623      	mov	r3, r4
 8000568:	80fb      	strh	r3, [r7, #6]
 800056a:	4603      	mov	r3, r0
 800056c:	717b      	strb	r3, [r7, #5]
 800056e:	460b      	mov	r3, r1
 8000570:	713b      	strb	r3, [r7, #4]
 8000572:	4613      	mov	r3, r2
 8000574:	70fb      	strb	r3, [r7, #3]
	uint8_t cb_temp = 0x04;
 8000576:	2304      	movs	r3, #4
 8000578:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 800057a:	793b      	ldrb	r3, [r7, #4]
 800057c:	015b      	lsls	r3, r3, #5
 800057e:	b25a      	sxtb	r2, r3
 8000580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000584:	4313      	orrs	r3, r2
 8000586:	b25b      	sxtb	r3, r3
 8000588:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 800058a:	78fb      	ldrb	r3, [r7, #3]
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	b25a      	sxtb	r2, r3
 8000590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000594:	4313      	orrs	r3, r2
 8000596:	b25b      	sxtb	r3, r3
 8000598:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 800059a:	2001      	movs	r0, #1
 800059c:	f7ff ff3a 	bl	8000414 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 80005a0:	88fb      	ldrh	r3, [r7, #6]
 80005a2:	0a1b      	lsrs	r3, r3, #8
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff ff53 	bl	8000454 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff4e 	bl	8000454 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff ff4a 	bl	8000454 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 80005c0:	797b      	ldrb	r3, [r7, #5]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff ff46 	bl	8000454 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff ff23 	bl	8000414 <SPI_Eth_SS>
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd90      	pop	{r4, r7, pc}

080005d6 <W6100_INIT>:

void W6100_INIT(void) {
 80005d6:	b580      	push	{r7, lr}
 80005d8:	af00      	add	r7, sp, #0
	/* *** W6100 Init *** */
	SPI_W6100_WCR(NETLCKR, 0x3a);	// NETLCKR		Network settings unlock
 80005da:	213a      	movs	r1, #58	; 0x3a
 80005dc:	f244 10f5 	movw	r0, #16885	; 0x41f5
 80005e0:	f7ff ff5a 	bl	8000498 <SPI_W6100_WCR>

	SPI_W6100_WCR(SHAR0, MAC0);	// SHAR[5:0]	Set hardware MAC address
 80005e4:	2111      	movs	r1, #17
 80005e6:	f244 1020 	movw	r0, #16672	; 0x4120
 80005ea:	f7ff ff55 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR1, MAC1);
 80005ee:	2122      	movs	r1, #34	; 0x22
 80005f0:	f244 1021 	movw	r0, #16673	; 0x4121
 80005f4:	f7ff ff50 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR2, MAC2);
 80005f8:	2133      	movs	r1, #51	; 0x33
 80005fa:	f244 1022 	movw	r0, #16674	; 0x4122
 80005fe:	f7ff ff4b 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR3, MAC3);
 8000602:	21aa      	movs	r1, #170	; 0xaa
 8000604:	f244 1023 	movw	r0, #16675	; 0x4123
 8000608:	f7ff ff46 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR4, MAC4);
 800060c:	21bb      	movs	r1, #187	; 0xbb
 800060e:	f244 1024 	movw	r0, #16676	; 0x4124
 8000612:	f7ff ff41 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR5, MAC5);
 8000616:	21cc      	movs	r1, #204	; 0xcc
 8000618:	f244 1025 	movw	r0, #16677	; 0x4125
 800061c:	f7ff ff3c 	bl	8000498 <SPI_W6100_WCR>

	SPI_W6100_WCR(GAR0, GIP0);	// GAR[0:3]		Gateway IP address 192.168.0.1
 8000620:	21c0      	movs	r1, #192	; 0xc0
 8000622:	f244 1030 	movw	r0, #16688	; 0x4130
 8000626:	f7ff ff37 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR1, GIP1);
 800062a:	21a8      	movs	r1, #168	; 0xa8
 800062c:	f244 1031 	movw	r0, #16689	; 0x4131
 8000630:	f7ff ff32 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR2, GIP2);
 8000634:	2100      	movs	r1, #0
 8000636:	f244 1032 	movw	r0, #16690	; 0x4132
 800063a:	f7ff ff2d 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR3, GIP3);
 800063e:	2101      	movs	r1, #1
 8000640:	f244 1033 	movw	r0, #16691	; 0x4133
 8000644:	f7ff ff28 	bl	8000498 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUBR0, SBM0);	// SUBR[0:3]	Subnet mask address 255:255:255:0
 8000648:	21ff      	movs	r1, #255	; 0xff
 800064a:	f244 1034 	movw	r0, #16692	; 0x4134
 800064e:	f7ff ff23 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR1, SBM1);
 8000652:	21ff      	movs	r1, #255	; 0xff
 8000654:	f244 1035 	movw	r0, #16693	; 0x4135
 8000658:	f7ff ff1e 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR2, SBM2);
 800065c:	21ff      	movs	r1, #255	; 0xff
 800065e:	f244 1036 	movw	r0, #16694	; 0x4136
 8000662:	f7ff ff19 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR3, SBM3);
 8000666:	2100      	movs	r1, #0
 8000668:	f244 1037 	movw	r0, #16695	; 0x4137
 800066c:	f7ff ff14 	bl	8000498 <SPI_W6100_WCR>

	SPI_W6100_WCR(SIPR0, IPV0);	// SIPR[0:3]	IPv4 Source IP Address 192.168.0.27
 8000670:	21c0      	movs	r1, #192	; 0xc0
 8000672:	f244 1038 	movw	r0, #16696	; 0x4138
 8000676:	f7ff ff0f 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR1, IPV1);
 800067a:	21a8      	movs	r1, #168	; 0xa8
 800067c:	f244 1039 	movw	r0, #16697	; 0x4139
 8000680:	f7ff ff0a 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR2, IPV2);
 8000684:	2100      	movs	r1, #0
 8000686:	f244 103a 	movw	r0, #16698	; 0x413a
 800068a:	f7ff ff05 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR3, IPV3);
 800068e:	211b      	movs	r1, #27
 8000690:	f244 103b 	movw	r0, #16699	; 0x413b
 8000694:	f7ff ff00 	bl	8000498 <SPI_W6100_WCR>

	SPI_W6100_WCR(LLAR0, 0xfe);	// Link Local Address, FE80::1322:33FF:FEAA:BBCC
 8000698:	21fe      	movs	r1, #254	; 0xfe
 800069a:	f244 1040 	movw	r0, #16704	; 0x4140
 800069e:	f7ff fefb 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR1, 0x80);
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	f244 1041 	movw	r0, #16705	; 0x4141
 80006a8:	f7ff fef6 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR2, 0x00);
 80006ac:	2100      	movs	r1, #0
 80006ae:	f244 1042 	movw	r0, #16706	; 0x4142
 80006b2:	f7ff fef1 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR3, 0x01);
 80006b6:	2101      	movs	r1, #1
 80006b8:	f244 1043 	movw	r0, #16707	; 0x4143
 80006bc:	f7ff feec 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR4, 0x00);
 80006c0:	2100      	movs	r1, #0
 80006c2:	f244 1044 	movw	r0, #16708	; 0x4144
 80006c6:	f7ff fee7 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR5, 0x00);
 80006ca:	2100      	movs	r1, #0
 80006cc:	f244 1045 	movw	r0, #16709	; 0x4145
 80006d0:	f7ff fee2 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR6, 0x00);
 80006d4:	2100      	movs	r1, #0
 80006d6:	f244 1046 	movw	r0, #16710	; 0x4146
 80006da:	f7ff fedd 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR7, 0x00);
 80006de:	2100      	movs	r1, #0
 80006e0:	f244 1047 	movw	r0, #16711	; 0x4147
 80006e4:	f7ff fed8 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR8, 0x13);
 80006e8:	2113      	movs	r1, #19
 80006ea:	f244 1048 	movw	r0, #16712	; 0x4148
 80006ee:	f7ff fed3 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR9, 0x22);
 80006f2:	2122      	movs	r1, #34	; 0x22
 80006f4:	f244 1049 	movw	r0, #16713	; 0x4149
 80006f8:	f7ff fece 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR10, 0x33);
 80006fc:	2133      	movs	r1, #51	; 0x33
 80006fe:	f244 104a 	movw	r0, #16714	; 0x414a
 8000702:	f7ff fec9 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR11, 0xff);
 8000706:	21ff      	movs	r1, #255	; 0xff
 8000708:	f244 104b 	movw	r0, #16715	; 0x414b
 800070c:	f7ff fec4 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR12, 0xfe);
 8000710:	21fe      	movs	r1, #254	; 0xfe
 8000712:	f244 104c 	movw	r0, #16716	; 0x414c
 8000716:	f7ff febf 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR13, 0xaa);
 800071a:	21aa      	movs	r1, #170	; 0xaa
 800071c:	f244 104d 	movw	r0, #16717	; 0x414d
 8000720:	f7ff feba 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR14, 0xbb);
 8000724:	21bb      	movs	r1, #187	; 0xbb
 8000726:	f244 104e 	movw	r0, #16718	; 0x414e
 800072a:	f7ff feb5 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR15, 0xcc);
 800072e:	21cc      	movs	r1, #204	; 0xcc
 8000730:	f244 104f 	movw	r0, #16719	; 0x414f
 8000734:	f7ff feb0 	bl	8000498 <SPI_W6100_WCR>

	SPI_W6100_WCR(GUAR0, 0x20);	// Global Unicast Address, 2001:0DB8:E001::1222:33FF:FEAA:BBCC
 8000738:	2120      	movs	r1, #32
 800073a:	f244 1050 	movw	r0, #16720	; 0x4150
 800073e:	f7ff feab 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR1, 0x01);
 8000742:	2101      	movs	r1, #1
 8000744:	f244 1051 	movw	r0, #16721	; 0x4151
 8000748:	f7ff fea6 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR2, 0x0d);
 800074c:	210d      	movs	r1, #13
 800074e:	f244 1052 	movw	r0, #16722	; 0x4152
 8000752:	f7ff fea1 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR3, 0xb8);
 8000756:	21b8      	movs	r1, #184	; 0xb8
 8000758:	f244 1053 	movw	r0, #16723	; 0x4153
 800075c:	f7ff fe9c 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR4, 0xe0);
 8000760:	21e0      	movs	r1, #224	; 0xe0
 8000762:	f244 1054 	movw	r0, #16724	; 0x4154
 8000766:	f7ff fe97 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR5, 0x01);
 800076a:	2101      	movs	r1, #1
 800076c:	f244 1055 	movw	r0, #16725	; 0x4155
 8000770:	f7ff fe92 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR6, 0x00);
 8000774:	2100      	movs	r1, #0
 8000776:	f244 1056 	movw	r0, #16726	; 0x4156
 800077a:	f7ff fe8d 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR7, 0x00);
 800077e:	2100      	movs	r1, #0
 8000780:	f244 1057 	movw	r0, #16727	; 0x4157
 8000784:	f7ff fe88 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR8, 0x13);
 8000788:	2113      	movs	r1, #19
 800078a:	f244 1058 	movw	r0, #16728	; 0x4158
 800078e:	f7ff fe83 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR9, 0x22);
 8000792:	2122      	movs	r1, #34	; 0x22
 8000794:	f244 1059 	movw	r0, #16729	; 0x4159
 8000798:	f7ff fe7e 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR10, 0x33);
 800079c:	2133      	movs	r1, #51	; 0x33
 800079e:	f244 105a 	movw	r0, #16730	; 0x415a
 80007a2:	f7ff fe79 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR11, 0xff);
 80007a6:	21ff      	movs	r1, #255	; 0xff
 80007a8:	f244 105b 	movw	r0, #16731	; 0x415b
 80007ac:	f7ff fe74 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR12, 0xfe);
 80007b0:	21fe      	movs	r1, #254	; 0xfe
 80007b2:	f244 105c 	movw	r0, #16732	; 0x415c
 80007b6:	f7ff fe6f 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR13, 0xaa);
 80007ba:	21aa      	movs	r1, #170	; 0xaa
 80007bc:	f244 105d 	movw	r0, #16733	; 0x415d
 80007c0:	f7ff fe6a 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR14, 0xbb);
 80007c4:	21bb      	movs	r1, #187	; 0xbb
 80007c6:	f244 105e 	movw	r0, #16734	; 0x415e
 80007ca:	f7ff fe65 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR15, 0xcc);
 80007ce:	21cc      	movs	r1, #204	; 0xcc
 80007d0:	f244 105f 	movw	r0, #16735	; 0x415f
 80007d4:	f7ff fe60 	bl	8000498 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUB6R0, 0xff);	// IPv6 Subnet Prefix, FFFF:FFFF::
 80007d8:	21ff      	movs	r1, #255	; 0xff
 80007da:	f244 1060 	movw	r0, #16736	; 0x4160
 80007de:	f7ff fe5b 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R1, 0xff);
 80007e2:	21ff      	movs	r1, #255	; 0xff
 80007e4:	f244 1061 	movw	r0, #16737	; 0x4161
 80007e8:	f7ff fe56 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R2, 0xff);
 80007ec:	21ff      	movs	r1, #255	; 0xff
 80007ee:	f244 1062 	movw	r0, #16738	; 0x4162
 80007f2:	f7ff fe51 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R3, 0xff);
 80007f6:	21ff      	movs	r1, #255	; 0xff
 80007f8:	f244 1063 	movw	r0, #16739	; 0x4163
 80007fc:	f7ff fe4c 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R4, 0xff);
 8000800:	21ff      	movs	r1, #255	; 0xff
 8000802:	f244 1064 	movw	r0, #16740	; 0x4164
 8000806:	f7ff fe47 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R5, 0xff);
 800080a:	21ff      	movs	r1, #255	; 0xff
 800080c:	f244 1065 	movw	r0, #16741	; 0x4165
 8000810:	f7ff fe42 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R6, 0xff);
 8000814:	21ff      	movs	r1, #255	; 0xff
 8000816:	f244 1066 	movw	r0, #16742	; 0x4166
 800081a:	f7ff fe3d 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R7, 0xff);
 800081e:	21ff      	movs	r1, #255	; 0xff
 8000820:	f244 1067 	movw	r0, #16743	; 0x4167
 8000824:	f7ff fe38 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R8, 0x00);
 8000828:	2100      	movs	r1, #0
 800082a:	f244 1068 	movw	r0, #16744	; 0x4168
 800082e:	f7ff fe33 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R9, 0x00);
 8000832:	2100      	movs	r1, #0
 8000834:	f244 1069 	movw	r0, #16745	; 0x4169
 8000838:	f7ff fe2e 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R10, 0x00);
 800083c:	2100      	movs	r1, #0
 800083e:	f244 106a 	movw	r0, #16746	; 0x416a
 8000842:	f7ff fe29 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R11, 0x00);
 8000846:	2100      	movs	r1, #0
 8000848:	f244 106b 	movw	r0, #16747	; 0x416b
 800084c:	f7ff fe24 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R12, 0x00);
 8000850:	2100      	movs	r1, #0
 8000852:	f244 106c 	movw	r0, #16748	; 0x416c
 8000856:	f7ff fe1f 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R13, 0x00);
 800085a:	2100      	movs	r1, #0
 800085c:	f244 106d 	movw	r0, #16749	; 0x416d
 8000860:	f7ff fe1a 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R14, 0x00);
 8000864:	2100      	movs	r1, #0
 8000866:	f244 106e 	movw	r0, #16750	; 0x416e
 800086a:	f7ff fe15 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R15, 0x00);
 800086e:	2100      	movs	r1, #0
 8000870:	f244 106f 	movw	r0, #16751	; 0x416f
 8000874:	f7ff fe10 	bl	8000498 <SPI_W6100_WCR>

	SPI_W6100_WCR(GA6R0, 0xfe);	// IPv6 Gateway Address, FFFF:FFFF::
 8000878:	21fe      	movs	r1, #254	; 0xfe
 800087a:	f244 1070 	movw	r0, #16752	; 0x4170
 800087e:	f7ff fe0b 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R1, 0x80);
 8000882:	2180      	movs	r1, #128	; 0x80
 8000884:	f244 1071 	movw	r0, #16753	; 0x4171
 8000888:	f7ff fe06 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R2, 0x00);
 800088c:	2100      	movs	r1, #0
 800088e:	f244 1072 	movw	r0, #16754	; 0x4172
 8000892:	f7ff fe01 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R3, 0x00);
 8000896:	2100      	movs	r1, #0
 8000898:	f244 1073 	movw	r0, #16755	; 0x4173
 800089c:	f7ff fdfc 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R4, 0x00);
 80008a0:	2100      	movs	r1, #0
 80008a2:	f244 1074 	movw	r0, #16756	; 0x4174
 80008a6:	f7ff fdf7 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R5, 0x00);
 80008aa:	2100      	movs	r1, #0
 80008ac:	f244 1075 	movw	r0, #16757	; 0x4175
 80008b0:	f7ff fdf2 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R6, 0x00);
 80008b4:	2100      	movs	r1, #0
 80008b6:	f244 1076 	movw	r0, #16758	; 0x4176
 80008ba:	f7ff fded 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R7, 0x00);
 80008be:	2100      	movs	r1, #0
 80008c0:	f244 1077 	movw	r0, #16759	; 0x4177
 80008c4:	f7ff fde8 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R8, 0x13);
 80008c8:	2113      	movs	r1, #19
 80008ca:	f244 1078 	movw	r0, #16760	; 0x4178
 80008ce:	f7ff fde3 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R9, 0x22);
 80008d2:	2122      	movs	r1, #34	; 0x22
 80008d4:	f244 1079 	movw	r0, #16761	; 0x4179
 80008d8:	f7ff fdde 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R10, 0x33);
 80008dc:	2133      	movs	r1, #51	; 0x33
 80008de:	f244 107a 	movw	r0, #16762	; 0x417a
 80008e2:	f7ff fdd9 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R11, 0xff);
 80008e6:	21ff      	movs	r1, #255	; 0xff
 80008e8:	f244 107b 	movw	r0, #16763	; 0x417b
 80008ec:	f7ff fdd4 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R12, 0xfe);
 80008f0:	21fe      	movs	r1, #254	; 0xfe
 80008f2:	f244 107c 	movw	r0, #16764	; 0x417c
 80008f6:	f7ff fdcf 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R13, 0x44);
 80008fa:	2144      	movs	r1, #68	; 0x44
 80008fc:	f244 107d 	movw	r0, #16765	; 0x417d
 8000900:	f7ff fdca 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R14, 0x55);
 8000904:	2155      	movs	r1, #85	; 0x55
 8000906:	f244 107e 	movw	r0, #16766	; 0x417e
 800090a:	f7ff fdc5 	bl	8000498 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R15, 0x66);
 800090e:	2166      	movs	r1, #102	; 0x66
 8000910:	f244 107f 	movw	r0, #16767	; 0x417f
 8000914:	f7ff fdc0 	bl	8000498 <SPI_W6100_WCR>

	SPI_W6100_WCR(NETLCKR, 0x00);	// NETLCKR		Network settings lock
 8000918:	2100      	movs	r1, #0
 800091a:	f244 10f5 	movw	r0, #16885	; 0x41f5
 800091e:	f7ff fdbb 	bl	8000498 <SPI_W6100_WCR>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <W6100_OpenTCPSocket>:




uint32_t W6100_OpenTCPSocket (uint8_t sck_nbr) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	uint32_t dest_adr;
	/* *** Open Socket as TCP4 *** */
	SPI_W6100_WSOCK(Sn_MR, 0x01, sck_nbr, REG);				// Set TCP4 mode
 8000932:	79fa      	ldrb	r2, [r7, #7]
 8000934:	2301      	movs	r3, #1
 8000936:	2101      	movs	r1, #1
 8000938:	2000      	movs	r0, #0
 800093a:	f7ff fe0d 	bl	8000558 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR0, 0x13, sck_nbr, REG);			// Set PORT 5000
 800093e:	79fa      	ldrb	r2, [r7, #7]
 8000940:	2301      	movs	r3, #1
 8000942:	2113      	movs	r1, #19
 8000944:	f44f 708a 	mov.w	r0, #276	; 0x114
 8000948:	f7ff fe06 	bl	8000558 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR1, 0x88, sck_nbr, REG);
 800094c:	79fa      	ldrb	r2, [r7, #7]
 800094e:	2301      	movs	r3, #1
 8000950:	2188      	movs	r1, #136	; 0x88
 8000952:	f240 1015 	movw	r0, #277	; 0x115
 8000956:	f7ff fdff 	bl	8000558 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_CR, 0x01, sck_nbr, REG);				// Set OPEN command
 800095a:	79fa      	ldrb	r2, [r7, #7]
 800095c:	2301      	movs	r3, #1
 800095e:	2101      	movs	r1, #1
 8000960:	2010      	movs	r0, #16
 8000962:	f7ff fdf9 	bl	8000558 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until OPEN command is cleared
 8000966:	bf00      	nop
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	2201      	movs	r2, #1
 800096c:	4619      	mov	r1, r3
 800096e:	2010      	movs	r0, #16
 8000970:	f7ff fdb7 	bl	80004e2 <SPI_W6100_RSOCK>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d1f6      	bne.n	8000968 <W6100_OpenTCPSocket+0x40>


	SPI_W6100_WSOCK(Sn_CR, 0x02, sck_nbr, REG);				// Set LISTEN command
 800097a:	79fa      	ldrb	r2, [r7, #7]
 800097c:	2301      	movs	r3, #1
 800097e:	2102      	movs	r1, #2
 8000980:	2010      	movs	r0, #16
 8000982:	f7ff fde9 	bl	8000558 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until LISTEN command is cleared
 8000986:	bf00      	nop
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2201      	movs	r2, #1
 800098c:	4619      	mov	r1, r3
 800098e:	2010      	movs	r0, #16
 8000990:	f7ff fda7 	bl	80004e2 <SPI_W6100_RSOCK>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1f6      	bne.n	8000988 <W6100_OpenTCPSocket+0x60>

	// CONNECT NOW

	while ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x17);	// Wait until SOCKET ESTABLISHED
 800099a:	bf00      	nop
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2201      	movs	r2, #1
 80009a0:	4619      	mov	r1, r3
 80009a2:	2030      	movs	r0, #48	; 0x30
 80009a4:	f7ff fd9d 	bl	80004e2 <SPI_W6100_RSOCK>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b17      	cmp	r3, #23
 80009ac:	d1f6      	bne.n	800099c <W6100_OpenTCPSocket+0x74>
	GPIOC->ODR &= ~GPIO_ODR_OD8;
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <W6100_OpenTCPSocket+0x114>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <W6100_OpenTCPSocket+0x114>)
 80009b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009b8:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= GPIO_ODR_OD9;								// Socket established
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <W6100_OpenTCPSocket+0x114>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <W6100_OpenTCPSocket+0x114>)
 80009c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c4:	6153      	str	r3, [r2, #20]
	SPI_W6100_WSOCK(Sn_IRCLR, 0x01, sck_nbr, REG);			// Interrupt clear
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	2301      	movs	r3, #1
 80009ca:	2101      	movs	r1, #1
 80009cc:	2028      	movs	r0, #40	; 0x28
 80009ce:	f7ff fdc3 	bl	8000558 <SPI_W6100_WSOCK>

	// Read destination address
	dest_adr = (SPI_W6100_RSOCK(Sn_DIPR0, sck_nbr, REG) << 24);
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2201      	movs	r2, #1
 80009d6:	4619      	mov	r1, r3
 80009d8:	f44f 7090 	mov.w	r0, #288	; 0x120
 80009dc:	f7ff fd81 	bl	80004e2 <SPI_W6100_RSOCK>
 80009e0:	4603      	mov	r3, r0
 80009e2:	061b      	lsls	r3, r3, #24
 80009e4:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR1, sck_nbr, REG) << 16);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2201      	movs	r2, #1
 80009ea:	4619      	mov	r1, r3
 80009ec:	f240 1021 	movw	r0, #289	; 0x121
 80009f0:	f7ff fd77 	bl	80004e2 <SPI_W6100_RSOCK>
 80009f4:	4603      	mov	r3, r0
 80009f6:	041b      	lsls	r3, r3, #16
 80009f8:	461a      	mov	r2, r3
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR2, sck_nbr, REG) << 8);
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 7091 	mov.w	r0, #290	; 0x122
 8000a0a:	f7ff fd6a 	bl	80004e2 <SPI_W6100_RSOCK>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	461a      	mov	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
	dest_adr |= SPI_W6100_RSOCK(Sn_DIPR3, sck_nbr, REG);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f240 1023 	movw	r0, #291	; 0x123
 8000a24:	f7ff fd5d 	bl	80004e2 <SPI_W6100_RSOCK>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]

	return dest_adr;	// Return destination address
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40020800 	.word	0x40020800

08000a40 <W6100_ReceiveData>:




uint8_t W6100_ReceiveData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab) {
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b08b      	sub	sp, #44	; 0x2c
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	uint32_t get_size, gSn_RX_MAX, get_start_address, Sn_RX_RD_temp;

	if ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0b00000100) == 0x04) {					// Check if data received
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	2201      	movs	r2, #1
 8000a52:	4619      	mov	r1, r3
 8000a54:	2020      	movs	r0, #32
 8000a56:	f7ff fd44 	bl	80004e2 <SPI_W6100_RSOCK>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	f040 80a1 	bne.w	8000ba8 <W6100_ReceiveData+0x168>

			// Clear data interrupt
			SPI_W6100_WSOCK(Sn_IRCLR, 0x04, sck_nbr, REG);
 8000a66:	7bfa      	ldrb	r2, [r7, #15]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	2028      	movs	r0, #40	; 0x28
 8000a6e:	f7ff fd73 	bl	8000558 <SPI_W6100_WSOCK>

			// Read data from the buffer
			get_size = (SPI_W6100_RSOCK(Sn_RX_RSR0, sck_nbr, REG) << 8);
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	2201      	movs	r2, #1
 8000a76:	4619      	mov	r1, r3
 8000a78:	f44f 7009 	mov.w	r0, #548	; 0x224
 8000a7c:	f7ff fd31 	bl	80004e2 <SPI_W6100_RSOCK>
 8000a80:	4603      	mov	r3, r0
 8000a82:	021b      	lsls	r3, r3, #8
 8000a84:	623b      	str	r3, [r7, #32]
			get_size |= SPI_W6100_RSOCK(Sn_RX_RSR1, sck_nbr, REG);
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	f240 2025 	movw	r0, #549	; 0x225
 8000a90:	f7ff fd27 	bl	80004e2 <SPI_W6100_RSOCK>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	623b      	str	r3, [r7, #32]
			gSn_RX_MAX = (SPI_W6100_RSOCK(Sn_RX_BSR, sck_nbr, REG) * 1024);
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f44f 7008 	mov.w	r0, #544	; 0x220
 8000aa8:	f7ff fd1b 	bl	80004e2 <SPI_W6100_RSOCK>
 8000aac:	4603      	mov	r3, r0
 8000aae:	029b      	lsls	r3, r3, #10
 8000ab0:	61fb      	str	r3, [r7, #28]
			get_start_address = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f44f 700a 	mov.w	r0, #552	; 0x228
 8000abc:	f7ff fd11 	bl	80004e2 <SPI_W6100_RSOCK>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	617b      	str	r3, [r7, #20]
			get_start_address |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4619      	mov	r1, r3
 8000acc:	f240 2029 	movw	r0, #553	; 0x229
 8000ad0:	f7ff fd07 	bl	80004e2 <SPI_W6100_RSOCK>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	617b      	str	r3, [r7, #20]

			// Move data to the array
			for (i=0; i<get_size; i++) {
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ae4:	e016      	b.n	8000b14 <W6100_ReceiveData+0xd4>
				tab[i] = SPI_W6100_RSOCK((get_start_address+i), sck_nbr, RX_BUF);
 8000ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	4413      	add	r3, r2
 8000af2:	b298      	uxth	r0, r3
 8000af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	18d4      	adds	r4, r2, r3
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2203      	movs	r2, #3
 8000b00:	4619      	mov	r1, r3
 8000b02:	f7ff fcee 	bl	80004e2 <SPI_W6100_RSOCK>
 8000b06:	4603      	mov	r3, r0
 8000b08:	7023      	strb	r3, [r4, #0]
			for (i=0; i<get_size; i++) {
 8000b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b0e:	3301      	adds	r3, #1
 8000b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d8e3      	bhi.n	8000ae6 <W6100_ReceiveData+0xa6>
			}

			memcpy(&get_start_address, &dest_adr, get_size);
 8000b1e:	f107 0108 	add.w	r1, r7, #8
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	6a3a      	ldr	r2, [r7, #32]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f891 	bl	8000c50 <memcpy>

			Sn_RX_RD_temp = ((SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8));
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	2201      	movs	r2, #1
 8000b32:	4619      	mov	r1, r3
 8000b34:	f44f 700a 	mov.w	r0, #552	; 0x228
 8000b38:	f7ff fcd3 	bl	80004e2 <SPI_W6100_RSOCK>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	2201      	movs	r2, #1
 8000b46:	4619      	mov	r1, r3
 8000b48:	f240 2029 	movw	r0, #553	; 0x229
 8000b4c:	f7ff fcc9 	bl	80004e2 <SPI_W6100_RSOCK>
 8000b50:	4603      	mov	r3, r0
 8000b52:	461a      	mov	r2, r3
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp += get_size;
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
 8000b5e:	4413      	add	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
			SPI_W6100_WSOCK(Sn_RX_RD0, (Sn_RX_RD_temp>>8), sck_nbr, REG);
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	b2d9      	uxtb	r1, r3
 8000b68:	7bfa      	ldrb	r2, [r7, #15]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	f44f 700a 	mov.w	r0, #552	; 0x228
 8000b70:	f7ff fcf2 	bl	8000558 <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_RX_RD1, (Sn_RX_RD_temp), sck_nbr, REG);
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	b2d9      	uxtb	r1, r3
 8000b78:	7bfa      	ldrb	r2, [r7, #15]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	f240 2029 	movw	r0, #553	; 0x229
 8000b80:	f7ff fcea 	bl	8000558 <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_CR, 0x40, sck_nbr, REG);
 8000b84:	7bfa      	ldrb	r2, [r7, #15]
 8000b86:	2301      	movs	r3, #1
 8000b88:	2140      	movs	r1, #64	; 0x40
 8000b8a:	2010      	movs	r0, #16
 8000b8c:	f7ff fce4 	bl	8000558 <SPI_W6100_WSOCK>
			while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);
 8000b90:	bf00      	nop
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	2201      	movs	r2, #1
 8000b96:	4619      	mov	r1, r3
 8000b98:	2010      	movs	r0, #16
 8000b9a:	f7ff fca2 	bl	80004e2 <SPI_W6100_RSOCK>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1f6      	bne.n	8000b92 <W6100_ReceiveData+0x152>

			return 1;	// Return 1 if data was received
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e000      	b.n	8000baa <W6100_ReceiveData+0x16a>
	}

	else 	return 0;	// Return 0 of no data was received
 8000ba8:	2300      	movs	r3, #0

}
 8000baa:	4618      	mov	r0, r3
 8000bac:	372c      	adds	r7, #44	; 0x2c
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd90      	pop	{r4, r7, pc}
	...

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bba:	e003      	b.n	8000bc4 <LoopCopyDataInit>

08000bbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bc2:	3104      	adds	r1, #4

08000bc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bcc:	d3f6      	bcc.n	8000bbc <CopyDataInit>
  ldr  r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bd0:	e002      	b.n	8000bd8 <LoopFillZerobss>

08000bd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bd4:	f842 3b04 	str.w	r3, [r2], #4

08000bd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bdc:	d3f9      	bcc.n	8000bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bde:	f7ff fc03 	bl	80003e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f000 f811 	bl	8000c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fb99 	bl	800031c <main>
  bx  lr    
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bf0:	08000c98 	.word	0x08000c98
  ldr  r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bf8:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000bfc:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000c00:	2000001c 	.word	0x2000001c

08000c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>
	...

08000c08 <__libc_init_array>:
 8000c08:	b570      	push	{r4, r5, r6, lr}
 8000c0a:	4e0d      	ldr	r6, [pc, #52]	; (8000c40 <__libc_init_array+0x38>)
 8000c0c:	4c0d      	ldr	r4, [pc, #52]	; (8000c44 <__libc_init_array+0x3c>)
 8000c0e:	1ba4      	subs	r4, r4, r6
 8000c10:	10a4      	asrs	r4, r4, #2
 8000c12:	2500      	movs	r5, #0
 8000c14:	42a5      	cmp	r5, r4
 8000c16:	d109      	bne.n	8000c2c <__libc_init_array+0x24>
 8000c18:	4e0b      	ldr	r6, [pc, #44]	; (8000c48 <__libc_init_array+0x40>)
 8000c1a:	4c0c      	ldr	r4, [pc, #48]	; (8000c4c <__libc_init_array+0x44>)
 8000c1c:	f000 f82c 	bl	8000c78 <_init>
 8000c20:	1ba4      	subs	r4, r4, r6
 8000c22:	10a4      	asrs	r4, r4, #2
 8000c24:	2500      	movs	r5, #0
 8000c26:	42a5      	cmp	r5, r4
 8000c28:	d105      	bne.n	8000c36 <__libc_init_array+0x2e>
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c30:	4798      	blx	r3
 8000c32:	3501      	adds	r5, #1
 8000c34:	e7ee      	b.n	8000c14 <__libc_init_array+0xc>
 8000c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c3a:	4798      	blx	r3
 8000c3c:	3501      	adds	r5, #1
 8000c3e:	e7f2      	b.n	8000c26 <__libc_init_array+0x1e>
 8000c40:	08000c90 	.word	0x08000c90
 8000c44:	08000c90 	.word	0x08000c90
 8000c48:	08000c90 	.word	0x08000c90
 8000c4c:	08000c94 	.word	0x08000c94

08000c50 <memcpy>:
 8000c50:	b510      	push	{r4, lr}
 8000c52:	1e43      	subs	r3, r0, #1
 8000c54:	440a      	add	r2, r1
 8000c56:	4291      	cmp	r1, r2
 8000c58:	d100      	bne.n	8000c5c <memcpy+0xc>
 8000c5a:	bd10      	pop	{r4, pc}
 8000c5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000c60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000c64:	e7f7      	b.n	8000c56 <memcpy+0x6>

08000c66 <memset>:
 8000c66:	4402      	add	r2, r0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d100      	bne.n	8000c70 <memset+0xa>
 8000c6e:	4770      	bx	lr
 8000c70:	f803 1b01 	strb.w	r1, [r3], #1
 8000c74:	e7f9      	b.n	8000c6a <memset+0x4>
	...

08000c78 <_init>:
 8000c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7a:	bf00      	nop
 8000c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7e:	bc08      	pop	{r3}
 8000c80:	469e      	mov	lr, r3
 8000c82:	4770      	bx	lr

08000c84 <_fini>:
 8000c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c86:	bf00      	nop
 8000c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c8a:	bc08      	pop	{r3}
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	4770      	bx	lr
