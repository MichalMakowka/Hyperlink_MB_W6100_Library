
Hyperlink_MB_W6100_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000fc4  08000fc4  00010fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fec  08000fec  00010ff4  2**0
                  CONTENTS
  4 .ARM          00000000  08000fec  08000fec  00010ff4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fec  08000ff4  00010ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fec  08000fec  00010fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ff0  08000ff0  00010ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000ff4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000ff4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010ff4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a4c  00000000  00000000  00011024  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000091f  00000000  00000000  00014a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000138  00000000  00000000  00015390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e0  00000000  00000000  000154c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018bf6  00000000  00000000  000155a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000215b  00000000  00000000  0002e19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000837cf  00000000  00000000  000302f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3ac8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000374  00000000  00000000  000b3b44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000fac 	.word	0x08000fac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000fac 	.word	0x08000fac

080001c8 <CanInit>:
 */

#include "can.h"


void CanInit(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

	// *** Pin configuration and remap assignment *** //
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;		// Enable CAN 1 CLK
 80001cc:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <CanInit+0x34>)
 80001ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <CanInit+0x34>)
 80001d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001d6:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOB->MODER |= GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1;	// PB8 and PB9 Alternative Function
 80001d8:	4b09      	ldr	r3, [pc, #36]	; (8000200 <CanInit+0x38>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a08      	ldr	r2, [pc, #32]	; (8000200 <CanInit+0x38>)
 80001de:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_3 | GPIO_AFRH_AFRH0_0 | GPIO_AFRH_AFRH1_0 | GPIO_AFRH_AFRH1_3;		// Alternative function mapped to CAN1_Tx and CAN1_Rx
 80001e4:	4b06      	ldr	r3, [pc, #24]	; (8000200 <CanInit+0x38>)
 80001e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001e8:	4a05      	ldr	r2, [pc, #20]	; (8000200 <CanInit+0x38>)
 80001ea:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 80001ee:	6253      	str	r3, [r2, #36]	; 0x24

}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40023800 	.word	0x40023800
 8000200:	40020400 	.word	0x40020400

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	; (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3b01      	subs	r3, #1
 8000264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000268:	d301      	bcc.n	800026e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800026a:	2301      	movs	r3, #1
 800026c:	e00f      	b.n	800028e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <SysTick_Config+0x40>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3b01      	subs	r3, #1
 8000274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000276:	210f      	movs	r1, #15
 8000278:	f04f 30ff 	mov.w	r0, #4294967295
 800027c:	f7ff ffc2 	bl	8000204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <SysTick_Config+0x40>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000286:	4b04      	ldr	r3, [pc, #16]	; (8000298 <SysTick_Config+0x40>)
 8000288:	2207      	movs	r2, #7
 800028a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800028c:	2300      	movs	r3, #0
}
 800028e:	4618      	mov	r0, r3
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	e000e010 	.word	0xe000e010

0800029c <SystemRegisterCFG>:
 *  https://mmttechnologies.com/
 */
#include "config.h"


void SystemRegisterCFG(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	// RCC Configuration
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;	// GPIO Clock
 80002a0:	4b22      	ldr	r3, [pc, #136]	; (800032c <SystemRegisterCFG+0x90>)
 80002a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a4:	4a21      	ldr	r2, [pc, #132]	; (800032c <SystemRegisterCFG+0x90>)
 80002a6:	f043 0307 	orr.w	r3, r3, #7
 80002aa:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;		// SPI1 clock
 80002ac:	4b1f      	ldr	r3, [pc, #124]	; (800032c <SystemRegisterCFG+0x90>)
 80002ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002b0:	4a1e      	ldr	r2, [pc, #120]	; (800032c <SystemRegisterCFG+0x90>)
 80002b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002b6:	6453      	str	r3, [r2, #68]	; 0x44

	// Standard GPIO Config
	GPIOC->MODER |= GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE11_0 | GPIO_MODER_MODE12_0;	// STM LEDs output
 80002b8:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <SystemRegisterCFG+0x94>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a1c      	ldr	r2, [pc, #112]	; (8000330 <SystemRegisterCFG+0x94>)
 80002be:	f043 73a2 	orr.w	r3, r3, #21233664	; 0x1440000
 80002c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002c6:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD8 | GPIO_ODR_OD9 | GPIO_ODR_OD11 | GPIO_ODR_OD12;		// STM LEDs OFF
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <SystemRegisterCFG+0x94>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <SystemRegisterCFG+0x94>)
 80002ce:	f443 53d8 	orr.w	r3, r3, #6912	; 0x1b00
 80002d2:	6153      	str	r3, [r2, #20]

	// W6100 External Reset config
	GPIOC->MODER |= GPIO_MODER_MODE4_0;		// Output
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <SystemRegisterCFG+0x94>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a15      	ldr	r2, [pc, #84]	; (8000330 <SystemRegisterCFG+0x94>)
 80002da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002de:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD4;				// Level high (reset disable)
 80002e0:	4b13      	ldr	r3, [pc, #76]	; (8000330 <SystemRegisterCFG+0x94>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a12      	ldr	r2, [pc, #72]	; (8000330 <SystemRegisterCFG+0x94>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	6153      	str	r3, [r2, #20]

	// SPI GPIO Config
	GPIOA->MODER |= GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1;		// SPI1 AFIO Set (NSS Software)
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <SystemRegisterCFG+0x98>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a10      	ldr	r2, [pc, #64]	; (8000334 <SystemRegisterCFG+0x98>)
 80002f2:	f443 4329 	orr.w	r3, r3, #43264	; 0xa900
 80002f6:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_OD4;		// Slave select HIGH (disable)
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <SystemRegisterCFG+0x98>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <SystemRegisterCFG+0x98>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6153      	str	r3, [r2, #20]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL5_0 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL6_0 |
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <SystemRegisterCFG+0x98>)
 8000306:	6a1b      	ldr	r3, [r3, #32]
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <SystemRegisterCFG+0x98>)
 800030a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800030e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000312:	6213      	str	r3, [r2, #32]
					 GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL7_0 | GPIO_AFRL_AFRL7_2;			// SPI1 AFIO => SPI1

	// SPI Config
	SPI1->CR1 |= SPI_CR1_SPE | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_MSTR;
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <SystemRegisterCFG+0x9c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a07      	ldr	r2, [pc, #28]	; (8000338 <SystemRegisterCFG+0x9c>)
 800031a:	f443 7351 	orr.w	r3, r3, #836	; 0x344
 800031e:	6013      	str	r3, [r2, #0]


	// SysTic Config
	SysTick_Config(16000000);
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <SystemRegisterCFG+0xa0>)
 8000322:	f7ff ff99 	bl	8000258 <SysTick_Config>
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40023800 	.word	0x40023800
 8000330:	40020800 	.word	0x40020800
 8000334:	40020000 	.word	0x40020000
 8000338:	40013000 	.word	0x40013000
 800033c:	00f42400 	.word	0x00f42400

08000340 <SysTick_Handler>:





__attribute__((interrupt)) void SysTick_Handler(void){
 8000340:	4668      	mov	r0, sp
 8000342:	f020 0107 	bic.w	r1, r0, #7
 8000346:	468d      	mov	sp, r1
 8000348:	b481      	push	{r0, r7}
 800034a:	af00      	add	r7, sp, #0
//	GPIOC->ODR ^= GPIO_ODR_OD11;
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc81      	pop	{r0, r7}
 8000352:	4685      	mov	sp, r0
 8000354:	4770      	bx	lr
	...

08000358 <main>:
#include "can.h"



int main(void)
{
 8000358:	b5b0      	push	{r4, r5, r7, lr}
 800035a:	b092      	sub	sp, #72	; 0x48
 800035c:	af00      	add	r7, sp, #0

	SystemRegisterCFG();
 800035e:	f7ff ff9d 	bl	800029c <SystemRegisterCFG>

	GPIOC->ODR &= ~GPIO_ODR_OD9;						// Server RED LED ON
 8000362:	4b44      	ldr	r3, [pc, #272]	; (8000474 <main+0x11c>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	4a43      	ldr	r2, [pc, #268]	; (8000474 <main+0x11c>)
 8000368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800036c:	6153      	str	r3, [r2, #20]

	uint8_t rx_dat[20];
	uint8_t on_message[20] = {"System Enabled\n"};
 800036e:	4b42      	ldr	r3, [pc, #264]	; (8000478 <main+0x120>)
 8000370:	f107 0418 	add.w	r4, r7, #24
 8000374:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000376:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800037a:	2300      	movs	r3, #0
 800037c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t off_message[20] = {"System Disabled\n"};
 800037e:	4b3f      	ldr	r3, [pc, #252]	; (800047c <main+0x124>)
 8000380:	1d3c      	adds	r4, r7, #4
 8000382:	461d      	mov	r5, r3
 8000384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000388:	682b      	ldr	r3, [r5, #0]
 800038a:	7023      	strb	r3, [r4, #0]
 800038c:	f107 0315 	add.w	r3, r7, #21
 8000390:	2200      	movs	r2, #0
 8000392:	801a      	strh	r2, [r3, #0]
 8000394:	709a      	strb	r2, [r3, #2]


	uint32_t destination_adr;


	W6100_INIT();										// Initialise W6100 with basic network information
 8000396:	f000 f96a 	bl	800066e <W6100_INIT>

	/* Socket Configuration */
	uint8_t txTotalSize = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t rxTotalSize = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	for (uint8_t i=0; i<7; i++) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80003ac:	e01e      	b.n	80003ec <main+0x94>
		SPI_W6100_WSOCK(Sn_TX_BSR, 0x02, i, REG);		// assign 2 Kbytes TX buffer per SOCKET
 80003ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80003b2:	2301      	movs	r3, #1
 80003b4:	2102      	movs	r1, #2
 80003b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003ba:	f000 f919 	bl	80005f0 <SPI_W6100_WSOCK>
		SPI_W6100_WSOCK(Sn_RX_BSR, 0x02, i, REG);		// assign 2 Kbytes RX buffer per SOCKET
 80003be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80003c2:	2301      	movs	r3, #1
 80003c4:	2102      	movs	r1, #2
 80003c6:	f44f 7008 	mov.w	r0, #544	; 0x220
 80003ca:	f000 f911 	bl	80005f0 <SPI_W6100_WSOCK>
		txTotalSize += 0x02;
 80003ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80003d2:	3302      	adds	r3, #2
 80003d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		rxTotalSize += 0x02;
 80003d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80003dc:	3302      	adds	r3, #2
 80003de:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	for (uint8_t i=0; i<7; i++) {
 80003e2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80003e6:	3301      	adds	r3, #1
 80003e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80003ec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80003f0:	2b06      	cmp	r3, #6
 80003f2:	d9dc      	bls.n	80003ae <main+0x56>
	}

	destination_adr = W6100_OpenTCPSocket(0);			// Open TCP socket 0 and return its destination address
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 fae3 	bl	80009c0 <W6100_OpenTCPSocket>
 80003fa:	6438      	str	r0, [r7, #64]	; 0x40




	CanInit();
 80003fc:	f7ff fee4 	bl	80001c8 <CanInit>



	while (1) {

		if (W6100_ReceiveData(0, destination_adr, rx_dat, sizeof(rx_dat))) {		// Check if data arrived
 8000400:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000404:	2314      	movs	r3, #20
 8000406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000408:	2000      	movs	r0, #0
 800040a:	f000 fb65 	bl	8000ad8 <W6100_ReceiveData>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d0f5      	beq.n	8000400 <main+0xa8>
			if (rx_dat[0] == 'o' && rx_dat[1] == 'n') {
 8000414:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000418:	2b6f      	cmp	r3, #111	; 0x6f
 800041a:	d111      	bne.n	8000440 <main+0xe8>
 800041c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000420:	2b6e      	cmp	r3, #110	; 0x6e
 8000422:	d10d      	bne.n	8000440 <main+0xe8>
				GPIOC->ODR &= ~GPIO_ODR_OD12;
 8000424:	4b13      	ldr	r3, [pc, #76]	; (8000474 <main+0x11c>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4a12      	ldr	r2, [pc, #72]	; (8000474 <main+0x11c>)
 800042a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800042e:	6153      	str	r3, [r2, #20]
				W6100_TransmitData(0, destination_adr, on_message, sizeof(on_message));
 8000430:	f107 0218 	add.w	r2, r7, #24
 8000434:	2314      	movs	r3, #20
 8000436:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000438:	2000      	movs	r0, #0
 800043a:	f000 fc1c 	bl	8000c76 <W6100_TransmitData>
 800043e:	e017      	b.n	8000470 <main+0x118>
			}
			else if (rx_dat[0] == 'o' && rx_dat[1] == 'f' && rx_dat[2] == 'f')	{
 8000440:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000444:	2b6f      	cmp	r3, #111	; 0x6f
 8000446:	d1db      	bne.n	8000400 <main+0xa8>
 8000448:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800044c:	2b66      	cmp	r3, #102	; 0x66
 800044e:	d1d7      	bne.n	8000400 <main+0xa8>
 8000450:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000454:	2b66      	cmp	r3, #102	; 0x66
 8000456:	d1d3      	bne.n	8000400 <main+0xa8>
				GPIOC->ODR |= GPIO_ODR_OD12;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <main+0x11c>)
 800045a:	695b      	ldr	r3, [r3, #20]
 800045c:	4a05      	ldr	r2, [pc, #20]	; (8000474 <main+0x11c>)
 800045e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000462:	6153      	str	r3, [r2, #20]
				W6100_TransmitData(0, destination_adr, off_message, sizeof(off_message));
 8000464:	1d3a      	adds	r2, r7, #4
 8000466:	2314      	movs	r3, #20
 8000468:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800046a:	2000      	movs	r0, #0
 800046c:	f000 fc03 	bl	8000c76 <W6100_TransmitData>
		if (W6100_ReceiveData(0, destination_adr, rx_dat, sizeof(rx_dat))) {		// Check if data arrived
 8000470:	e7c6      	b.n	8000400 <main+0xa8>
 8000472:	bf00      	nop
 8000474:	40020800 	.word	0x40020800
 8000478:	08000fc4 	.word	0x08000fc4
 800047c:	08000fd8 	.word	0x08000fd8

08000480 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <SystemInit+0x28>)
 8000486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800048a:	4a07      	ldr	r2, [pc, #28]	; (80004a8 <SystemInit+0x28>)
 800048c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000494:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <SystemInit+0x28>)
 8000496:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800049a:	609a      	str	r2, [r3, #8]
#endif
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	e000ed00 	.word	0xe000ed00

080004ac <SPI_Eth_SS>:
#include "w6100.h"




void SPI_Eth_SS(uint8_t state) {
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	if (state) {
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d006      	beq.n	80004ca <SPI_Eth_SS+0x1e>
		GPIOA->ODR &= ~GPIO_ODR_OD4;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <SPI_Eth_SS+0x3c>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	4a09      	ldr	r2, [pc, #36]	; (80004e8 <SPI_Eth_SS+0x3c>)
 80004c2:	f023 0310 	bic.w	r3, r3, #16
 80004c6:	6153      	str	r3, [r2, #20]
	}
	else if (!state) {
		GPIOA->ODR |= GPIO_ODR_OD4;
	}
}
 80004c8:	e008      	b.n	80004dc <SPI_Eth_SS+0x30>
	else if (!state) {
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d105      	bne.n	80004dc <SPI_Eth_SS+0x30>
		GPIOA->ODR |= GPIO_ODR_OD4;
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <SPI_Eth_SS+0x3c>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <SPI_Eth_SS+0x3c>)
 80004d6:	f043 0310 	orr.w	r3, r3, #16
 80004da:	6153      	str	r3, [r2, #20]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40020000 	.word	0x40020000

080004ec <SPI_Eth_RT>:

uint8_t SPI_Eth_RT(uint8_t data) {
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	71fb      	strb	r3, [r7, #7]
	while(!(SPI1->SR & SPI_SR_TXE));	// Wait for Tx buffer empty
 80004f6:	bf00      	nop
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <SPI_Eth_RT+0x40>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	f003 0302 	and.w	r3, r3, #2
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0f9      	beq.n	80004f8 <SPI_Eth_RT+0xc>
	SPI1->DR = data;
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <SPI_Eth_RT+0x40>)
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_RXNE));	// Wait for Rx buffer not empty
 800050a:	bf00      	nop
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <SPI_Eth_RT+0x40>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0f9      	beq.n	800050c <SPI_Eth_RT+0x20>
	data = SPI1->DR;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <SPI_Eth_RT+0x40>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	71fb      	strb	r3, [r7, #7]
	return data;
 800051e:	79fb      	ldrb	r3, [r7, #7]
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	40013000 	.word	0x40013000

08000530 <SPI_W6100_WCR>:
	dat = SPI_Eth_RT(0x00);	// Send garbage data to read the Common Register
	SPI_Eth_SS(OFF);		// NSS Slave Disable
	return dat;
}

void SPI_W6100_WCR(uint16_t adr, uint8_t val) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	460a      	mov	r2, r1
 800053a:	80fb      	strh	r3, [r7, #6]
 800053c:	4613      	mov	r3, r2
 800053e:	717b      	strb	r3, [r7, #5]
	/* See Page 76 - W6100 datasheet */
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000540:	2001      	movs	r0, #1
 8000542:	f7ff ffb3 	bl	80004ac <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	b29b      	uxth	r3, r3
 800054c:	b2db      	uxtb	r3, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ffcc 	bl	80004ec <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000554:	88fb      	ldrh	r3, [r7, #6]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ffc7 	bl	80004ec <SPI_Eth_RT>
	SPI_Eth_RT(0x04);		// Send Control Byte	[CR, Write, Variable Length Data Mode]
 800055e:	2004      	movs	r0, #4
 8000560:	f7ff ffc4 	bl	80004ec <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 8000564:	797b      	ldrb	r3, [r7, #5]
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ffc0 	bl	80004ec <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff ff9d 	bl	80004ac <SPI_Eth_SS>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <SPI_W6100_RSOCK>:

uint8_t SPI_W6100_RSOCK(uint16_t adr, uint8_t socket_nbr, uint8_t block) {
 800057a:	b580      	push	{r7, lr}
 800057c:	b084      	sub	sp, #16
 800057e:	af00      	add	r7, sp, #0
 8000580:	4603      	mov	r3, r0
 8000582:	80fb      	strh	r3, [r7, #6]
 8000584:	460b      	mov	r3, r1
 8000586:	717b      	strb	r3, [r7, #5]
 8000588:	4613      	mov	r3, r2
 800058a:	713b      	strb	r3, [r7, #4]
	uint8_t dat;
	uint8_t cb_temp = 0x00;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	015b      	lsls	r3, r3, #5
 8000594:	b25a      	sxtb	r2, r3
 8000596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800059a:	4313      	orrs	r3, r2
 800059c:	b25b      	sxtb	r3, r3
 800059e:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 80005a0:	793b      	ldrb	r3, [r7, #4]
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	b25a      	sxtb	r2, r3
 80005a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 80005b0:	2001      	movs	r0, #1
 80005b2:	f7ff ff7b 	bl	80004ac <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ff94 	bl	80004ec <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ff8f 	bl	80004ec <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ff8b 	bl	80004ec <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);		// Send garbage data to read the Common Register
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff ff88 	bl	80004ec <SPI_Eth_RT>
 80005dc:	4603      	mov	r3, r0
 80005de:	73bb      	strb	r3, [r7, #14]
	SPI_Eth_SS(OFF);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff ff63 	bl	80004ac <SPI_Eth_SS>
	return dat;
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <SPI_W6100_WSOCK>:

void SPI_W6100_WSOCK(uint16_t adr, uint8_t val, uint8_t socket_nbr, uint8_t block) {
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4604      	mov	r4, r0
 80005f8:	4608      	mov	r0, r1
 80005fa:	4611      	mov	r1, r2
 80005fc:	461a      	mov	r2, r3
 80005fe:	4623      	mov	r3, r4
 8000600:	80fb      	strh	r3, [r7, #6]
 8000602:	4603      	mov	r3, r0
 8000604:	717b      	strb	r3, [r7, #5]
 8000606:	460b      	mov	r3, r1
 8000608:	713b      	strb	r3, [r7, #4]
 800060a:	4613      	mov	r3, r2
 800060c:	70fb      	strb	r3, [r7, #3]
	uint8_t cb_temp = 0x04;
 800060e:	2304      	movs	r3, #4
 8000610:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 8000612:	793b      	ldrb	r3, [r7, #4]
 8000614:	015b      	lsls	r3, r3, #5
 8000616:	b25a      	sxtb	r2, r3
 8000618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800061c:	4313      	orrs	r3, r2
 800061e:	b25b      	sxtb	r3, r3
 8000620:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	b25a      	sxtb	r2, r3
 8000628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800062c:	4313      	orrs	r3, r2
 800062e:	b25b      	sxtb	r3, r3
 8000630:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000632:	2001      	movs	r0, #1
 8000634:	f7ff ff3a 	bl	80004ac <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000638:	88fb      	ldrh	r3, [r7, #6]
 800063a:	0a1b      	lsrs	r3, r3, #8
 800063c:	b29b      	uxth	r3, r3
 800063e:	b2db      	uxtb	r3, r3
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff53 	bl	80004ec <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ff4e 	bl	80004ec <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff4a 	bl	80004ec <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 8000658:	797b      	ldrb	r3, [r7, #5]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff46 	bl	80004ec <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 8000660:	2000      	movs	r0, #0
 8000662:	f7ff ff23 	bl	80004ac <SPI_Eth_SS>
}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	bd90      	pop	{r4, r7, pc}

0800066e <W6100_INIT>:

void W6100_INIT(void) {
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
	/* *** W6100 Init *** */
	SPI_W6100_WCR(NETLCKR, 0x3a);	// NETLCKR		Network settings unlock
 8000672:	213a      	movs	r1, #58	; 0x3a
 8000674:	f244 10f5 	movw	r0, #16885	; 0x41f5
 8000678:	f7ff ff5a 	bl	8000530 <SPI_W6100_WCR>

	SPI_W6100_WCR(SHAR0, MAC0);	// SHAR[5:0]	Set hardware MAC address
 800067c:	2111      	movs	r1, #17
 800067e:	f244 1020 	movw	r0, #16672	; 0x4120
 8000682:	f7ff ff55 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR1, MAC1);
 8000686:	2122      	movs	r1, #34	; 0x22
 8000688:	f244 1021 	movw	r0, #16673	; 0x4121
 800068c:	f7ff ff50 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR2, MAC2);
 8000690:	2133      	movs	r1, #51	; 0x33
 8000692:	f244 1022 	movw	r0, #16674	; 0x4122
 8000696:	f7ff ff4b 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR3, MAC3);
 800069a:	21aa      	movs	r1, #170	; 0xaa
 800069c:	f244 1023 	movw	r0, #16675	; 0x4123
 80006a0:	f7ff ff46 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR4, MAC4);
 80006a4:	21bb      	movs	r1, #187	; 0xbb
 80006a6:	f244 1024 	movw	r0, #16676	; 0x4124
 80006aa:	f7ff ff41 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR5, MAC5);
 80006ae:	21cc      	movs	r1, #204	; 0xcc
 80006b0:	f244 1025 	movw	r0, #16677	; 0x4125
 80006b4:	f7ff ff3c 	bl	8000530 <SPI_W6100_WCR>

	SPI_W6100_WCR(GAR0, GIP0);	// GAR[0:3]		Gateway IP address 192.168.0.1
 80006b8:	21c0      	movs	r1, #192	; 0xc0
 80006ba:	f244 1030 	movw	r0, #16688	; 0x4130
 80006be:	f7ff ff37 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR1, GIP1);
 80006c2:	21a8      	movs	r1, #168	; 0xa8
 80006c4:	f244 1031 	movw	r0, #16689	; 0x4131
 80006c8:	f7ff ff32 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR2, GIP2);
 80006cc:	2100      	movs	r1, #0
 80006ce:	f244 1032 	movw	r0, #16690	; 0x4132
 80006d2:	f7ff ff2d 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR3, GIP3);
 80006d6:	2101      	movs	r1, #1
 80006d8:	f244 1033 	movw	r0, #16691	; 0x4133
 80006dc:	f7ff ff28 	bl	8000530 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUBR0, SBM0);	// SUBR[0:3]	Subnet mask address 255:255:255:0
 80006e0:	21ff      	movs	r1, #255	; 0xff
 80006e2:	f244 1034 	movw	r0, #16692	; 0x4134
 80006e6:	f7ff ff23 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR1, SBM1);
 80006ea:	21ff      	movs	r1, #255	; 0xff
 80006ec:	f244 1035 	movw	r0, #16693	; 0x4135
 80006f0:	f7ff ff1e 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR2, SBM2);
 80006f4:	21ff      	movs	r1, #255	; 0xff
 80006f6:	f244 1036 	movw	r0, #16694	; 0x4136
 80006fa:	f7ff ff19 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR3, SBM3);
 80006fe:	2100      	movs	r1, #0
 8000700:	f244 1037 	movw	r0, #16695	; 0x4137
 8000704:	f7ff ff14 	bl	8000530 <SPI_W6100_WCR>

	SPI_W6100_WCR(SIPR0, IPV0);	// SIPR[0:3]	IPv4 Source IP Address 192.168.0.27
 8000708:	21c0      	movs	r1, #192	; 0xc0
 800070a:	f244 1038 	movw	r0, #16696	; 0x4138
 800070e:	f7ff ff0f 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR1, IPV1);
 8000712:	21a8      	movs	r1, #168	; 0xa8
 8000714:	f244 1039 	movw	r0, #16697	; 0x4139
 8000718:	f7ff ff0a 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR2, IPV2);
 800071c:	2100      	movs	r1, #0
 800071e:	f244 103a 	movw	r0, #16698	; 0x413a
 8000722:	f7ff ff05 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR3, IPV3);
 8000726:	211b      	movs	r1, #27
 8000728:	f244 103b 	movw	r0, #16699	; 0x413b
 800072c:	f7ff ff00 	bl	8000530 <SPI_W6100_WCR>

	SPI_W6100_WCR(LLAR0, 0xfe);	// Link Local Address, FE80::1322:33FF:FEAA:BBCC
 8000730:	21fe      	movs	r1, #254	; 0xfe
 8000732:	f244 1040 	movw	r0, #16704	; 0x4140
 8000736:	f7ff fefb 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR1, 0x80);
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	f244 1041 	movw	r0, #16705	; 0x4141
 8000740:	f7ff fef6 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR2, 0x00);
 8000744:	2100      	movs	r1, #0
 8000746:	f244 1042 	movw	r0, #16706	; 0x4142
 800074a:	f7ff fef1 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR3, 0x01);
 800074e:	2101      	movs	r1, #1
 8000750:	f244 1043 	movw	r0, #16707	; 0x4143
 8000754:	f7ff feec 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR4, 0x00);
 8000758:	2100      	movs	r1, #0
 800075a:	f244 1044 	movw	r0, #16708	; 0x4144
 800075e:	f7ff fee7 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR5, 0x00);
 8000762:	2100      	movs	r1, #0
 8000764:	f244 1045 	movw	r0, #16709	; 0x4145
 8000768:	f7ff fee2 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR6, 0x00);
 800076c:	2100      	movs	r1, #0
 800076e:	f244 1046 	movw	r0, #16710	; 0x4146
 8000772:	f7ff fedd 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR7, 0x00);
 8000776:	2100      	movs	r1, #0
 8000778:	f244 1047 	movw	r0, #16711	; 0x4147
 800077c:	f7ff fed8 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR8, 0x13);
 8000780:	2113      	movs	r1, #19
 8000782:	f244 1048 	movw	r0, #16712	; 0x4148
 8000786:	f7ff fed3 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR9, 0x22);
 800078a:	2122      	movs	r1, #34	; 0x22
 800078c:	f244 1049 	movw	r0, #16713	; 0x4149
 8000790:	f7ff fece 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR10, 0x33);
 8000794:	2133      	movs	r1, #51	; 0x33
 8000796:	f244 104a 	movw	r0, #16714	; 0x414a
 800079a:	f7ff fec9 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR11, 0xff);
 800079e:	21ff      	movs	r1, #255	; 0xff
 80007a0:	f244 104b 	movw	r0, #16715	; 0x414b
 80007a4:	f7ff fec4 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR12, 0xfe);
 80007a8:	21fe      	movs	r1, #254	; 0xfe
 80007aa:	f244 104c 	movw	r0, #16716	; 0x414c
 80007ae:	f7ff febf 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR13, 0xaa);
 80007b2:	21aa      	movs	r1, #170	; 0xaa
 80007b4:	f244 104d 	movw	r0, #16717	; 0x414d
 80007b8:	f7ff feba 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR14, 0xbb);
 80007bc:	21bb      	movs	r1, #187	; 0xbb
 80007be:	f244 104e 	movw	r0, #16718	; 0x414e
 80007c2:	f7ff feb5 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR15, 0xcc);
 80007c6:	21cc      	movs	r1, #204	; 0xcc
 80007c8:	f244 104f 	movw	r0, #16719	; 0x414f
 80007cc:	f7ff feb0 	bl	8000530 <SPI_W6100_WCR>

	SPI_W6100_WCR(GUAR0, 0x20);	// Global Unicast Address, 2001:0DB8:E001::1222:33FF:FEAA:BBCC
 80007d0:	2120      	movs	r1, #32
 80007d2:	f244 1050 	movw	r0, #16720	; 0x4150
 80007d6:	f7ff feab 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR1, 0x01);
 80007da:	2101      	movs	r1, #1
 80007dc:	f244 1051 	movw	r0, #16721	; 0x4151
 80007e0:	f7ff fea6 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR2, 0x0d);
 80007e4:	210d      	movs	r1, #13
 80007e6:	f244 1052 	movw	r0, #16722	; 0x4152
 80007ea:	f7ff fea1 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR3, 0xb8);
 80007ee:	21b8      	movs	r1, #184	; 0xb8
 80007f0:	f244 1053 	movw	r0, #16723	; 0x4153
 80007f4:	f7ff fe9c 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR4, 0xe0);
 80007f8:	21e0      	movs	r1, #224	; 0xe0
 80007fa:	f244 1054 	movw	r0, #16724	; 0x4154
 80007fe:	f7ff fe97 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR5, 0x01);
 8000802:	2101      	movs	r1, #1
 8000804:	f244 1055 	movw	r0, #16725	; 0x4155
 8000808:	f7ff fe92 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR6, 0x00);
 800080c:	2100      	movs	r1, #0
 800080e:	f244 1056 	movw	r0, #16726	; 0x4156
 8000812:	f7ff fe8d 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR7, 0x00);
 8000816:	2100      	movs	r1, #0
 8000818:	f244 1057 	movw	r0, #16727	; 0x4157
 800081c:	f7ff fe88 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR8, 0x13);
 8000820:	2113      	movs	r1, #19
 8000822:	f244 1058 	movw	r0, #16728	; 0x4158
 8000826:	f7ff fe83 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR9, 0x22);
 800082a:	2122      	movs	r1, #34	; 0x22
 800082c:	f244 1059 	movw	r0, #16729	; 0x4159
 8000830:	f7ff fe7e 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR10, 0x33);
 8000834:	2133      	movs	r1, #51	; 0x33
 8000836:	f244 105a 	movw	r0, #16730	; 0x415a
 800083a:	f7ff fe79 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR11, 0xff);
 800083e:	21ff      	movs	r1, #255	; 0xff
 8000840:	f244 105b 	movw	r0, #16731	; 0x415b
 8000844:	f7ff fe74 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR12, 0xfe);
 8000848:	21fe      	movs	r1, #254	; 0xfe
 800084a:	f244 105c 	movw	r0, #16732	; 0x415c
 800084e:	f7ff fe6f 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR13, 0xaa);
 8000852:	21aa      	movs	r1, #170	; 0xaa
 8000854:	f244 105d 	movw	r0, #16733	; 0x415d
 8000858:	f7ff fe6a 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR14, 0xbb);
 800085c:	21bb      	movs	r1, #187	; 0xbb
 800085e:	f244 105e 	movw	r0, #16734	; 0x415e
 8000862:	f7ff fe65 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR15, 0xcc);
 8000866:	21cc      	movs	r1, #204	; 0xcc
 8000868:	f244 105f 	movw	r0, #16735	; 0x415f
 800086c:	f7ff fe60 	bl	8000530 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUB6R0, 0xff);	// IPv6 Subnet Prefix, FFFF:FFFF::
 8000870:	21ff      	movs	r1, #255	; 0xff
 8000872:	f244 1060 	movw	r0, #16736	; 0x4160
 8000876:	f7ff fe5b 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R1, 0xff);
 800087a:	21ff      	movs	r1, #255	; 0xff
 800087c:	f244 1061 	movw	r0, #16737	; 0x4161
 8000880:	f7ff fe56 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R2, 0xff);
 8000884:	21ff      	movs	r1, #255	; 0xff
 8000886:	f244 1062 	movw	r0, #16738	; 0x4162
 800088a:	f7ff fe51 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R3, 0xff);
 800088e:	21ff      	movs	r1, #255	; 0xff
 8000890:	f244 1063 	movw	r0, #16739	; 0x4163
 8000894:	f7ff fe4c 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R4, 0xff);
 8000898:	21ff      	movs	r1, #255	; 0xff
 800089a:	f244 1064 	movw	r0, #16740	; 0x4164
 800089e:	f7ff fe47 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R5, 0xff);
 80008a2:	21ff      	movs	r1, #255	; 0xff
 80008a4:	f244 1065 	movw	r0, #16741	; 0x4165
 80008a8:	f7ff fe42 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R6, 0xff);
 80008ac:	21ff      	movs	r1, #255	; 0xff
 80008ae:	f244 1066 	movw	r0, #16742	; 0x4166
 80008b2:	f7ff fe3d 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R7, 0xff);
 80008b6:	21ff      	movs	r1, #255	; 0xff
 80008b8:	f244 1067 	movw	r0, #16743	; 0x4167
 80008bc:	f7ff fe38 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R8, 0x00);
 80008c0:	2100      	movs	r1, #0
 80008c2:	f244 1068 	movw	r0, #16744	; 0x4168
 80008c6:	f7ff fe33 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R9, 0x00);
 80008ca:	2100      	movs	r1, #0
 80008cc:	f244 1069 	movw	r0, #16745	; 0x4169
 80008d0:	f7ff fe2e 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R10, 0x00);
 80008d4:	2100      	movs	r1, #0
 80008d6:	f244 106a 	movw	r0, #16746	; 0x416a
 80008da:	f7ff fe29 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R11, 0x00);
 80008de:	2100      	movs	r1, #0
 80008e0:	f244 106b 	movw	r0, #16747	; 0x416b
 80008e4:	f7ff fe24 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R12, 0x00);
 80008e8:	2100      	movs	r1, #0
 80008ea:	f244 106c 	movw	r0, #16748	; 0x416c
 80008ee:	f7ff fe1f 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R13, 0x00);
 80008f2:	2100      	movs	r1, #0
 80008f4:	f244 106d 	movw	r0, #16749	; 0x416d
 80008f8:	f7ff fe1a 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R14, 0x00);
 80008fc:	2100      	movs	r1, #0
 80008fe:	f244 106e 	movw	r0, #16750	; 0x416e
 8000902:	f7ff fe15 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R15, 0x00);
 8000906:	2100      	movs	r1, #0
 8000908:	f244 106f 	movw	r0, #16751	; 0x416f
 800090c:	f7ff fe10 	bl	8000530 <SPI_W6100_WCR>

	SPI_W6100_WCR(GA6R0, 0xfe);	// IPv6 Gateway Address, FFFF:FFFF::
 8000910:	21fe      	movs	r1, #254	; 0xfe
 8000912:	f244 1070 	movw	r0, #16752	; 0x4170
 8000916:	f7ff fe0b 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R1, 0x80);
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	f244 1071 	movw	r0, #16753	; 0x4171
 8000920:	f7ff fe06 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R2, 0x00);
 8000924:	2100      	movs	r1, #0
 8000926:	f244 1072 	movw	r0, #16754	; 0x4172
 800092a:	f7ff fe01 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R3, 0x00);
 800092e:	2100      	movs	r1, #0
 8000930:	f244 1073 	movw	r0, #16755	; 0x4173
 8000934:	f7ff fdfc 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R4, 0x00);
 8000938:	2100      	movs	r1, #0
 800093a:	f244 1074 	movw	r0, #16756	; 0x4174
 800093e:	f7ff fdf7 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R5, 0x00);
 8000942:	2100      	movs	r1, #0
 8000944:	f244 1075 	movw	r0, #16757	; 0x4175
 8000948:	f7ff fdf2 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R6, 0x00);
 800094c:	2100      	movs	r1, #0
 800094e:	f244 1076 	movw	r0, #16758	; 0x4176
 8000952:	f7ff fded 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R7, 0x00);
 8000956:	2100      	movs	r1, #0
 8000958:	f244 1077 	movw	r0, #16759	; 0x4177
 800095c:	f7ff fde8 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R8, 0x13);
 8000960:	2113      	movs	r1, #19
 8000962:	f244 1078 	movw	r0, #16760	; 0x4178
 8000966:	f7ff fde3 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R9, 0x22);
 800096a:	2122      	movs	r1, #34	; 0x22
 800096c:	f244 1079 	movw	r0, #16761	; 0x4179
 8000970:	f7ff fdde 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R10, 0x33);
 8000974:	2133      	movs	r1, #51	; 0x33
 8000976:	f244 107a 	movw	r0, #16762	; 0x417a
 800097a:	f7ff fdd9 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R11, 0xff);
 800097e:	21ff      	movs	r1, #255	; 0xff
 8000980:	f244 107b 	movw	r0, #16763	; 0x417b
 8000984:	f7ff fdd4 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R12, 0xfe);
 8000988:	21fe      	movs	r1, #254	; 0xfe
 800098a:	f244 107c 	movw	r0, #16764	; 0x417c
 800098e:	f7ff fdcf 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R13, 0x44);
 8000992:	2144      	movs	r1, #68	; 0x44
 8000994:	f244 107d 	movw	r0, #16765	; 0x417d
 8000998:	f7ff fdca 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R14, 0x55);
 800099c:	2155      	movs	r1, #85	; 0x55
 800099e:	f244 107e 	movw	r0, #16766	; 0x417e
 80009a2:	f7ff fdc5 	bl	8000530 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R15, 0x66);
 80009a6:	2166      	movs	r1, #102	; 0x66
 80009a8:	f244 107f 	movw	r0, #16767	; 0x417f
 80009ac:	f7ff fdc0 	bl	8000530 <SPI_W6100_WCR>

	SPI_W6100_WCR(NETLCKR, 0x00);	// NETLCKR		Network settings lock
 80009b0:	2100      	movs	r1, #0
 80009b2:	f244 10f5 	movw	r0, #16885	; 0x41f5
 80009b6:	f7ff fdbb 	bl	8000530 <SPI_W6100_WCR>
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <W6100_OpenTCPSocket>:




uint32_t W6100_OpenTCPSocket (uint8_t sck_nbr) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	uint32_t dest_adr;
	/* *** Open Socket as TCP4 *** */
	SPI_W6100_WSOCK(Sn_MR, 0x01, sck_nbr, REG);				// Set TCP4 mode
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	2301      	movs	r3, #1
 80009ce:	2101      	movs	r1, #1
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff fe0d 	bl	80005f0 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR0, 0x13, sck_nbr, REG);			// Set PORT 5000
 80009d6:	79fa      	ldrb	r2, [r7, #7]
 80009d8:	2301      	movs	r3, #1
 80009da:	2113      	movs	r1, #19
 80009dc:	f44f 708a 	mov.w	r0, #276	; 0x114
 80009e0:	f7ff fe06 	bl	80005f0 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR1, 0x88, sck_nbr, REG);
 80009e4:	79fa      	ldrb	r2, [r7, #7]
 80009e6:	2301      	movs	r3, #1
 80009e8:	2188      	movs	r1, #136	; 0x88
 80009ea:	f240 1015 	movw	r0, #277	; 0x115
 80009ee:	f7ff fdff 	bl	80005f0 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_CR, 0x01, sck_nbr, REG);				// Set OPEN command
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	2301      	movs	r3, #1
 80009f6:	2101      	movs	r1, #1
 80009f8:	2010      	movs	r0, #16
 80009fa:	f7ff fdf9 	bl	80005f0 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until OPEN command is cleared
 80009fe:	bf00      	nop
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	2010      	movs	r0, #16
 8000a08:	f7ff fdb7 	bl	800057a <SPI_W6100_RSOCK>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1f6      	bne.n	8000a00 <W6100_OpenTCPSocket+0x40>


	SPI_W6100_WSOCK(Sn_CR, 0x02, sck_nbr, REG);				// Set LISTEN command
 8000a12:	79fa      	ldrb	r2, [r7, #7]
 8000a14:	2301      	movs	r3, #1
 8000a16:	2102      	movs	r1, #2
 8000a18:	2010      	movs	r0, #16
 8000a1a:	f7ff fde9 	bl	80005f0 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until LISTEN command is cleared
 8000a1e:	bf00      	nop
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2201      	movs	r2, #1
 8000a24:	4619      	mov	r1, r3
 8000a26:	2010      	movs	r0, #16
 8000a28:	f7ff fda7 	bl	800057a <SPI_W6100_RSOCK>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d1f6      	bne.n	8000a20 <W6100_OpenTCPSocket+0x60>

	// CONNECT NOW
	while ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x17);	// Wait until SOCKET ESTABLISHED
 8000a32:	bf00      	nop
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2201      	movs	r2, #1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	2030      	movs	r0, #48	; 0x30
 8000a3c:	f7ff fd9d 	bl	800057a <SPI_W6100_RSOCK>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b17      	cmp	r3, #23
 8000a44:	d1f6      	bne.n	8000a34 <W6100_OpenTCPSocket+0x74>

	/* HARDWARE RESPONSE ON THE SOCKET OPEN */
	GPIOC->ODR &= ~GPIO_ODR_OD8;
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <W6100_OpenTCPSocket+0x114>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	4a22      	ldr	r2, [pc, #136]	; (8000ad4 <W6100_OpenTCPSocket+0x114>)
 8000a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a50:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= GPIO_ODR_OD9;
 8000a52:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <W6100_OpenTCPSocket+0x114>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a1f      	ldr	r2, [pc, #124]	; (8000ad4 <W6100_OpenTCPSocket+0x114>)
 8000a58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5c:	6153      	str	r3, [r2, #20]
	/* END OF HARDWARE RESPONSE */							// Socket established

	SPI_W6100_WSOCK(Sn_IRCLR, 0x01, sck_nbr, REG);			// Interrupt clear
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	2301      	movs	r3, #1
 8000a62:	2101      	movs	r1, #1
 8000a64:	2028      	movs	r0, #40	; 0x28
 8000a66:	f7ff fdc3 	bl	80005f0 <SPI_W6100_WSOCK>

	// Read destination address
	dest_adr = (SPI_W6100_RSOCK(Sn_DIPR0, sck_nbr, REG) << 24);
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000a74:	f7ff fd81 	bl	800057a <SPI_W6100_RSOCK>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	061b      	lsls	r3, r3, #24
 8000a7c:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR1, sck_nbr, REG) << 16);
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2201      	movs	r2, #1
 8000a82:	4619      	mov	r1, r3
 8000a84:	f240 1021 	movw	r0, #289	; 0x121
 8000a88:	f7ff fd77 	bl	800057a <SPI_W6100_RSOCK>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	041b      	lsls	r3, r3, #16
 8000a90:	461a      	mov	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR2, sck_nbr, REG) << 8);
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 7091 	mov.w	r0, #290	; 0x122
 8000aa2:	f7ff fd6a 	bl	800057a <SPI_W6100_RSOCK>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
	dest_adr |= SPI_W6100_RSOCK(Sn_DIPR3, sck_nbr, REG);
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f240 1023 	movw	r0, #291	; 0x123
 8000abc:	f7ff fd5d 	bl	800057a <SPI_W6100_RSOCK>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]

	return dest_adr;	// Return destination address
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40020800 	.word	0x40020800

08000ad8 <W6100_ReceiveData>:




uint8_t W6100_ReceiveData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab, uint8_t size) {
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b08b      	sub	sp, #44	; 0x2c
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	uint32_t get_size, gSn_RX_MAX, get_start_address, Sn_RX_RD_temp;

	if ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) == 0x1c) {								// Check if socket close request pending
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	2201      	movs	r2, #1
 8000af0:	4619      	mov	r1, r3
 8000af2:	2030      	movs	r0, #48	; 0x30
 8000af4:	f7ff fd41 	bl	800057a <SPI_W6100_RSOCK>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b1c      	cmp	r3, #28
 8000afc:	d103      	bne.n	8000b06 <W6100_ReceiveData+0x2e>
		W6100_PassiveCloseSocket(sck_nbr);
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f997 	bl	8000e34 <W6100_PassiveCloseSocket>
	}

	if ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0b00000100) == 0x04) {					// Check if data received
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	2020      	movs	r0, #32
 8000b0e:	f7ff fd34 	bl	800057a <SPI_W6100_RSOCK>
 8000b12:	4603      	mov	r3, r0
 8000b14:	f003 0304 	and.w	r3, r3, #4
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	f040 80a7 	bne.w	8000c6c <W6100_ReceiveData+0x194>

			// Clear data interrupt
			SPI_W6100_WSOCK(Sn_IRCLR, 0x04, sck_nbr, REG);
 8000b1e:	7bfa      	ldrb	r2, [r7, #15]
 8000b20:	2301      	movs	r3, #1
 8000b22:	2104      	movs	r1, #4
 8000b24:	2028      	movs	r0, #40	; 0x28
 8000b26:	f7ff fd63 	bl	80005f0 <SPI_W6100_WSOCK>

			// Read data from the buffer
			get_size = (SPI_W6100_RSOCK(Sn_RX_RSR0, sck_nbr, REG) << 8);
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f44f 7009 	mov.w	r0, #548	; 0x224
 8000b34:	f7ff fd21 	bl	800057a <SPI_W6100_RSOCK>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	021b      	lsls	r3, r3, #8
 8000b3c:	623b      	str	r3, [r7, #32]
			get_size |= SPI_W6100_RSOCK(Sn_RX_RSR1, sck_nbr, REG);
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	2201      	movs	r2, #1
 8000b42:	4619      	mov	r1, r3
 8000b44:	f240 2025 	movw	r0, #549	; 0x225
 8000b48:	f7ff fd17 	bl	800057a <SPI_W6100_RSOCK>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	6a3b      	ldr	r3, [r7, #32]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	623b      	str	r3, [r7, #32]
			gSn_RX_MAX = (SPI_W6100_RSOCK(Sn_RX_BSR, sck_nbr, REG) * 1024);
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f44f 7008 	mov.w	r0, #544	; 0x220
 8000b60:	f7ff fd0b 	bl	800057a <SPI_W6100_RSOCK>
 8000b64:	4603      	mov	r3, r0
 8000b66:	029b      	lsls	r3, r3, #10
 8000b68:	61fb      	str	r3, [r7, #28]
			get_start_address = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f44f 700a 	mov.w	r0, #552	; 0x228
 8000b74:	f7ff fd01 	bl	800057a <SPI_W6100_RSOCK>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	617b      	str	r3, [r7, #20]
			get_start_address |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	2201      	movs	r2, #1
 8000b82:	4619      	mov	r1, r3
 8000b84:	f240 2029 	movw	r0, #553	; 0x229
 8000b88:	f7ff fcf7 	bl	800057a <SPI_W6100_RSOCK>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	617b      	str	r3, [r7, #20]

			// Move data to the array
			memset(tab, '\0', size);
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f000 f9fc 	bl	8000f9a <memset>
			for (i=0; i<get_size; i++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ba8:	e016      	b.n	8000bd8 <W6100_ReceiveData+0x100>
				tab[i] = SPI_W6100_RSOCK((get_start_address+i), sck_nbr, RX_BUF);
 8000baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4413      	add	r3, r2
 8000bb6:	b298      	uxth	r0, r3
 8000bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	18d4      	adds	r4, r2, r3
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f7ff fcd8 	bl	800057a <SPI_W6100_RSOCK>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	7023      	strb	r3, [r4, #0]
			for (i=0; i<get_size; i++) {
 8000bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bdc:	6a3a      	ldr	r2, [r7, #32]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d8e3      	bhi.n	8000baa <W6100_ReceiveData+0xd2>
			}

			memcpy(&get_start_address, &dest_adr, get_size);
 8000be2:	f107 0108 	add.w	r1, r7, #8
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	6a3a      	ldr	r2, [r7, #32]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f9c9 	bl	8000f84 <memcpy>

			Sn_RX_RD_temp = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f44f 700a 	mov.w	r0, #552	; 0x228
 8000bfc:	f7ff fcbd 	bl	800057a <SPI_W6100_RSOCK>
 8000c00:	4603      	mov	r3, r0
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f240 2029 	movw	r0, #553	; 0x229
 8000c10:	f7ff fcb3 	bl	800057a <SPI_W6100_RSOCK>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp += get_size;
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	6a3b      	ldr	r3, [r7, #32]
 8000c22:	4413      	add	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
			SPI_W6100_WSOCK(Sn_RX_RD0, (Sn_RX_RD_temp>>8), sck_nbr, REG);
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	b2d9      	uxtb	r1, r3
 8000c2c:	7bfa      	ldrb	r2, [r7, #15]
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f44f 700a 	mov.w	r0, #552	; 0x228
 8000c34:	f7ff fcdc 	bl	80005f0 <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_RX_RD1, (Sn_RX_RD_temp), sck_nbr, REG);
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	b2d9      	uxtb	r1, r3
 8000c3c:	7bfa      	ldrb	r2, [r7, #15]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f240 2029 	movw	r0, #553	; 0x229
 8000c44:	f7ff fcd4 	bl	80005f0 <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_CR, 0x40, sck_nbr, REG);
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2140      	movs	r1, #64	; 0x40
 8000c4e:	2010      	movs	r0, #16
 8000c50:	f7ff fcce 	bl	80005f0 <SPI_W6100_WSOCK>
			while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);
 8000c54:	bf00      	nop
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	2010      	movs	r0, #16
 8000c5e:	f7ff fc8c 	bl	800057a <SPI_W6100_RSOCK>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f6      	bne.n	8000c56 <W6100_ReceiveData+0x17e>

			return 1;	// Return 1 if data was received
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <W6100_ReceiveData+0x196>
	}
	else 	return 0;	// Return 0 of no data was received
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	372c      	adds	r7, #44	; 0x2c
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd90      	pop	{r4, r7, pc}

08000c76 <W6100_TransmitData>:

void W6100_TransmitData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab, uint8_t size) {
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b08a      	sub	sp, #40	; 0x28
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]
 8000c86:	4613      	mov	r3, r2
 8000c88:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	uint8_t send_size = size;
 8000c8a:	7bbb      	ldrb	r3, [r7, #14]
 8000c8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t gSn_TX_MAX, get_start_address, Sn_TX_WR_temp, Sn_TX_FSR_temp;

	gSn_TX_MAX = (SPI_W6100_RSOCK(Sn_TX_BSR, sck_nbr, REG) * 1024);						// Socket TX buffer size
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	2201      	movs	r2, #1
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c9a:	f7ff fc6e 	bl	800057a <SPI_W6100_RSOCK>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	029b      	lsls	r3, r3, #10
 8000ca2:	61fb      	str	r3, [r7, #28]

	if(send_size > gSn_TX_MAX) send_size = gSn_TX_MAX;
 8000ca4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ca8:	69fa      	ldr	r2, [r7, #28]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d219      	bcs.n	8000ce2 <W6100_TransmitData+0x6c>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	while(send_size > Sn_TX_FSR_temp) {													// wait until Socket Tx buffer is free
 8000cb4:	e015      	b.n	8000ce2 <W6100_TransmitData+0x6c>
		Sn_TX_FSR_temp = (SPI_W6100_RSOCK(Sn_TX_FSR0, sck_nbr, REG) << 8);
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f44f 7001 	mov.w	r0, #516	; 0x204
 8000cc0:	f7ff fc5b 	bl	800057a <SPI_W6100_RSOCK>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	623b      	str	r3, [r7, #32]
		Sn_TX_FSR_temp |= SPI_W6100_RSOCK(Sn_TX_FSR1, sck_nbr, REG);
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f240 2005 	movw	r0, #517	; 0x205
 8000cd4:	f7ff fc51 	bl	800057a <SPI_W6100_RSOCK>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	623b      	str	r3, [r7, #32]
	while(send_size > Sn_TX_FSR_temp) {													// wait until Socket Tx buffer is free
 8000ce2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ce6:	6a3a      	ldr	r2, [r7, #32]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d3e4      	bcc.n	8000cb6 <W6100_TransmitData+0x40>
	}

	get_start_address = (SPI_W6100_RSOCK(Sn_TX_WR0, sck_nbr, REG) << 8);
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8000cf6:	f7ff fc40 	bl	800057a <SPI_W6100_RSOCK>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	021b      	lsls	r3, r3, #8
 8000cfe:	617b      	str	r3, [r7, #20]
	get_start_address |= SPI_W6100_RSOCK(Sn_TX_WR1, sck_nbr, REG);
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2201      	movs	r2, #1
 8000d04:	4619      	mov	r1, r3
 8000d06:	f240 200d 	movw	r0, #525	; 0x20d
 8000d0a:	f7ff fc36 	bl	800057a <SPI_W6100_RSOCK>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461a      	mov	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]


	Sn_TX_WR_temp = (SPI_W6100_RSOCK(Sn_TX_WR0, sck_nbr, REG) << 8);
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8000d22:	f7ff fc2a 	bl	800057a <SPI_W6100_RSOCK>
 8000d26:	4603      	mov	r3, r0
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	61bb      	str	r3, [r7, #24]
	Sn_TX_WR_temp |= SPI_W6100_RSOCK(Sn_TX_WR1, sck_nbr, REG);
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4619      	mov	r1, r3
 8000d32:	f240 200d 	movw	r0, #525	; 0x20d
 8000d36:	f7ff fc20 	bl	800057a <SPI_W6100_RSOCK>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
	Sn_TX_WR_temp += size;
 8000d44:	7bbb      	ldrb	r3, [r7, #14]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4413      	add	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
	SPI_W6100_WSOCK(Sn_TX_WR0, (Sn_TX_WR_temp>>8), sck_nbr, REG);
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	0a1b      	lsrs	r3, r3, #8
 8000d50:	b2d9      	uxtb	r1, r3
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	2301      	movs	r3, #1
 8000d56:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8000d5a:	f7ff fc49 	bl	80005f0 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_TX_WR1, (Sn_TX_WR_temp), sck_nbr, REG);
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	b2d9      	uxtb	r1, r3
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	2301      	movs	r3, #1
 8000d66:	f240 200d 	movw	r0, #525	; 0x20d
 8000d6a:	f7ff fc41 	bl	80005f0 <SPI_W6100_WSOCK>

	// Move data to the array
	for (i=0; i<size; i++) {
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d74:	e014      	b.n	8000da0 <W6100_TransmitData+0x12a>
		SPI_W6100_WSOCK((get_start_address+i), tab[i], sck_nbr, TX_BUF);
 8000d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	b298      	uxth	r0, r3
 8000d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	7819      	ldrb	r1, [r3, #0]
 8000d8e:	7bfa      	ldrb	r2, [r7, #15]
 8000d90:	2302      	movs	r3, #2
 8000d92:	f7ff fc2d 	bl	80005f0 <SPI_W6100_WSOCK>
	for (i=0; i<size; i++) {
 8000d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000da0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000da4:	7bbb      	ldrb	r3, [r7, #14]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d3e5      	bcc.n	8000d76 <W6100_TransmitData+0x100>
	}

	memcpy(&get_start_address, &dest_adr, send_size);
 8000daa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000dae:	f107 0108 	add.w	r1, r7, #8
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f8e4 	bl	8000f84 <memcpy>

	SPI_W6100_WSOCK(Sn_CR, 0x20, sck_nbr, REG);											// SEND command sent to TCP/TCP6 mode
 8000dbc:	7bfa      	ldrb	r2, [r7, #15]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	2120      	movs	r1, #32
 8000dc2:	2010      	movs	r0, #16
 8000dc4:	f7ff fc14 	bl	80005f0 <SPI_W6100_WSOCK>
	while(SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG) != 0x00);								// Wait for SEND command clear
 8000dc8:	bf00      	nop
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4619      	mov	r1, r3
 8000dd0:	2010      	movs	r0, #16
 8000dd2:	f7ff fbd2 	bl	800057a <SPI_W6100_RSOCK>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f6      	bne.n	8000dca <W6100_TransmitData+0x154>

	while(((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x10) == 0) && ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x08) == 0));
 8000ddc:	bf00      	nop
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	2201      	movs	r2, #1
 8000de2:	4619      	mov	r1, r3
 8000de4:	2020      	movs	r0, #32
 8000de6:	f7ff fbc8 	bl	800057a <SPI_W6100_RSOCK>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d10a      	bne.n	8000e0a <W6100_TransmitData+0x194>
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
 8000df6:	2201      	movs	r2, #1
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2020      	movs	r0, #32
 8000dfc:	f7ff fbbd 	bl	800057a <SPI_W6100_RSOCK>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0e9      	beq.n	8000dde <W6100_TransmitData+0x168>

	if((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x10) == 0x10) SPI_W6100_WSOCK(Sn_IRCLR, 0x10, sck_nbr, REG);	// Clear SENDOK interrupt
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4619      	mov	r1, r3
 8000e10:	2020      	movs	r0, #32
 8000e12:	f7ff fbb2 	bl	800057a <SPI_W6100_RSOCK>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	2b10      	cmp	r3, #16
 8000e1e:	d105      	bne.n	8000e2c <W6100_TransmitData+0x1b6>
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	2301      	movs	r3, #1
 8000e24:	2110      	movs	r1, #16
 8000e26:	2028      	movs	r0, #40	; 0x28
 8000e28:	f7ff fbe2 	bl	80005f0 <SPI_W6100_WSOCK>

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <W6100_PassiveCloseSocket>:



void W6100_PassiveCloseSocket(uint8_t sck_nbr) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	SPI_W6100_WSOCK(Sn_CR, 0x08, sck_nbr, REG);						// Send FIN packet (DISCON command)
 8000e3e:	79fa      	ldrb	r2, [r7, #7]
 8000e40:	2301      	movs	r3, #1
 8000e42:	2108      	movs	r1, #8
 8000e44:	2010      	movs	r0, #16
 8000e46:	f7ff fbd3 	bl	80005f0 <SPI_W6100_WSOCK>
	while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);			// Wait for DISCON command clear
 8000e4a:	bf00      	nop
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4619      	mov	r1, r3
 8000e52:	2010      	movs	r0, #16
 8000e54:	f7ff fb91 	bl	800057a <SPI_W6100_RSOCK>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f6      	bne.n	8000e4c <W6100_PassiveCloseSocket+0x18>
	// Wait for ACK packet
	while((((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b10) == 0) && (((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b1000) == 0));
 8000e5e:	bf00      	nop
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2201      	movs	r2, #1
 8000e64:	4619      	mov	r1, r3
 8000e66:	2020      	movs	r0, #32
 8000e68:	f7ff fb87 	bl	800057a <SPI_W6100_RSOCK>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10a      	bne.n	8000e8c <W6100_PassiveCloseSocket+0x58>
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	2020      	movs	r0, #32
 8000e7e:	f7ff fb7c 	bl	800057a <SPI_W6100_RSOCK>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0e9      	beq.n	8000e60 <W6100_PassiveCloseSocket+0x2c>

	if ((((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b10) == 0b10)) {
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4619      	mov	r1, r3
 8000e92:	2020      	movs	r0, #32
 8000e94:	f7ff fb71 	bl	800057a <SPI_W6100_RSOCK>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d10f      	bne.n	8000ec2 <W6100_PassiveCloseSocket+0x8e>
		SPI_W6100_WSOCK(Sn_IRCLR, 0x02, sck_nbr, REG);				// Clear DISCON interrupt
 8000ea2:	79fa      	ldrb	r2, [r7, #7]
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	2028      	movs	r0, #40	; 0x28
 8000eaa:	f7ff fba1 	bl	80005f0 <SPI_W6100_WSOCK>
		while((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x00);		// Wait until socket is CLOSED
 8000eae:	bf00      	nop
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	2030      	movs	r0, #48	; 0x30
 8000eb8:	f7ff fb5f 	bl	800057a <SPI_W6100_RSOCK>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f6      	bne.n	8000eb0 <W6100_PassiveCloseSocket+0x7c>
	}
	/* HARDWARE RESPONSE ON THE SOCKET CLOSE */
	GPIOC->ODR |= GPIO_ODR_OD8;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <W6100_PassiveCloseSocket+0xb0>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <W6100_PassiveCloseSocket+0xb0>)
 8000ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ecc:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~GPIO_ODR_OD9;
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <W6100_PassiveCloseSocket+0xb0>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <W6100_PassiveCloseSocket+0xb0>)
 8000ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ed8:	6153      	str	r3, [r2, #20]
	/* END OF HARDWARE ESPONSE */
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000eec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eee:	e003      	b.n	8000ef8 <LoopCopyDataInit>

08000ef0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ef2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ef4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ef6:	3104      	adds	r1, #4

08000ef8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ef8:	480b      	ldr	r0, [pc, #44]	; (8000f28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000efc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000efe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f00:	d3f6      	bcc.n	8000ef0 <CopyDataInit>
  ldr  r2, =_sbss
 8000f02:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f04:	e002      	b.n	8000f0c <LoopFillZerobss>

08000f06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f08:	f842 3b04 	str.w	r3, [r2], #4

08000f0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f10:	d3f9      	bcc.n	8000f06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f12:	f7ff fab5 	bl	8000480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f000 f811 	bl	8000f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fa1d 	bl	8000358 <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f24:	08000ff4 	.word	0x08000ff4
  ldr  r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f2c:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000f30:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000f34:	2000001c 	.word	0x2000001c

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>
	...

08000f3c <__libc_init_array>:
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	4e0d      	ldr	r6, [pc, #52]	; (8000f74 <__libc_init_array+0x38>)
 8000f40:	4c0d      	ldr	r4, [pc, #52]	; (8000f78 <__libc_init_array+0x3c>)
 8000f42:	1ba4      	subs	r4, r4, r6
 8000f44:	10a4      	asrs	r4, r4, #2
 8000f46:	2500      	movs	r5, #0
 8000f48:	42a5      	cmp	r5, r4
 8000f4a:	d109      	bne.n	8000f60 <__libc_init_array+0x24>
 8000f4c:	4e0b      	ldr	r6, [pc, #44]	; (8000f7c <__libc_init_array+0x40>)
 8000f4e:	4c0c      	ldr	r4, [pc, #48]	; (8000f80 <__libc_init_array+0x44>)
 8000f50:	f000 f82c 	bl	8000fac <_init>
 8000f54:	1ba4      	subs	r4, r4, r6
 8000f56:	10a4      	asrs	r4, r4, #2
 8000f58:	2500      	movs	r5, #0
 8000f5a:	42a5      	cmp	r5, r4
 8000f5c:	d105      	bne.n	8000f6a <__libc_init_array+0x2e>
 8000f5e:	bd70      	pop	{r4, r5, r6, pc}
 8000f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f64:	4798      	blx	r3
 8000f66:	3501      	adds	r5, #1
 8000f68:	e7ee      	b.n	8000f48 <__libc_init_array+0xc>
 8000f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f6e:	4798      	blx	r3
 8000f70:	3501      	adds	r5, #1
 8000f72:	e7f2      	b.n	8000f5a <__libc_init_array+0x1e>
 8000f74:	08000fec 	.word	0x08000fec
 8000f78:	08000fec 	.word	0x08000fec
 8000f7c:	08000fec 	.word	0x08000fec
 8000f80:	08000ff0 	.word	0x08000ff0

08000f84 <memcpy>:
 8000f84:	b510      	push	{r4, lr}
 8000f86:	1e43      	subs	r3, r0, #1
 8000f88:	440a      	add	r2, r1
 8000f8a:	4291      	cmp	r1, r2
 8000f8c:	d100      	bne.n	8000f90 <memcpy+0xc>
 8000f8e:	bd10      	pop	{r4, pc}
 8000f90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f98:	e7f7      	b.n	8000f8a <memcpy+0x6>

08000f9a <memset>:
 8000f9a:	4402      	add	r2, r0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d100      	bne.n	8000fa4 <memset+0xa>
 8000fa2:	4770      	bx	lr
 8000fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8000fa8:	e7f9      	b.n	8000f9e <memset+0x4>
	...

08000fac <_init>:
 8000fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fae:	bf00      	nop
 8000fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fb2:	bc08      	pop	{r3}
 8000fb4:	469e      	mov	lr, r3
 8000fb6:	4770      	bx	lr

08000fb8 <_fini>:
 8000fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fba:	bf00      	nop
 8000fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fbe:	bc08      	pop	{r3}
 8000fc0:	469e      	mov	lr, r3
 8000fc2:	4770      	bx	lr
