
Hyperlink_MB_W6100_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ba8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff4  08002ff4  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08002ff4  08002ff4  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ff4  08002ff4  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08002ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  200001d0  080031cc  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  080031cc  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e2a  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000efc  00000000  00000000  0002602a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000230  00000000  00000000  00026f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b8  00000000  00000000  00027158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001936b  00000000  00000000  00027310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000310c  00000000  00000000  0004067b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084423  00000000  00000000  00043787  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7baa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d34  00000000  00000000  000c7c28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002d20 	.word	0x08002d20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	08002d20 	.word	0x08002d20

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	; (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <CanInit>:
 */

#include "can.h"


void CanInit(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0

	// *** Pin configuration and remap assignment *** //
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;		// Enable CAN 1 CLK
 80002d0:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <CanInit+0x7c>)
 80002d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d4:	4a1c      	ldr	r2, [pc, #112]	; (8000348 <CanInit+0x7c>)
 80002d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002da:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOB->MODER |= GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1;	// PB8 and PB9 Alternative Function
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <CanInit+0x80>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1a      	ldr	r2, [pc, #104]	; (800034c <CanInit+0x80>)
 80002e2:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80002e6:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_3 | GPIO_AFRH_AFRH0_0 | GPIO_AFRH_AFRH1_0 | GPIO_AFRH_AFRH1_3;		// Alternative function mapped to CAN1_Tx and CAN1_Rx
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <CanInit+0x80>)
 80002ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ec:	4a17      	ldr	r2, [pc, #92]	; (800034c <CanInit+0x80>)
 80002ee:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 80002f2:	6253      	str	r3, [r2, #36]	; 0x24

	CAN1->MCR |= CAN_MCR_INRQ;			// Initialisation mode on
 80002f4:	4b16      	ldr	r3, [pc, #88]	; (8000350 <CanInit+0x84>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a15      	ldr	r2, [pc, #84]	; (8000350 <CanInit+0x84>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6013      	str	r3, [r2, #0]

	// *** CAN Test Mode *** //
//	CAN1->BTR |= CAN_BTR_LBKM;			// Loopback mode enabled (For Debug purposes)
	// ********************* //

	NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000300:	2013      	movs	r0, #19
 8000302:	f7ff ffc5 	bl	8000290 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000306:	2014      	movs	r0, #20
 8000308:	f7ff ffc2 	bl	8000290 <__NVIC_EnableIRQ>

	CAN1->IER |= CAN_IER_FMPIE0;		// Interrupt generated when state of FMP[1:0] bits are not 00b
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <CanInit+0x84>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a0f      	ldr	r2, [pc, #60]	; (8000350 <CanInit+0x84>)
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	6153      	str	r3, [r2, #20]

	CAN1->BTR = 0x00080004;				// CAN Bitrate: 500k
 8000318:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <CanInit+0x84>)
 800031a:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <CanInit+0x88>)
 800031c:	61da      	str	r2, [r3, #28]


	CAN1->MCR &= ~CAN_MCR_INRQ;			// Initialisation mode off
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <CanInit+0x84>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <CanInit+0x84>)
 8000324:	f023 0301 	bic.w	r3, r3, #1
 8000328:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MCR_INRQ);
 800032a:	bf00      	nop
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <CanInit+0x84>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1f9      	bne.n	800032c <CanInit+0x60>


	CAN1->MCR &= ~CAN_MCR_SLEEP;
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <CanInit+0x84>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <CanInit+0x84>)
 800033e:	f023 0302 	bic.w	r3, r3, #2
 8000342:	6013      	str	r3, [r2, #0]


}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40023800 	.word	0x40023800
 800034c:	40020400 	.word	0x40020400
 8000350:	40006400 	.word	0x40006400
 8000354:	00080004 	.word	0x00080004

08000358 <Can_Tx_Msg>:


void Can_Tx_Msg(CAN_MESSAGE * msg) {
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

	CAN1->sTxMailBox[0].TIR = 0;		// Empty TIR register
 8000360:	4b3c      	ldr	r3, [pc, #240]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000362:	2200      	movs	r2, #0
 8000364:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	if(msg->format == STANDARD_FORMAT)	{
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	691b      	ldr	r3, [r3, #16]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d10a      	bne.n	8000386 <Can_Tx_Msg+0x2e>
		CAN1->sTxMailBox[0].TIR |= (u_int) (msg->id << 21) | CAN_ID_STD;
 8000370:	4b38      	ldr	r3, [pc, #224]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000372:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	055b      	lsls	r3, r3, #21
 800037c:	4935      	ldr	r1, [pc, #212]	; (8000454 <Can_Tx_Msg+0xfc>)
 800037e:	4313      	orrs	r3, r2
 8000380:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
 8000384:	e009      	b.n	800039a <Can_Tx_Msg+0x42>
	} else {
		CAN1->sTxMailBox[0].TIR |= (u_int) (msg->id << 3) | CAN_ID_EXT;
 8000386:	4b33      	ldr	r3, [pc, #204]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000388:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	00db      	lsls	r3, r3, #3
 8000392:	4930      	ldr	r1, [pc, #192]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000394:	4313      	orrs	r3, r2
 8000396:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
	}

	if (msg->type == DATA_FRAME)  {                 // DATA FRAME
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d106      	bne.n	80003b0 <Can_Tx_Msg+0x58>
	    CAN1->sTxMailBox[0].TIR |= CAN_RTR_DATA;
 80003a2:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <Can_Tx_Msg+0xfc>)
 80003a4:	4a2b      	ldr	r2, [pc, #172]	; (8000454 <Can_Tx_Msg+0xfc>)
 80003a6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80003aa:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 80003ae:	e005      	b.n	80003bc <Can_Tx_Msg+0x64>
	} else {                                        // REMOTE FRAME
	    CAN1->sTxMailBox[0].TIR |= CAN_RTR_REMOTE;
 80003b0:	4b28      	ldr	r3, [pc, #160]	; (8000454 <Can_Tx_Msg+0xfc>)
 80003b2:	4a28      	ldr	r2, [pc, #160]	; (8000454 <Can_Tx_Msg+0xfc>)
 80003b4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80003b8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	}

	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	79db      	ldrb	r3, [r3, #7]
 80003c0:	061a      	lsls	r2, r3, #24
	                          ((u_int)msg->data[2] << 16) |
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	799b      	ldrb	r3, [r3, #6]
 80003c6:	041b      	lsls	r3, r3, #16
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80003c8:	431a      	orrs	r2, r3
	                          ((u_int)msg->data[1] <<  8) |
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	021b      	lsls	r3, r3, #8
	                          ((u_int)msg->data[2] << 16) |
 80003d0:	4313      	orrs	r3, r2
	                          ((u_int)msg->data[0]));
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	7912      	ldrb	r2, [r2, #4]
 80003d6:	4611      	mov	r1, r2
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80003d8:	4a1e      	ldr	r2, [pc, #120]	; (8000454 <Can_Tx_Msg+0xfc>)
	                          ((u_int)msg->data[1] <<  8) |
 80003da:	430b      	orrs	r3, r1
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80003dc:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	7adb      	ldrb	r3, [r3, #11]
 80003e4:	061a      	lsls	r2, r3, #24
	                          ((u_int)msg->data[6] << 16) |
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	7a9b      	ldrb	r3, [r3, #10]
 80003ea:	041b      	lsls	r3, r3, #16
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 80003ec:	431a      	orrs	r2, r3
	                          ((u_int)msg->data[5] <<  8) |
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	7a5b      	ldrb	r3, [r3, #9]
 80003f2:	021b      	lsls	r3, r3, #8
	                          ((u_int)msg->data[6] << 16) |
 80003f4:	4313      	orrs	r3, r2
	                          ((u_int)msg->data[4]));
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	7a12      	ldrb	r2, [r2, #8]
 80003fa:	4611      	mov	r1, r2
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 80003fc:	4a15      	ldr	r2, [pc, #84]	; (8000454 <Can_Tx_Msg+0xfc>)
	                          ((u_int)msg->data[5] <<  8) |
 80003fe:	430b      	orrs	r3, r1
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 8000400:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c

	CAN1->sTxMailBox[0].TDTR &= ~CAN_TDT1R_DLC;
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000406:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800040a:	4a12      	ldr	r2, [pc, #72]	; (8000454 <Can_Tx_Msg+0xfc>)
 800040c:	f023 030f 	bic.w	r3, r3, #15
 8000410:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	CAN1->sTxMailBox[0].TDTR |=  (msg->len & CAN_TDT0R_DLC);
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000416:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	f003 030f 	and.w	r3, r3, #15
 8000422:	490c      	ldr	r1, [pc, #48]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000424:	4313      	orrs	r3, r2
 8000426:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184

	CAN1->IER |= CAN_IER_TMEIE;                      // enable  TME interrupt
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <Can_Tx_Msg+0xfc>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a09      	ldr	r2, [pc, #36]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6153      	str	r3, [r2, #20]
	CAN1->sTxMailBox[0].TIR |=  CAN_TI0R_TXRQ;       // transmit message
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000438:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800043c:	4a05      	ldr	r2, [pc, #20]	; (8000454 <Can_Tx_Msg+0xfc>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40006400 	.word	0x40006400

08000458 <Can_Rx_Msg>:


void Can_Rx_Msg(CAN_MESSAGE * msg) {
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]

	if ((CAN1->sFIFOMailBox[0].RIR & CAN_ID_EXT) == 0) { // Standard ID
 8000460:	4b2e      	ldr	r3, [pc, #184]	; (800051c <Can_Rx_Msg+0xc4>)
 8000462:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->format = STANDARD_FORMAT;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
	    msg->id     = (uint32_t)0x000007FF & (CAN1->sFIFOMailBox[0].RIR >> 21);
 800046c:	4b2b      	ldr	r3, [pc, #172]	; (800051c <Can_Rx_Msg+0xc4>)
 800046e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000472:	0d5b      	lsrs	r3, r3, #21
 8000474:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	601a      	str	r2, [r3, #0]
	  }  else  {                                          // Extended ID
	    msg->format = EXTENDED_FORMAT;
	    msg->id     = (uint32_t)0x0003FFFF & (CAN1->sFIFOMailBox[0].RIR >> 3);
	  }
	                                                  // Read type information
	  if ((CAN1->sFIFOMailBox[0].RIR & CAN_RTR_REMOTE) == 0) {
 800047c:	4b27      	ldr	r3, [pc, #156]	; (800051c <Can_Rx_Msg+0xc4>)
 800047e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->type =   DATA_FRAME;                     // DATA   FRAME
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
	  }  else  {
	    msg->type = REMOTE_FRAME;                     // REMOTE FRAME
	  }

	  msg->len = (char)0x0000000F & CAN1->sFIFOMailBox[0].RDTR;
 8000488:	4b24      	ldr	r3, [pc, #144]	; (800051c <Can_Rx_Msg+0xc4>)
 800048a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800048e:	f003 020f 	and.w	r2, r3, #15
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	60da      	str	r2, [r3, #12]
	                                                    // Read data
	  msg->data[0] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR);
 8000496:	4b21      	ldr	r3, [pc, #132]	; (800051c <Can_Rx_Msg+0xc4>)
 8000498:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800049c:	b2da      	uxtb	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	711a      	strb	r2, [r3, #4]
	  msg->data[1] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 8);
 80004a2:	4b1e      	ldr	r3, [pc, #120]	; (800051c <Can_Rx_Msg+0xc4>)
 80004a4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80004a8:	0a1b      	lsrs	r3, r3, #8
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	715a      	strb	r2, [r3, #5]
	  msg->data[2] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 16);
 80004b0:	4b1a      	ldr	r3, [pc, #104]	; (800051c <Can_Rx_Msg+0xc4>)
 80004b2:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80004b6:	0c1b      	lsrs	r3, r3, #16
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	719a      	strb	r2, [r3, #6]
	  msg->data[3] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 24);
 80004be:	4b17      	ldr	r3, [pc, #92]	; (800051c <Can_Rx_Msg+0xc4>)
 80004c0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80004c4:	0e1b      	lsrs	r3, r3, #24
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	71da      	strb	r2, [r3, #7]

	  msg->data[4] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR);
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <Can_Rx_Msg+0xc4>)
 80004ce:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	721a      	strb	r2, [r3, #8]
	  msg->data[5] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 8);
 80004d8:	4b10      	ldr	r3, [pc, #64]	; (800051c <Can_Rx_Msg+0xc4>)
 80004da:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80004de:	0a1b      	lsrs	r3, r3, #8
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	725a      	strb	r2, [r3, #9]
	  msg->data[6] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 16);
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <Can_Rx_Msg+0xc4>)
 80004e8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80004ec:	0c1b      	lsrs	r3, r3, #16
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	729a      	strb	r2, [r3, #10]
	  msg->data[7] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 24);
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <Can_Rx_Msg+0xc4>)
 80004f6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80004fa:	0e1b      	lsrs	r3, r3, #24
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	72da      	strb	r2, [r3, #11]

	  CAN1->RF0R |= CAN_RF0R_RFOM0;                    // Release FIFO 0 output mailbox
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <Can_Rx_Msg+0xc4>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <Can_Rx_Msg+0xc4>)
 8000508:	f043 0320 	orr.w	r3, r3, #32
 800050c:	60d3      	str	r3, [r2, #12]

}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40006400 	.word	0x40006400

08000520 <Can_Set_Filter>:


void Can_Set_Filter(uint id, char format) {
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	70fb      	strb	r3, [r7, #3]

	static unsigned short CAN_filterIdx = 0;
	uint CAN_msgId = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]

	  if (CAN_filterIdx > 13) {                       // check if Filter Memory is full
 8000530:	4b3f      	ldr	r3, [pc, #252]	; (8000630 <Can_Set_Filter+0x110>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	2b0d      	cmp	r3, #13
 8000536:	d874      	bhi.n	8000622 <Can_Set_Filter+0x102>
	    return;
	  }
	                                                  // Setup identifier information
	  if (format == STANDARD_FORMAT)  {               // Standard ID
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d105      	bne.n	800054a <Can_Set_Filter+0x2a>
	      CAN_msgId  |= (unsigned int)(id << 21) | CAN_ID_STD;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	055b      	lsls	r3, r3, #21
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	4313      	orrs	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	e004      	b.n	8000554 <Can_Set_Filter+0x34>
	  }  else  {                                      // Extended ID
	      CAN_msgId  |= (unsigned int)(id <<  3) | CAN_ID_EXT;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	4313      	orrs	r3, r2
 8000552:	60fb      	str	r3, [r7, #12]
	  }

	  CAN1->FMR  |=  CAN_FMR_FINIT;                    // set Initialisation mode for filter banks
 8000554:	4b37      	ldr	r3, [pc, #220]	; (8000634 <Can_Set_Filter+0x114>)
 8000556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800055a:	4a36      	ldr	r2, [pc, #216]	; (8000634 <Can_Set_Filter+0x114>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	  CAN1->FA1R &=  ~(unsigned int)(1 << CAN_filterIdx); // deactivate filter
 8000564:	4b33      	ldr	r3, [pc, #204]	; (8000634 <Can_Set_Filter+0x114>)
 8000566:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800056a:	4b31      	ldr	r3, [pc, #196]	; (8000630 <Can_Set_Filter+0x110>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	4619      	mov	r1, r3
 8000570:	2301      	movs	r3, #1
 8000572:	408b      	lsls	r3, r1
 8000574:	43db      	mvns	r3, r3
 8000576:	492f      	ldr	r1, [pc, #188]	; (8000634 <Can_Set_Filter+0x114>)
 8000578:	4013      	ands	r3, r2
 800057a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	                                                  // initialize filter
	  CAN1->FS1R |= (unsigned int)(1 << CAN_filterIdx);// set 32-bit scale configuration
 800057e:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <Can_Set_Filter+0x114>)
 8000580:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000584:	4a2a      	ldr	r2, [pc, #168]	; (8000630 <Can_Set_Filter+0x110>)
 8000586:	8812      	ldrh	r2, [r2, #0]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	4a28      	ldr	r2, [pc, #160]	; (8000634 <Can_Set_Filter+0x114>)
 8000592:	430b      	orrs	r3, r1
 8000594:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	  CAN1->FM1R |= (unsigned int)(1 << CAN_filterIdx);// set 2 32-bit identifier list mode
 8000598:	4b26      	ldr	r3, [pc, #152]	; (8000634 <Can_Set_Filter+0x114>)
 800059a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800059e:	4a24      	ldr	r2, [pc, #144]	; (8000630 <Can_Set_Filter+0x110>)
 80005a0:	8812      	ldrh	r2, [r2, #0]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a22      	ldr	r2, [pc, #136]	; (8000634 <Can_Set_Filter+0x114>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	  CAN1->sFilterRegister[CAN_filterIdx].FR1 = CAN_msgId; //  32-bit identifier
 80005b2:	4920      	ldr	r1, [pc, #128]	; (8000634 <Can_Set_Filter+0x114>)
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <Can_Set_Filter+0x110>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	3348      	adds	r3, #72	; 0x48
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	  CAN1->sFilterRegister[CAN_filterIdx].FR2 = CAN_msgId; //  32-bit identifier
 80005c0:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <Can_Set_Filter+0x114>)
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <Can_Set_Filter+0x110>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	3348      	adds	r3, #72	; 0x48
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	4413      	add	r3, r2
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	605a      	str	r2, [r3, #4]

	  CAN1->FFA1R &= ~(unsigned int)(1 << CAN_filterIdx);  // assign filter to FIFO 0
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <Can_Set_Filter+0x114>)
 80005d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <Can_Set_Filter+0x110>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	2301      	movs	r3, #1
 80005de:	408b      	lsls	r3, r1
 80005e0:	43db      	mvns	r3, r3
 80005e2:	4914      	ldr	r1, [pc, #80]	; (8000634 <Can_Set_Filter+0x114>)
 80005e4:	4013      	ands	r3, r2
 80005e6:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
	  CAN1->FA1R  |=  (unsigned int)(1 << CAN_filterIdx);  // activate filter
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <Can_Set_Filter+0x114>)
 80005ec:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80005f0:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <Can_Set_Filter+0x110>)
 80005f2:	8812      	ldrh	r2, [r2, #0]
 80005f4:	4611      	mov	r1, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	408a      	lsls	r2, r1
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <Can_Set_Filter+0x114>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	  CAN1->FMR &= ~CAN_FMR_FINIT;                     // reset Initialisation mode for filter banks
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <Can_Set_Filter+0x114>)
 8000606:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <Can_Set_Filter+0x114>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	  CAN_filterIdx += 1;                             // increase filter index
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <Can_Set_Filter+0x110>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <Can_Set_Filter+0x110>)
 800061e:	801a      	strh	r2, [r3, #0]
 8000620:	e000      	b.n	8000624 <Can_Set_Filter+0x104>
	    return;
 8000622:	bf00      	nop

}
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	200001f4 	.word	0x200001f4
 8000634:	40006400 	.word	0x40006400

08000638 <registerCanMsgRxCallback>:


void registerCanMsgRxCallback(void (*callback)(CAN_MESSAGE msg)) {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	canMsgReceivedCallback = callback;
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <registerCanMsgRxCallback+0x1c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	200001ec 	.word	0x200001ec

08000658 <CAN1_TX_IRQHandler>:
void registerCanMsgTxCallback(void (*callback)(void)) {
	canMsgTransmitCallback = callback;
}


__attribute__((interrupt)) void CAN1_TX_IRQHandler (void)  {
 8000658:	4668      	mov	r0, sp
 800065a:	f020 0107 	bic.w	r1, r0, #7
 800065e:	468d      	mov	sp, r1
 8000660:	b589      	push	{r0, r3, r7, lr}
 8000662:	af00      	add	r7, sp, #0
	if (CAN1->TSR & CAN_TSR_RQCP0) {                 // request completed mbx 0
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <CAN1_TX_IRQHandler+0x4c>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00b      	beq.n	8000688 <CAN1_TX_IRQHandler+0x30>
	    CAN1->TSR |= CAN_TSR_RQCP0;                  // reset request complete mbx 0
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <CAN1_TX_IRQHandler+0x4c>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <CAN1_TX_IRQHandler+0x4c>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6093      	str	r3, [r2, #8]
	    CAN1->IER &= ~CAN_IER_TMEIE;                 // disable  TME interrupt
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <CAN1_TX_IRQHandler+0x4c>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <CAN1_TX_IRQHandler+0x4c>)
 8000682:	f023 0301 	bic.w	r3, r3, #1
 8000686:	6153      	str	r3, [r2, #20]
	}
	// Tx Interrupt Action
	if(canMsgTransmitCallback) canMsgTransmitCallback();
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <CAN1_TX_IRQHandler+0x50>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <CAN1_TX_IRQHandler+0x3e>
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <CAN1_TX_IRQHandler+0x50>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4798      	blx	r3
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 800069e:	4685      	mov	sp, r0
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40006400 	.word	0x40006400
 80006a8:	200001f0 	.word	0x200001f0

080006ac <CAN1_RX0_IRQHandler>:



__attribute__((interrupt)) void CAN1_RX0_IRQHandler (void) {
 80006ac:	4668      	mov	r0, sp
 80006ae:	f020 0107 	bic.w	r1, r0, #7
 80006b2:	468d      	mov	sp, r1
 80006b4:	b591      	push	{r0, r4, r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af02      	add	r7, sp, #8

	CAN_MESSAGE can_rx_message;

	if (CAN1->RF0R & CAN_RF0R_FMP0) {			      // message pending?
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <CAN1_RX0_IRQHandler+0x50>)
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	f003 0303 	and.w	r3, r3, #3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d013      	beq.n	80006ee <CAN1_RX0_IRQHandler+0x42>
		Can_Rx_Msg(&can_rx_message);                  // read the message
 80006c6:	463b      	mov	r3, r7
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fec5 	bl	8000458 <Can_Rx_Msg>
		// Rx Interrupt Action
		if (canMsgReceivedCallback) canMsgReceivedCallback(can_rx_message);
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <CAN1_RX0_IRQHandler+0x54>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00b      	beq.n	80006ee <CAN1_RX0_IRQHandler+0x42>
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <CAN1_RX0_IRQHandler+0x54>)
 80006d8:	681c      	ldr	r4, [r3, #0]
 80006da:	466a      	mov	r2, sp
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80006e8:	463b      	mov	r3, r7
 80006ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ec:	47a0      	blx	r4
	}

}
 80006ee:	bf00      	nop
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	e8bd 4091 	ldmia.w	sp!, {r0, r4, r7, lr}
 80006f8:	4685      	mov	sp, r0
 80006fa:	4770      	bx	lr
 80006fc:	40006400 	.word	0x40006400
 8000700:	200001ec 	.word	0x200001ec

08000704 <__NVIC_SetPriorityGrouping>:
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071a:	68ba      	ldr	r2, [r7, #8]
 800071c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800072c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000736:	4a04      	ldr	r2, [pc, #16]	; (8000748 <__NVIC_SetPriorityGrouping+0x44>)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	60d3      	str	r3, [r2, #12]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_EnableIRQ>:
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	2b00      	cmp	r3, #0
 800075c:	db0b      	blt.n	8000776 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f003 021f 	and.w	r2, r3, #31
 8000764:	4907      	ldr	r1, [pc, #28]	; (8000784 <__NVIC_EnableIRQ+0x38>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	095b      	lsrs	r3, r3, #5
 800076c:	2001      	movs	r0, #1
 800076e:	fa00 f202 	lsl.w	r2, r0, r2
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000e100 	.word	0xe000e100

08000788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db0a      	blt.n	80007b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	490c      	ldr	r1, [pc, #48]	; (80007d4 <__NVIC_SetPriority+0x4c>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	0112      	lsls	r2, r2, #4
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	440b      	add	r3, r1
 80007ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b0:	e00a      	b.n	80007c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4908      	ldr	r1, [pc, #32]	; (80007d8 <__NVIC_SetPriority+0x50>)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	f003 030f 	and.w	r3, r3, #15
 80007be:	3b04      	subs	r3, #4
 80007c0:	0112      	lsls	r2, r2, #4
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	440b      	add	r3, r1
 80007c6:	761a      	strb	r2, [r3, #24]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007dc:	b480      	push	{r7}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	f1c3 0307 	rsb	r3, r3, #7
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	bf28      	it	cs
 80007fa:	2304      	movcs	r3, #4
 80007fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3304      	adds	r3, #4
 8000802:	2b06      	cmp	r3, #6
 8000804:	d902      	bls.n	800080c <NVIC_EncodePriority+0x30>
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3b03      	subs	r3, #3
 800080a:	e000      	b.n	800080e <NVIC_EncodePriority+0x32>
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000810:	f04f 32ff 	mov.w	r2, #4294967295
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43da      	mvns	r2, r3
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	401a      	ands	r2, r3
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000824:	f04f 31ff 	mov.w	r1, #4294967295
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	fa01 f303 	lsl.w	r3, r1, r3
 800082e:	43d9      	mvns	r1, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	4313      	orrs	r3, r2
         );
}
 8000836:	4618      	mov	r0, r3
 8000838:	3724      	adds	r7, #36	; 0x24
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000854:	d301      	bcc.n	800085a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000856:	2301      	movs	r3, #1
 8000858:	e00f      	b.n	800087a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <SysTick_Config+0x40>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000862:	210f      	movs	r1, #15
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f7ff ff8e 	bl	8000788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <SysTick_Config+0x40>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000872:	4b04      	ldr	r3, [pc, #16]	; (8000884 <SysTick_Config+0x40>)
 8000874:	2207      	movs	r2, #7
 8000876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	e000e010 	.word	0xe000e010

08000888 <SystemRegisterCFG>:
 */
#include "config.h"



void SystemRegisterCFG(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

	// *** Configure System Clock (36MHz for each system BUS) ***
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;		// HSE as an input to the PLL loop
 800088e:	4b77      	ldr	r3, [pc, #476]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	4a76      	ldr	r2, [pc, #472]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 8000894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000898:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP_1;		// PLLP DIV = /2
 800089a:	4b74      	ldr	r3, [pc, #464]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	4a73      	ldr	r2, [pc, #460]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80008a4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP_0;
 80008a6:	4b71      	ldr	r3, [pc, #452]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	4a70      	ldr	r2, [pc, #448]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008b0:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b001001000 << 6);			// Multiplication factor PLLN = 72
 80008b2:	4b6e      	ldr	r3, [pc, #440]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	4a6d      	ldr	r2, [pc, #436]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008b8:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 80008bc:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b000100);					// PLLM DIV = /4
 80008be:	4b6b      	ldr	r3, [pc, #428]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;				// System Clock MUX switched to PLL
 80008ca:	4b68      	ldr	r3, [pc, #416]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	4a67      	ldr	r2, [pc, #412]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (RCC_CFGR_HPRE_DIV2 << RCC_CFGR_HPRE_Pos);		// AHB DIV = /2
 80008d6:	4b65      	ldr	r3, [pc, #404]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	4a64      	ldr	r2, [pc, #400]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008e0:	6093      	str	r3, [r2, #8]
	RCC->CR |= RCC_CR_HSEON;	// HSE ON
 80008e2:	4b62      	ldr	r3, [pc, #392]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ec:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); // Wait for HSE ON
 80008ee:	bf00      	nop
 80008f0:	4b5e      	ldr	r3, [pc, #376]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d0f9      	beq.n	80008f0 <SystemRegisterCFG+0x68>
	RCC->CR |= RCC_CR_PLLON;	// PLL ON
 80008fc:	4b5b      	ldr	r3, [pc, #364]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a5a      	ldr	r2, [pc, #360]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 8000902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000906:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLRDY)); // Check if PLL not locked
 8000908:	bf00      	nop
 800090a:	4b58      	ldr	r3, [pc, #352]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1f9      	bne.n	800090a <SystemRegisterCFG+0x82>
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Check for a correct source set
 8000916:	bf00      	nop
 8000918:	4b54      	ldr	r3, [pc, #336]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	f003 030c 	and.w	r3, r3, #12
 8000920:	2b08      	cmp	r3, #8
 8000922:	d1f9      	bne.n	8000918 <SystemRegisterCFG+0x90>
	RCC->CR &= ~RCC_CR_HSION;	// 16MHz HSI OFF
 8000924:	4b51      	ldr	r3, [pc, #324]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a50      	ldr	r2, [pc, #320]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 800092a:	f023 0301 	bic.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]


	// RCC Configuration
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;	// GPIO Clock
 8000930:	4b4e      	ldr	r3, [pc, #312]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	4a4d      	ldr	r2, [pc, #308]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 8000936:	f043 0307 	orr.w	r3, r3, #7
 800093a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;		// SPI1 clock
 800093c:	4b4b      	ldr	r3, [pc, #300]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 800093e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000940:	4a4a      	ldr	r2, [pc, #296]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 8000942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000946:	6453      	str	r3, [r2, #68]	; 0x44


	// Standard GPIO Config (LEDs)
	GPIOC->MODER |= GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE11_0 | GPIO_MODER_MODE12_0;	// STM LEDs output
 8000948:	4b49      	ldr	r3, [pc, #292]	; (8000a70 <SystemRegisterCFG+0x1e8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a48      	ldr	r2, [pc, #288]	; (8000a70 <SystemRegisterCFG+0x1e8>)
 800094e:	f043 73a2 	orr.w	r3, r3, #21233664	; 0x1440000
 8000952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000956:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD8 | GPIO_ODR_OD9 | GPIO_ODR_OD11 | GPIO_ODR_OD12;		// STM LEDs OFF
 8000958:	4b45      	ldr	r3, [pc, #276]	; (8000a70 <SystemRegisterCFG+0x1e8>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	4a44      	ldr	r2, [pc, #272]	; (8000a70 <SystemRegisterCFG+0x1e8>)
 800095e:	f443 53d8 	orr.w	r3, r3, #6912	; 0x1b00
 8000962:	6153      	str	r3, [r2, #20]

	// W6100 External Reset config
	GPIOC->MODER |= GPIO_MODER_MODE4_0;		// Output
 8000964:	4b42      	ldr	r3, [pc, #264]	; (8000a70 <SystemRegisterCFG+0x1e8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a41      	ldr	r2, [pc, #260]	; (8000a70 <SystemRegisterCFG+0x1e8>)
 800096a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800096e:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD4;				// Level high (reset disable)
 8000970:	4b3f      	ldr	r3, [pc, #252]	; (8000a70 <SystemRegisterCFG+0x1e8>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a3e      	ldr	r2, [pc, #248]	; (8000a70 <SystemRegisterCFG+0x1e8>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	6153      	str	r3, [r2, #20]

	// W6100 External Interrupt pin configuration
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;	// Enable clock for SYSCFG (Used for EXTI ISR)
 800097c:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 800097e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000980:	4a3a      	ldr	r2, [pc, #232]	; (8000a6c <SystemRegisterCFG+0x1e4>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000986:	6453      	str	r3, [r2, #68]	; 0x44
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000988:	f3bf 8f4f 	dsb	sy
	__DSB();
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PC;	// PC5 pin selected
 800098c:	4b39      	ldr	r3, [pc, #228]	; (8000a74 <SystemRegisterCFG+0x1ec>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	4a38      	ldr	r2, [pc, #224]	; (8000a74 <SystemRegisterCFG+0x1ec>)
 8000992:	f043 0320 	orr.w	r3, r3, #32
 8000996:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_IM5;						// Interrupt masked for line Px5
 8000998:	4b37      	ldr	r3, [pc, #220]	; (8000a78 <SystemRegisterCFG+0x1f0>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a36      	ldr	r2, [pc, #216]	; (8000a78 <SystemRegisterCFG+0x1f0>)
 800099e:	f043 0320 	orr.w	r3, r3, #32
 80009a2:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR5;					// Falling edge for line Px5
 80009a4:	4b34      	ldr	r3, [pc, #208]	; (8000a78 <SystemRegisterCFG+0x1f0>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	4a33      	ldr	r2, [pc, #204]	; (8000a78 <SystemRegisterCFG+0x1f0>)
 80009aa:	f043 0320 	orr.w	r3, r3, #32
 80009ae:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009b0:	2017      	movs	r0, #23
 80009b2:	f7ff fecb 	bl	800074c <__NVIC_EnableIRQ>


	// SPI GPIO Config
	GPIOA->MODER |= GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1;		// SPI1 AFIO Set (NSS Software)
 80009b6:	4b31      	ldr	r3, [pc, #196]	; (8000a7c <SystemRegisterCFG+0x1f4>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a30      	ldr	r2, [pc, #192]	; (8000a7c <SystemRegisterCFG+0x1f4>)
 80009bc:	f443 4329 	orr.w	r3, r3, #43264	; 0xa900
 80009c0:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_OD4;		// Slave select HIGH (disable)
 80009c2:	4b2e      	ldr	r3, [pc, #184]	; (8000a7c <SystemRegisterCFG+0x1f4>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a2d      	ldr	r2, [pc, #180]	; (8000a7c <SystemRegisterCFG+0x1f4>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	6153      	str	r3, [r2, #20]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL5_0 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL6_0 |
 80009ce:	4b2b      	ldr	r3, [pc, #172]	; (8000a7c <SystemRegisterCFG+0x1f4>)
 80009d0:	6a1b      	ldr	r3, [r3, #32]
 80009d2:	4a2a      	ldr	r2, [pc, #168]	; (8000a7c <SystemRegisterCFG+0x1f4>)
 80009d4:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80009d8:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80009dc:	6213      	str	r3, [r2, #32]
					 GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL7_0 | GPIO_AFRL_AFRL7_2;			// SPI1 AFIO => SPI1

	// SPI Config
	SPI1->CR1 |= SPI_CR1_SPE | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_MSTR;
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <SystemRegisterCFG+0x1f8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a27      	ldr	r2, [pc, #156]	; (8000a80 <SystemRegisterCFG+0x1f8>)
 80009e4:	f443 7351 	orr.w	r3, r3, #836	; 0x344
 80009e8:	6013      	str	r3, [r2, #0]

	// IO-Link Config
	GPIOB->MODER |= GPIO_MODER_MODER14_0;		// EN_L+ pin: output
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <SystemRegisterCFG+0x1fc>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <SystemRegisterCFG+0x1fc>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD14_1;		// EN_L+ pin: pull down
 80009f6:	4b23      	ldr	r3, [pc, #140]	; (8000a84 <SystemRegisterCFG+0x1fc>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <SystemRegisterCFG+0x1fc>)
 80009fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a00:	60d3      	str	r3, [r2, #12]

	// SysTick Enable and configuration
	SysTick_Config(32000000 / 1000);
 8000a02:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000a06:	f7ff ff1d 	bl	8000844 <SysTick_Config>

	// Interrupt Priority configuration
	NVIC_SetPriorityGrouping(PRIGROUP_16G_0S);
 8000a0a:	2003      	movs	r0, #3
 8000a0c:	f7ff fe7a 	bl	8000704 <__NVIC_SetPriorityGrouping>
	uint32_t priority;
	priority = NVIC_EncodePriority(PRIGROUP_16G_0S, 1, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2101      	movs	r1, #1
 8000a14:	2003      	movs	r0, #3
 8000a16:	f7ff fee1 	bl	80007dc <NVIC_EncodePriority>
 8000a1a:	6078      	str	r0, [r7, #4]
	NVIC_SetPriority(SysTick_IRQn, priority);
 8000a1c:	6879      	ldr	r1, [r7, #4]
 8000a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a22:	f7ff feb1 	bl	8000788 <__NVIC_SetPriority>

	priority = NVIC_EncodePriority(PRIGROUP_16G_0S, 2, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2102      	movs	r1, #2
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f7ff fed6 	bl	80007dc <NVIC_EncodePriority>
 8000a30:	6078      	str	r0, [r7, #4]
	NVIC_SetPriority(EXTI9_5_IRQn, priority);
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	2017      	movs	r0, #23
 8000a36:	f7ff fea7 	bl	8000788 <__NVIC_SetPriority>

	priority = NVIC_EncodePriority(PRIGROUP_16G_0S, 3, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f7ff fecc 	bl	80007dc <NVIC_EncodePriority>
 8000a44:	6078      	str	r0, [r7, #4]
	NVIC_SetPriority(CAN1_RX0_IRQn, priority);
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	2014      	movs	r0, #20
 8000a4a:	f7ff fe9d 	bl	8000788 <__NVIC_SetPriority>

	priority = NVIC_EncodePriority(PRIGROUP_16G_0S, 4, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2104      	movs	r1, #4
 8000a52:	2003      	movs	r0, #3
 8000a54:	f7ff fec2 	bl	80007dc <NVIC_EncodePriority>
 8000a58:	6078      	str	r0, [r7, #4]
	NVIC_SetPriority(CAN1_TX_IRQn, priority);
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	2013      	movs	r0, #19
 8000a5e:	f7ff fe93 	bl	8000788 <__NVIC_SetPriority>


}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40013800 	.word	0x40013800
 8000a78:	40013c00 	.word	0x40013c00
 8000a7c:	40020000 	.word	0x40020000
 8000a80:	40013000 	.word	0x40013000
 8000a84:	40020400 	.word	0x40020400

08000a88 <canVariables>:

// CAN variables: array enum references
enum can_msg {can_systems_on, can_systems_off, can_status_request, can_status_ok, can_status_fault, can_brake_ctrl, can_propulsion_ctrl};

// Define CAN variable structures below
void canVariables(CAN_MESSAGE * cmg) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

	strcpy(cmg[can_systems_on].data, "mb_0001");
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3304      	adds	r3, #4
 8000a94:	4956      	ldr	r1, [pc, #344]	; (8000bf0 <canVariables+0x168>)
 8000a96:	461a      	mov	r2, r3
 8000a98:	460b      	mov	r3, r1
 8000a9a:	cb03      	ldmia	r3!, {r0, r1}
 8000a9c:	6010      	str	r0, [r2, #0]
 8000a9e:	6051      	str	r1, [r2, #4]
	cmg[can_systems_on].format = STANDARD_FORMAT;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
	cmg[can_systems_on].type = DATA_FRAME;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
	cmg[can_systems_on].len = sizeof(cmg[can_systems_on]);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2218      	movs	r2, #24
 8000ab0:	60da      	str	r2, [r3, #12]
	cmg[can_systems_on].id = ALL_NODES;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]

	strcpy(cmg[can_systems_off].data, "mb_0002");
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3318      	adds	r3, #24
 8000abc:	3304      	adds	r3, #4
 8000abe:	494d      	ldr	r1, [pc, #308]	; (8000bf4 <canVariables+0x16c>)
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	cb03      	ldmia	r3!, {r0, r1}
 8000ac6:	6010      	str	r0, [r2, #0]
 8000ac8:	6051      	str	r1, [r2, #4]
	cmg[can_systems_off].format = STANDARD_FORMAT;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3318      	adds	r3, #24
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
	cmg[can_systems_off].type = DATA_FRAME;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3318      	adds	r3, #24
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
	cmg[can_systems_off].len = sizeof(cmg[can_systems_off]);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	3318      	adds	r3, #24
 8000ade:	2218      	movs	r2, #24
 8000ae0:	60da      	str	r2, [r3, #12]
	cmg[can_systems_off].id = ALL_NODES;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3318      	adds	r3, #24
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]

	strcpy(cmg[can_status_request].data, "mb_1010");
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3330      	adds	r3, #48	; 0x30
 8000aee:	3304      	adds	r3, #4
 8000af0:	4941      	ldr	r1, [pc, #260]	; (8000bf8 <canVariables+0x170>)
 8000af2:	461a      	mov	r2, r3
 8000af4:	460b      	mov	r3, r1
 8000af6:	cb03      	ldmia	r3!, {r0, r1}
 8000af8:	6010      	str	r0, [r2, #0]
 8000afa:	6051      	str	r1, [r2, #4]
	cmg[can_status_request].format = STANDARD_FORMAT;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3330      	adds	r3, #48	; 0x30
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
	cmg[can_status_request].type = DATA_FRAME;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3330      	adds	r3, #48	; 0x30
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
	cmg[can_status_request].len = sizeof(cmg[can_status_request]);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3330      	adds	r3, #48	; 0x30
 8000b10:	2218      	movs	r2, #24
 8000b12:	60da      	str	r2, [r3, #12]
	cmg[can_status_request].id = ALL_NODES;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3330      	adds	r3, #48	; 0x30
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]

	strcpy(cmg[can_status_ok].data, "mb_0000");
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3348      	adds	r3, #72	; 0x48
 8000b20:	3304      	adds	r3, #4
 8000b22:	4936      	ldr	r1, [pc, #216]	; (8000bfc <canVariables+0x174>)
 8000b24:	461a      	mov	r2, r3
 8000b26:	460b      	mov	r3, r1
 8000b28:	cb03      	ldmia	r3!, {r0, r1}
 8000b2a:	6010      	str	r0, [r2, #0]
 8000b2c:	6051      	str	r1, [r2, #4]
	cmg[can_status_ok].format = STANDARD_FORMAT;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3348      	adds	r3, #72	; 0x48
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
	cmg[can_status_ok].type = DATA_FRAME;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3348      	adds	r3, #72	; 0x48
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
	cmg[can_status_ok].len = sizeof(cmg[can_status_ok]);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3348      	adds	r3, #72	; 0x48
 8000b42:	2218      	movs	r2, #24
 8000b44:	60da      	str	r2, [r3, #12]
	cmg[can_status_ok].id = ALL_NODES;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3348      	adds	r3, #72	; 0x48
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]

	strcpy(cmg[can_status_fault].data, "mb_1111");
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3360      	adds	r3, #96	; 0x60
 8000b52:	3304      	adds	r3, #4
 8000b54:	492a      	ldr	r1, [pc, #168]	; (8000c00 <canVariables+0x178>)
 8000b56:	461a      	mov	r2, r3
 8000b58:	460b      	mov	r3, r1
 8000b5a:	cb03      	ldmia	r3!, {r0, r1}
 8000b5c:	6010      	str	r0, [r2, #0]
 8000b5e:	6051      	str	r1, [r2, #4]
	cmg[can_status_fault].format = STANDARD_FORMAT;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3360      	adds	r3, #96	; 0x60
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
	cmg[can_status_fault].type = DATA_FRAME;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3360      	adds	r3, #96	; 0x60
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
	cmg[can_status_fault].len = sizeof(cmg[can_status_fault]);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3360      	adds	r3, #96	; 0x60
 8000b74:	2218      	movs	r2, #24
 8000b76:	60da      	str	r2, [r3, #12]
	cmg[can_status_fault].id = ALL_NODES;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3360      	adds	r3, #96	; 0x60
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]

	strcpy(cmg[can_brake_ctrl].data, "mb_b_xx");		// "xx" value to be substituted before transmission
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3378      	adds	r3, #120	; 0x78
 8000b84:	3304      	adds	r3, #4
 8000b86:	491f      	ldr	r1, [pc, #124]	; (8000c04 <canVariables+0x17c>)
 8000b88:	461a      	mov	r2, r3
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	cb03      	ldmia	r3!, {r0, r1}
 8000b8e:	6010      	str	r0, [r2, #0]
 8000b90:	6051      	str	r1, [r2, #4]
	cmg[can_brake_ctrl].format = STANDARD_FORMAT;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3378      	adds	r3, #120	; 0x78
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
	cmg[can_brake_ctrl].type = DATA_FRAME;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3378      	adds	r3, #120	; 0x78
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	615a      	str	r2, [r3, #20]
	cmg[can_brake_ctrl].len = sizeof(cmg[can_brake_ctrl]);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3378      	adds	r3, #120	; 0x78
 8000ba6:	2218      	movs	r2, #24
 8000ba8:	60da      	str	r2, [r3, #12]
	cmg[can_brake_ctrl].id = BRAKING;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	3378      	adds	r3, #120	; 0x78
 8000bae:	2202      	movs	r2, #2
 8000bb0:	601a      	str	r2, [r3, #0]

	strcpy(cmg[can_propulsion_ctrl].data, "mb_p_xx");		// "xx" value to be substituted before transmission
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3390      	adds	r3, #144	; 0x90
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	4913      	ldr	r1, [pc, #76]	; (8000c08 <canVariables+0x180>)
 8000bba:	461a      	mov	r2, r3
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	cb03      	ldmia	r3!, {r0, r1}
 8000bc0:	6010      	str	r0, [r2, #0]
 8000bc2:	6051      	str	r1, [r2, #4]
	cmg[can_propulsion_ctrl].format = STANDARD_FORMAT;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3390      	adds	r3, #144	; 0x90
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
	cmg[can_propulsion_ctrl].type = DATA_FRAME;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3390      	adds	r3, #144	; 0x90
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
	cmg[can_propulsion_ctrl].len = sizeof(cmg[can_propulsion_ctrl]);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3390      	adds	r3, #144	; 0x90
 8000bd8:	2218      	movs	r2, #24
 8000bda:	60da      	str	r2, [r3, #12]
	cmg[can_propulsion_ctrl].id = PROPULSION;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3390      	adds	r3, #144	; 0x90
 8000be0:	2203      	movs	r2, #3
 8000be2:	601a      	str	r2, [r3, #0]


}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	08002d38 	.word	0x08002d38
 8000bf4:	08002d40 	.word	0x08002d40
 8000bf8:	08002d48 	.word	0x08002d48
 8000bfc:	08002d50 	.word	0x08002d50
 8000c00:	08002d58 	.word	0x08002d58
 8000c04:	08002d60 	.word	0x08002d60
 8000c08:	08002d68 	.word	0x08002d68

08000c0c <dataPacketReceived>:


void dataPacketReceived(char * RxBuf) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	/* Reaction on Data Received */

	// Check Ethernet
		if (!strcmp(RxBuf, "AT+st?\023")) {
 8000c14:	4962      	ldr	r1, [pc, #392]	; (8000da0 <dataPacketReceived+0x194>)
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fada 	bl	80001d0 <strcmp>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10a      	bne.n	8000c38 <dataPacketReceived+0x2c>
			// Send msg to the client
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"MBR: OK\n", sizeof("MBR: OK\n"));
 8000c22:	4b60      	ldr	r3, [pc, #384]	; (8000da4 <dataPacketReceived+0x198>)
 8000c24:	6859      	ldr	r1, [r3, #4]
 8000c26:	2309      	movs	r3, #9
 8000c28:	4a5f      	ldr	r2, [pc, #380]	; (8000da8 <dataPacketReceived+0x19c>)
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f001 f943 	bl	8001eb6 <W6100_TransmitData>
			Can_Tx_Msg(&canMessages[can_status_request]);
 8000c30:	485e      	ldr	r0, [pc, #376]	; (8000dac <dataPacketReceived+0x1a0>)
 8000c32:	f7ff fb91 	bl	8000358 <Can_Tx_Msg>
			// Send msg to the client
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Command unknown...\n", sizeof("Command unknown...\n"));
		}


}
 8000c36:	e0ae      	b.n	8000d96 <dataPacketReceived+0x18a>
		else if (!strncmp(RxBuf, "CO+x+x+x+x\023", 3)) {
 8000c38:	2203      	movs	r2, #3
 8000c3a:	495d      	ldr	r1, [pc, #372]	; (8000db0 <dataPacketReceived+0x1a4>)
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f001 fb71 	bl	8002324 <strncmp>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d103      	bne.n	8000c50 <dataPacketReceived+0x44>
			OpenControl(RxBuf);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 f975 	bl	8000f38 <OpenControl>
}
 8000c4e:	e0a2      	b.n	8000d96 <dataPacketReceived+0x18a>
		else if (!strncmp(RxBuf, "CC+x+x+x+x\023", 3)) {
 8000c50:	2203      	movs	r2, #3
 8000c52:	4958      	ldr	r1, [pc, #352]	; (8000db4 <dataPacketReceived+0x1a8>)
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f001 fb65 	bl	8002324 <strncmp>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d103      	bne.n	8000c68 <dataPacketReceived+0x5c>
			ClosedControl(RxBuf);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 fa73 	bl	800114c <ClosedControl>
}
 8000c66:	e096      	b.n	8000d96 <dataPacketReceived+0x18a>
		else if (!strcmp(RxBuf, "AT+on\023"))	{
 8000c68:	4953      	ldr	r1, [pc, #332]	; (8000db8 <dataPacketReceived+0x1ac>)
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff fab0 	bl	80001d0 <strcmp>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d110      	bne.n	8000c98 <dataPacketReceived+0x8c>
			GPIOB->ODR |= GPIO_ODR_OD14;
 8000c76:	4b51      	ldr	r3, [pc, #324]	; (8000dbc <dataPacketReceived+0x1b0>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a50      	ldr	r2, [pc, #320]	; (8000dbc <dataPacketReceived+0x1b0>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c80:	6153      	str	r3, [r2, #20]
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Systems EN...\n", sizeof("Systems EN...\n"));
 8000c82:	4b48      	ldr	r3, [pc, #288]	; (8000da4 <dataPacketReceived+0x198>)
 8000c84:	6859      	ldr	r1, [r3, #4]
 8000c86:	230f      	movs	r3, #15
 8000c88:	4a4d      	ldr	r2, [pc, #308]	; (8000dc0 <dataPacketReceived+0x1b4>)
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f001 f913 	bl	8001eb6 <W6100_TransmitData>
			Can_Tx_Msg(&canMessages[can_systems_on]);
 8000c90:	484c      	ldr	r0, [pc, #304]	; (8000dc4 <dataPacketReceived+0x1b8>)
 8000c92:	f7ff fb61 	bl	8000358 <Can_Tx_Msg>
}
 8000c96:	e07e      	b.n	8000d96 <dataPacketReceived+0x18a>
		else if (!strcmp(RxBuf, "AT+off\023"))	{
 8000c98:	494b      	ldr	r1, [pc, #300]	; (8000dc8 <dataPacketReceived+0x1bc>)
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fa98 	bl	80001d0 <strcmp>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d110      	bne.n	8000cc8 <dataPacketReceived+0xbc>
			GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000ca6:	4b45      	ldr	r3, [pc, #276]	; (8000dbc <dataPacketReceived+0x1b0>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	4a44      	ldr	r2, [pc, #272]	; (8000dbc <dataPacketReceived+0x1b0>)
 8000cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cb0:	6153      	str	r3, [r2, #20]
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Systems DIS...\n", sizeof("Systems DIS...\n"));
 8000cb2:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <dataPacketReceived+0x198>)
 8000cb4:	6859      	ldr	r1, [r3, #4]
 8000cb6:	2310      	movs	r3, #16
 8000cb8:	4a44      	ldr	r2, [pc, #272]	; (8000dcc <dataPacketReceived+0x1c0>)
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f001 f8fb 	bl	8001eb6 <W6100_TransmitData>
			Can_Tx_Msg(&canMessages[can_systems_off]);
 8000cc0:	4843      	ldr	r0, [pc, #268]	; (8000dd0 <dataPacketReceived+0x1c4>)
 8000cc2:	f7ff fb49 	bl	8000358 <Can_Tx_Msg>
}
 8000cc6:	e066      	b.n	8000d96 <dataPacketReceived+0x18a>
		else if (!strncmp(RxBuf, "AT+B+xx\023", 5))	{
 8000cc8:	2205      	movs	r2, #5
 8000cca:	4942      	ldr	r1, [pc, #264]	; (8000dd4 <dataPacketReceived+0x1c8>)
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f001 fb29 	bl	8002324 <strncmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d127      	bne.n	8000d28 <dataPacketReceived+0x11c>
			brake_val_tab[0] = RxBuf[5];
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	795a      	ldrb	r2, [r3, #5]
 8000cdc:	4b3e      	ldr	r3, [pc, #248]	; (8000dd8 <dataPacketReceived+0x1cc>)
 8000cde:	701a      	strb	r2, [r3, #0]
			brake_val_tab[1] = RxBuf[6];
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	799a      	ldrb	r2, [r3, #6]
 8000ce4:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <dataPacketReceived+0x1cc>)
 8000ce6:	705a      	strb	r2, [r3, #1]
			sprintf(strTemp, "BRK SET: %c%c\023", brake_val_tab[0], brake_val_tab[1]);
 8000ce8:	4b3b      	ldr	r3, [pc, #236]	; (8000dd8 <dataPacketReceived+0x1cc>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <dataPacketReceived+0x1cc>)
 8000cf0:	785b      	ldrb	r3, [r3, #1]
 8000cf2:	f107 0018 	add.w	r0, r7, #24
 8000cf6:	4939      	ldr	r1, [pc, #228]	; (8000ddc <dataPacketReceived+0x1d0>)
 8000cf8:	f001 faf4 	bl	80022e4 <siprintf>
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)(strTemp), sizeof(strTemp));
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <dataPacketReceived+0x198>)
 8000cfe:	6859      	ldr	r1, [r3, #4]
 8000d00:	f107 0218 	add.w	r2, r7, #24
 8000d04:	230d      	movs	r3, #13
 8000d06:	2001      	movs	r0, #1
 8000d08:	f001 f8d5 	bl	8001eb6 <W6100_TransmitData>
			canMessages[can_brake_ctrl].data[5] = brake_val_tab[0];
 8000d0c:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <dataPacketReceived+0x1cc>)
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <dataPacketReceived+0x1b8>)
 8000d12:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
			canMessages[can_brake_ctrl].data[6] = brake_val_tab[1];
 8000d16:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <dataPacketReceived+0x1cc>)
 8000d18:	785a      	ldrb	r2, [r3, #1]
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <dataPacketReceived+0x1b8>)
 8000d1c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			Can_Tx_Msg(&canMessages[can_brake_ctrl]);
 8000d20:	482f      	ldr	r0, [pc, #188]	; (8000de0 <dataPacketReceived+0x1d4>)
 8000d22:	f7ff fb19 	bl	8000358 <Can_Tx_Msg>
}
 8000d26:	e036      	b.n	8000d96 <dataPacketReceived+0x18a>
		else if (!strncmp(RxBuf, "AT+P+xx\023", 5))	{
 8000d28:	2205      	movs	r2, #5
 8000d2a:	492e      	ldr	r1, [pc, #184]	; (8000de4 <dataPacketReceived+0x1d8>)
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f001 faf9 	bl	8002324 <strncmp>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d127      	bne.n	8000d88 <dataPacketReceived+0x17c>
			propulsion_val_tab[0] = RxBuf[5];
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	795a      	ldrb	r2, [r3, #5]
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <dataPacketReceived+0x1dc>)
 8000d3e:	701a      	strb	r2, [r3, #0]
			propulsion_val_tab[1] = RxBuf[6];
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	799a      	ldrb	r2, [r3, #6]
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <dataPacketReceived+0x1dc>)
 8000d46:	705a      	strb	r2, [r3, #1]
			sprintf(strTemp, "PRP SET: %c%c\023", propulsion_val_tab[0], propulsion_val_tab[1]);
 8000d48:	4b27      	ldr	r3, [pc, #156]	; (8000de8 <dataPacketReceived+0x1dc>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <dataPacketReceived+0x1dc>)
 8000d50:	785b      	ldrb	r3, [r3, #1]
 8000d52:	f107 0008 	add.w	r0, r7, #8
 8000d56:	4925      	ldr	r1, [pc, #148]	; (8000dec <dataPacketReceived+0x1e0>)
 8000d58:	f001 fac4 	bl	80022e4 <siprintf>
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)(strTemp), sizeof(strTemp));
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <dataPacketReceived+0x198>)
 8000d5e:	6859      	ldr	r1, [r3, #4]
 8000d60:	f107 0208 	add.w	r2, r7, #8
 8000d64:	230d      	movs	r3, #13
 8000d66:	2001      	movs	r0, #1
 8000d68:	f001 f8a5 	bl	8001eb6 <W6100_TransmitData>
			canMessages[can_propulsion_ctrl].data[5] = propulsion_val_tab[0];
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <dataPacketReceived+0x1dc>)
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <dataPacketReceived+0x1b8>)
 8000d72:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
			canMessages[can_propulsion_ctrl].data[6] = propulsion_val_tab[1];
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <dataPacketReceived+0x1dc>)
 8000d78:	785a      	ldrb	r2, [r3, #1]
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <dataPacketReceived+0x1b8>)
 8000d7c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			Can_Tx_Msg(&canMessages[can_propulsion_ctrl]);
 8000d80:	481b      	ldr	r0, [pc, #108]	; (8000df0 <dataPacketReceived+0x1e4>)
 8000d82:	f7ff fae9 	bl	8000358 <Can_Tx_Msg>
}
 8000d86:	e006      	b.n	8000d96 <dataPacketReceived+0x18a>
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Command unknown...\n", sizeof("Command unknown...\n"));
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <dataPacketReceived+0x198>)
 8000d8a:	6859      	ldr	r1, [r3, #4]
 8000d8c:	2314      	movs	r3, #20
 8000d8e:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <dataPacketReceived+0x1e8>)
 8000d90:	2001      	movs	r0, #1
 8000d92:	f001 f890 	bl	8001eb6 <W6100_TransmitData>
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	08002d70 	.word	0x08002d70
 8000da4:	200002c0 	.word	0x200002c0
 8000da8:	08002d78 	.word	0x08002d78
 8000dac:	20000240 	.word	0x20000240
 8000db0:	08002d84 	.word	0x08002d84
 8000db4:	08002d90 	.word	0x08002d90
 8000db8:	08002d9c 	.word	0x08002d9c
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	08002da4 	.word	0x08002da4
 8000dc4:	20000210 	.word	0x20000210
 8000dc8:	08002db4 	.word	0x08002db4
 8000dcc:	08002dbc 	.word	0x08002dbc
 8000dd0:	20000228 	.word	0x20000228
 8000dd4:	08002dcc 	.word	0x08002dcc
 8000dd8:	200002bc 	.word	0x200002bc
 8000ddc:	08002dd8 	.word	0x08002dd8
 8000de0:	20000288 	.word	0x20000288
 8000de4:	08002de8 	.word	0x08002de8
 8000de8:	200002b8 	.word	0x200002b8
 8000dec:	08002df4 	.word	0x08002df4
 8000df0:	200002a0 	.word	0x200002a0
 8000df4:	08002e04 	.word	0x08002e04

08000df8 <canMessageReceived>:

void canMessageReceived(CAN_MESSAGE msg) {
 8000df8:	b084      	sub	sp, #16
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	f107 0c08 	add.w	ip, r7, #8
 8000e02:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	// Status request Handler
	if (!strcmp(msg.data,"br_0000")) {
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	493c      	ldr	r1, [pc, #240]	; (8000efc <canMessageReceived+0x104>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff f9df 	bl	80001d0 <strcmp>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d109      	bne.n	8000e2c <canMessageReceived+0x34>
		W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"BRK: OK\n", sizeof("BRK: OK\n"));
 8000e18:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <canMessageReceived+0x108>)
 8000e1a:	6859      	ldr	r1, [r3, #4]
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	4a39      	ldr	r2, [pc, #228]	; (8000f04 <canMessageReceived+0x10c>)
 8000e20:	2001      	movs	r0, #1
 8000e22:	f001 f848 	bl	8001eb6 <W6100_TransmitData>
		Can_Tx_Msg(&canMessages[can_status_ok]);
 8000e26:	4838      	ldr	r0, [pc, #224]	; (8000f08 <canMessageReceived+0x110>)
 8000e28:	f7ff fa96 	bl	8000358 <Can_Tx_Msg>
	}
	if (!strcmp(msg.data,"pr_0000")) {
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	4936      	ldr	r1, [pc, #216]	; (8000f0c <canMessageReceived+0x114>)
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff f9cc 	bl	80001d0 <strcmp>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d109      	bne.n	8000e52 <canMessageReceived+0x5a>
		W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"PRP: OK\n", sizeof("PRP: OK\n"));
 8000e3e:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <canMessageReceived+0x108>)
 8000e40:	6859      	ldr	r1, [r3, #4]
 8000e42:	2309      	movs	r3, #9
 8000e44:	4a32      	ldr	r2, [pc, #200]	; (8000f10 <canMessageReceived+0x118>)
 8000e46:	2001      	movs	r0, #1
 8000e48:	f001 f835 	bl	8001eb6 <W6100_TransmitData>
		Can_Tx_Msg(&canMessages[can_status_ok]);
 8000e4c:	482e      	ldr	r0, [pc, #184]	; (8000f08 <canMessageReceived+0x110>)
 8000e4e:	f7ff fa83 	bl	8000358 <Can_Tx_Msg>
	}
	if (!strcmp(msg.data,"br_1111")) {
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	492f      	ldr	r1, [pc, #188]	; (8000f14 <canMessageReceived+0x11c>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff f9b9 	bl	80001d0 <strcmp>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d109      	bne.n	8000e78 <canMessageReceived+0x80>
		W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"BRK: FAULT\n", sizeof("BRK: FAULT\n"));
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <canMessageReceived+0x108>)
 8000e66:	6859      	ldr	r1, [r3, #4]
 8000e68:	230c      	movs	r3, #12
 8000e6a:	4a2b      	ldr	r2, [pc, #172]	; (8000f18 <canMessageReceived+0x120>)
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f001 f822 	bl	8001eb6 <W6100_TransmitData>
		Can_Tx_Msg(&canMessages[can_status_fault]);
 8000e72:	482a      	ldr	r0, [pc, #168]	; (8000f1c <canMessageReceived+0x124>)
 8000e74:	f7ff fa70 	bl	8000358 <Can_Tx_Msg>
	}
	if (!strcmp(msg.data,"pr_1111")) {
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	4928      	ldr	r1, [pc, #160]	; (8000f20 <canMessageReceived+0x128>)
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff f9a6 	bl	80001d0 <strcmp>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d109      	bne.n	8000e9e <canMessageReceived+0xa6>
		W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"PRP: FAULT\n", sizeof("PRP: FAULT\n"));
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <canMessageReceived+0x108>)
 8000e8c:	6859      	ldr	r1, [r3, #4]
 8000e8e:	230c      	movs	r3, #12
 8000e90:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <canMessageReceived+0x12c>)
 8000e92:	2001      	movs	r0, #1
 8000e94:	f001 f80f 	bl	8001eb6 <W6100_TransmitData>
		Can_Tx_Msg(&canMessages[can_status_fault]);
 8000e98:	4820      	ldr	r0, [pc, #128]	; (8000f1c <canMessageReceived+0x124>)
 8000e9a:	f7ff fa5d 	bl	8000358 <Can_Tx_Msg>
	}
	if (!strncmp(msg.data,"br_b_xx", 5)) {
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	2205      	movs	r2, #5
 8000ea4:	4920      	ldr	r1, [pc, #128]	; (8000f28 <canMessageReceived+0x130>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fa3c 	bl	8002324 <strncmp>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d109      	bne.n	8000ec6 <canMessageReceived+0xce>
		W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"BRK: SUCCESS\n", sizeof("BRK: SUCCESS\n"));
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <canMessageReceived+0x108>)
 8000eb4:	6859      	ldr	r1, [r3, #4]
 8000eb6:	230e      	movs	r3, #14
 8000eb8:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <canMessageReceived+0x134>)
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f000 fffb 	bl	8001eb6 <W6100_TransmitData>
		Can_Tx_Msg(&canMessages[can_status_fault]);
 8000ec0:	4816      	ldr	r0, [pc, #88]	; (8000f1c <canMessageReceived+0x124>)
 8000ec2:	f7ff fa49 	bl	8000358 <Can_Tx_Msg>
	}
	if (!strncmp(msg.data,"pr_p_xx", 5)) {
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	2205      	movs	r2, #5
 8000ecc:	4918      	ldr	r1, [pc, #96]	; (8000f30 <canMessageReceived+0x138>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fa28 	bl	8002324 <strncmp>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d109      	bne.n	8000eee <canMessageReceived+0xf6>
		W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"PRP: SUCCESS\n", sizeof("PRP: SUCCESS\n"));
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <canMessageReceived+0x108>)
 8000edc:	6859      	ldr	r1, [r3, #4]
 8000ede:	230e      	movs	r3, #14
 8000ee0:	4a14      	ldr	r2, [pc, #80]	; (8000f34 <canMessageReceived+0x13c>)
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f000 ffe7 	bl	8001eb6 <W6100_TransmitData>
		Can_Tx_Msg(&canMessages[can_status_fault]);
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <canMessageReceived+0x124>)
 8000eea:	f7ff fa35 	bl	8000358 <Can_Tx_Msg>
	}

}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ef6:	b004      	add	sp, #16
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	08002e18 	.word	0x08002e18
 8000f00:	200002c0 	.word	0x200002c0
 8000f04:	08002e20 	.word	0x08002e20
 8000f08:	20000258 	.word	0x20000258
 8000f0c:	08002e2c 	.word	0x08002e2c
 8000f10:	08002e34 	.word	0x08002e34
 8000f14:	08002e40 	.word	0x08002e40
 8000f18:	08002e48 	.word	0x08002e48
 8000f1c:	20000270 	.word	0x20000270
 8000f20:	08002e54 	.word	0x08002e54
 8000f24:	08002e5c 	.word	0x08002e5c
 8000f28:	08002e68 	.word	0x08002e68
 8000f2c:	08002e70 	.word	0x08002e70
 8000f30:	08002e80 	.word	0x08002e80
 8000f34:	08002e88 	.word	0x08002e88

08000f38 <OpenControl>:

void OpenControl(char * command) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

	char * token;
	uint8_t AccelTime, DesiredSpeed, CruiseTime, BrakingTime;
	token = strtok(command, "+");
 8000f40:	497b      	ldr	r1, [pc, #492]	; (8001130 <OpenControl+0x1f8>)
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f001 fa00 	bl	8002348 <strtok>
 8000f48:	61b8      	str	r0, [r7, #24]
	token = strtok(NULL, "+");
 8000f4a:	4979      	ldr	r1, [pc, #484]	; (8001130 <OpenControl+0x1f8>)
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f001 f9fb 	bl	8002348 <strtok>
 8000f52:	61b8      	str	r0, [r7, #24]
//	AccelTime = atoi(token);
	AccelTime = 4;	// Default value
 8000f54:	2304      	movs	r3, #4
 8000f56:	75fb      	strb	r3, [r7, #23]
//	token = strtok(NULL, "+");
	DesiredSpeed = atoi(token);
 8000f58:	69b8      	ldr	r0, [r7, #24]
 8000f5a:	f001 f980 	bl	800225e <atoi>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	75bb      	strb	r3, [r7, #22]
	token = strtok(NULL, "+");
 8000f62:	4973      	ldr	r1, [pc, #460]	; (8001130 <OpenControl+0x1f8>)
 8000f64:	2000      	movs	r0, #0
 8000f66:	f001 f9ef 	bl	8002348 <strtok>
 8000f6a:	61b8      	str	r0, [r7, #24]
	CruiseTime = atoi(token);
 8000f6c:	69b8      	ldr	r0, [r7, #24]
 8000f6e:	f001 f976 	bl	800225e <atoi>
 8000f72:	4603      	mov	r3, r0
 8000f74:	757b      	strb	r3, [r7, #21]
	token = strtok(NULL, "+");
 8000f76:	496e      	ldr	r1, [pc, #440]	; (8001130 <OpenControl+0x1f8>)
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f001 f9e5 	bl	8002348 <strtok>
 8000f7e:	61b8      	str	r0, [r7, #24]
	BrakingTime = atoi(token);
 8000f80:	69b8      	ldr	r0, [r7, #24]
 8000f82:	f001 f96c 	bl	800225e <atoi>
 8000f86:	4603      	mov	r3, r0
 8000f88:	753b      	strb	r3, [r7, #20]

	// Brake OFF
	canMessages[can_brake_ctrl].data[5] = '1';
 8000f8a:	4b6a      	ldr	r3, [pc, #424]	; (8001134 <OpenControl+0x1fc>)
 8000f8c:	2231      	movs	r2, #49	; 0x31
 8000f8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	canMessages[can_brake_ctrl].data[6] = '0';
 8000f92:	4b68      	ldr	r3, [pc, #416]	; (8001134 <OpenControl+0x1fc>)
 8000f94:	2230      	movs	r2, #48	; 0x30
 8000f96:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	Can_Tx_Msg(&canMessages[can_brake_ctrl]);
 8000f9a:	4867      	ldr	r0, [pc, #412]	; (8001138 <OpenControl+0x200>)
 8000f9c:	f7ff f9dc 	bl	8000358 <Can_Tx_Msg>
	delay_ms(4000);
 8000fa0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000fa4:	f000 fa5e 	bl	8001464 <delay_ms>
	// Acceleration process
	unsigned int delSetAccel = ((30-DesiredSpeed)/AccelTime)*1000;
 8000fa8:	7dbb      	ldrb	r3, [r7, #22]
 8000faa:	f1c3 021e 	rsb	r2, r3, #30
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fb8:	fb02 f303 	mul.w	r3, r2, r3
 8000fbc:	613b      	str	r3, [r7, #16]
	unsigned int delSetBrake = ((30-DesiredSpeed)/BrakingTime)*1000;
 8000fbe:	7dbb      	ldrb	r3, [r7, #22]
 8000fc0:	f1c3 021e 	rsb	r2, r3, #30
 8000fc4:	7d3b      	ldrb	r3, [r7, #20]
 8000fc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	60fb      	str	r3, [r7, #12]
	char pValDec, pValUni;
	uint8_t i;
	for (i = 30; i>DesiredSpeed; i--) {
 8000fd4:	231e      	movs	r3, #30
 8000fd6:	777b      	strb	r3, [r7, #29]
 8000fd8:	e039      	b.n	800104e <OpenControl+0x116>
		if (i<10) {
 8000fda:	7f7b      	ldrb	r3, [r7, #29]
 8000fdc:	2b09      	cmp	r3, #9
 8000fde:	d80f      	bhi.n	8001000 <OpenControl+0xc8>
			pValDec = '0';
 8000fe0:	2330      	movs	r3, #48	; 0x30
 8000fe2:	77fb      	strb	r3, [r7, #31]
			pValUni = ((i % 10)+'0');
 8000fe4:	7f7a      	ldrb	r2, [r7, #29]
 8000fe6:	4b55      	ldr	r3, [pc, #340]	; (800113c <OpenControl+0x204>)
 8000fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fec:	08d9      	lsrs	r1, r3, #3
 8000fee:	460b      	mov	r3, r1
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	3330      	adds	r3, #48	; 0x30
 8000ffc:	77bb      	strb	r3, [r7, #30]
 8000ffe:	e014      	b.n	800102a <OpenControl+0xf2>

		} else {
			pValDec = ((i/10) + '0');
 8001000:	7f7b      	ldrb	r3, [r7, #29]
 8001002:	4a4e      	ldr	r2, [pc, #312]	; (800113c <OpenControl+0x204>)
 8001004:	fba2 2303 	umull	r2, r3, r2, r3
 8001008:	08db      	lsrs	r3, r3, #3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	3330      	adds	r3, #48	; 0x30
 800100e:	77fb      	strb	r3, [r7, #31]
			pValUni = ((i % 10)+'0');
 8001010:	7f7a      	ldrb	r2, [r7, #29]
 8001012:	4b4a      	ldr	r3, [pc, #296]	; (800113c <OpenControl+0x204>)
 8001014:	fba3 1302 	umull	r1, r3, r3, r2
 8001018:	08d9      	lsrs	r1, r3, #3
 800101a:	460b      	mov	r3, r1
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	3330      	adds	r3, #48	; 0x30
 8001028:	77bb      	strb	r3, [r7, #30]
		}
		canMessages[can_propulsion_ctrl].data[5] = pValDec;
 800102a:	4a42      	ldr	r2, [pc, #264]	; (8001134 <OpenControl+0x1fc>)
 800102c:	7ffb      	ldrb	r3, [r7, #31]
 800102e:	f882 3099 	strb.w	r3, [r2, #153]	; 0x99
		canMessages[can_propulsion_ctrl].data[6] = pValUni;
 8001032:	4a40      	ldr	r2, [pc, #256]	; (8001134 <OpenControl+0x1fc>)
 8001034:	7fbb      	ldrb	r3, [r7, #30]
 8001036:	f882 309a 	strb.w	r3, [r2, #154]	; 0x9a
		Can_Tx_Msg(&canMessages[can_propulsion_ctrl]);
 800103a:	4841      	ldr	r0, [pc, #260]	; (8001140 <OpenControl+0x208>)
 800103c:	f7ff f98c 	bl	8000358 <Can_Tx_Msg>
		delay_ms(delSetAccel);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fa0e 	bl	8001464 <delay_ms>
	for (i = 30; i>DesiredSpeed; i--) {
 8001048:	7f7b      	ldrb	r3, [r7, #29]
 800104a:	3b01      	subs	r3, #1
 800104c:	777b      	strb	r3, [r7, #29]
 800104e:	7f7a      	ldrb	r2, [r7, #29]
 8001050:	7dbb      	ldrb	r3, [r7, #22]
 8001052:	429a      	cmp	r2, r3
 8001054:	d8c1      	bhi.n	8000fda <OpenControl+0xa2>
	}

	// Cruise Time (no feedback signal)
	delay_ms(CruiseTime * 1000);
 8001056:	7d7b      	ldrb	r3, [r7, #21]
 8001058:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f000 f9ff 	bl	8001464 <delay_ms>

	// Deceleration
	for (i = DesiredSpeed; i<30; i++) {
 8001066:	7dbb      	ldrb	r3, [r7, #22]
 8001068:	777b      	strb	r3, [r7, #29]
 800106a:	e03c      	b.n	80010e6 <OpenControl+0x1ae>
		if (i<10) {
 800106c:	7f7b      	ldrb	r3, [r7, #29]
 800106e:	2b09      	cmp	r3, #9
 8001070:	d814      	bhi.n	800109c <OpenControl+0x164>
			canMessages[can_propulsion_ctrl].data[5] = '0';
 8001072:	4b30      	ldr	r3, [pc, #192]	; (8001134 <OpenControl+0x1fc>)
 8001074:	2230      	movs	r2, #48	; 0x30
 8001076:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
			canMessages[can_propulsion_ctrl].data[6] = ((i % 10)+'0');
 800107a:	7f7a      	ldrb	r2, [r7, #29]
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <OpenControl+0x204>)
 800107e:	fba3 1302 	umull	r1, r3, r3, r2
 8001082:	08d9      	lsrs	r1, r3, #3
 8001084:	460b      	mov	r3, r1
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	3330      	adds	r3, #48	; 0x30
 8001092:	b2da      	uxtb	r2, r3
 8001094:	4b27      	ldr	r3, [pc, #156]	; (8001134 <OpenControl+0x1fc>)
 8001096:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 800109a:	e01a      	b.n	80010d2 <OpenControl+0x19a>
		} else {
			canMessages[can_propulsion_ctrl].data[5] = ((i/10)+'0');
 800109c:	7f7b      	ldrb	r3, [r7, #29]
 800109e:	4a27      	ldr	r2, [pc, #156]	; (800113c <OpenControl+0x204>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	3330      	adds	r3, #48	; 0x30
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <OpenControl+0x1fc>)
 80010ae:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
			canMessages[can_propulsion_ctrl].data[6] = ((i % 10)+'0');
 80010b2:	7f7a      	ldrb	r2, [r7, #29]
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <OpenControl+0x204>)
 80010b6:	fba3 1302 	umull	r1, r3, r3, r2
 80010ba:	08d9      	lsrs	r1, r3, #3
 80010bc:	460b      	mov	r3, r1
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	3330      	adds	r3, #48	; 0x30
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <OpenControl+0x1fc>)
 80010ce:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		}
		Can_Tx_Msg(&canMessages[can_propulsion_ctrl]);
 80010d2:	481b      	ldr	r0, [pc, #108]	; (8001140 <OpenControl+0x208>)
 80010d4:	f7ff f940 	bl	8000358 <Can_Tx_Msg>

		delay_ms(delSetBrake);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f9c2 	bl	8001464 <delay_ms>
	for (i = DesiredSpeed; i<30; i++) {
 80010e0:	7f7b      	ldrb	r3, [r7, #29]
 80010e2:	3301      	adds	r3, #1
 80010e4:	777b      	strb	r3, [r7, #29]
 80010e6:	7f7b      	ldrb	r3, [r7, #29]
 80010e8:	2b1d      	cmp	r3, #29
 80010ea:	d9bf      	bls.n	800106c <OpenControl+0x134>
	}
	canMessages[can_propulsion_ctrl].data[5] = '0';
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <OpenControl+0x1fc>)
 80010ee:	2230      	movs	r2, #48	; 0x30
 80010f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	canMessages[can_propulsion_ctrl].data[6] = '0';
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <OpenControl+0x1fc>)
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	Can_Tx_Msg(&canMessages[can_propulsion_ctrl]);
 80010fc:	4810      	ldr	r0, [pc, #64]	; (8001140 <OpenControl+0x208>)
 80010fe:	f7ff f92b 	bl	8000358 <Can_Tx_Msg>
	// Brake ON
	canMessages[can_brake_ctrl].data[5] = '2';
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <OpenControl+0x1fc>)
 8001104:	2232      	movs	r2, #50	; 0x32
 8001106:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	canMessages[can_brake_ctrl].data[6] = '0';
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <OpenControl+0x1fc>)
 800110c:	2230      	movs	r2, #48	; 0x30
 800110e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	Can_Tx_Msg(&canMessages[can_brake_ctrl]);
 8001112:	4809      	ldr	r0, [pc, #36]	; (8001138 <OpenControl+0x200>)
 8001114:	f7ff f920 	bl	8000358 <Can_Tx_Msg>
	W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Cruise Complete", sizeof("Cruise Complete"));
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <OpenControl+0x20c>)
 800111a:	6859      	ldr	r1, [r3, #4]
 800111c:	2310      	movs	r3, #16
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <OpenControl+0x210>)
 8001120:	2001      	movs	r0, #1
 8001122:	f000 fec8 	bl	8001eb6 <W6100_TransmitData>

}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	08002e98 	.word	0x08002e98
 8001134:	20000210 	.word	0x20000210
 8001138:	20000288 	.word	0x20000288
 800113c:	cccccccd 	.word	0xcccccccd
 8001140:	200002a0 	.word	0x200002a0
 8001144:	200002c0 	.word	0x200002c0
 8001148:	08002e9c 	.word	0x08002e9c

0800114c <ClosedControl>:


void ClosedControl(char * command) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	char * token;
	uint8_t AccelTime, DesiredSpeed, CruiseDistance, BrakingTime;
	token = strtok(command, "+");
 8001154:	499f      	ldr	r1, [pc, #636]	; (80013d4 <ClosedControl+0x288>)
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f001 f8f6 	bl	8002348 <strtok>
 800115c:	61b8      	str	r0, [r7, #24]
	token = strtok(NULL, "+");
 800115e:	499d      	ldr	r1, [pc, #628]	; (80013d4 <ClosedControl+0x288>)
 8001160:	2000      	movs	r0, #0
 8001162:	f001 f8f1 	bl	8002348 <strtok>
 8001166:	61b8      	str	r0, [r7, #24]
//	AccelTime = atoi(token);
	AccelTime = 4;		// Default value
 8001168:	2304      	movs	r3, #4
 800116a:	75fb      	strb	r3, [r7, #23]
//	token = strtok(NULL, "+");
	DesiredSpeed = atoi(token);
 800116c:	69b8      	ldr	r0, [r7, #24]
 800116e:	f001 f876 	bl	800225e <atoi>
 8001172:	4603      	mov	r3, r0
 8001174:	75bb      	strb	r3, [r7, #22]
	token = strtok(NULL, "+");
 8001176:	4997      	ldr	r1, [pc, #604]	; (80013d4 <ClosedControl+0x288>)
 8001178:	2000      	movs	r0, #0
 800117a:	f001 f8e5 	bl	8002348 <strtok>
 800117e:	61b8      	str	r0, [r7, #24]
	CruiseDistance = atoi(token);
 8001180:	69b8      	ldr	r0, [r7, #24]
 8001182:	f001 f86c 	bl	800225e <atoi>
 8001186:	4603      	mov	r3, r0
 8001188:	757b      	strb	r3, [r7, #21]
	token = strtok(NULL, "+");
 800118a:	4992      	ldr	r1, [pc, #584]	; (80013d4 <ClosedControl+0x288>)
 800118c:	2000      	movs	r0, #0
 800118e:	f001 f8db 	bl	8002348 <strtok>
 8001192:	61b8      	str	r0, [r7, #24]
	BrakingTime = atoi(token);
 8001194:	69b8      	ldr	r0, [r7, #24]
 8001196:	f001 f862 	bl	800225e <atoi>
 800119a:	4603      	mov	r3, r0
 800119c:	753b      	strb	r3, [r7, #20]

	// Brake OFF
	canMessages[can_brake_ctrl].data[5] = '1';
 800119e:	4b8e      	ldr	r3, [pc, #568]	; (80013d8 <ClosedControl+0x28c>)
 80011a0:	2231      	movs	r2, #49	; 0x31
 80011a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	canMessages[can_brake_ctrl].data[6] = '0';
 80011a6:	4b8c      	ldr	r3, [pc, #560]	; (80013d8 <ClosedControl+0x28c>)
 80011a8:	2230      	movs	r2, #48	; 0x30
 80011aa:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	Can_Tx_Msg(&canMessages[can_brake_ctrl]);
 80011ae:	488b      	ldr	r0, [pc, #556]	; (80013dc <ClosedControl+0x290>)
 80011b0:	f7ff f8d2 	bl	8000358 <Can_Tx_Msg>
	delay_ms(4000);
 80011b4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80011b8:	f000 f954 	bl	8001464 <delay_ms>
	// Enable IO-Link sensor
	GPIOB->ODR |= GPIO_ODR_OD14;
 80011bc:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <ClosedControl+0x294>)
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	4a87      	ldr	r2, [pc, #540]	; (80013e0 <ClosedControl+0x294>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	6153      	str	r3, [r2, #20]
	// Acceleration process
	unsigned int delSetAccel = ((30-DesiredSpeed)/AccelTime)*1000;
 80011c8:	7dbb      	ldrb	r3, [r7, #22]
 80011ca:	f1c3 021e 	rsb	r2, r3, #30
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80011d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	613b      	str	r3, [r7, #16]
	unsigned int delSetBrake = ((30-DesiredSpeed)/BrakingTime)*1000;
 80011de:	7dbb      	ldrb	r3, [r7, #22]
 80011e0:	f1c3 021e 	rsb	r2, r3, #30
 80011e4:	7d3b      	ldrb	r3, [r7, #20]
 80011e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ee:	fb02 f303 	mul.w	r3, r2, r3
 80011f2:	60fb      	str	r3, [r7, #12]
	char pValDec, pValUni;
	uint8_t i;
	for (i = 30; i>DesiredSpeed; i--) {
 80011f4:	231e      	movs	r3, #30
 80011f6:	777b      	strb	r3, [r7, #29]
 80011f8:	e039      	b.n	800126e <ClosedControl+0x122>
		if (i<10) {
 80011fa:	7f7b      	ldrb	r3, [r7, #29]
 80011fc:	2b09      	cmp	r3, #9
 80011fe:	d80f      	bhi.n	8001220 <ClosedControl+0xd4>
			pValDec = '0';
 8001200:	2330      	movs	r3, #48	; 0x30
 8001202:	77fb      	strb	r3, [r7, #31]
			pValUni = ((i % 10)+'0');
 8001204:	7f7a      	ldrb	r2, [r7, #29]
 8001206:	4b77      	ldr	r3, [pc, #476]	; (80013e4 <ClosedControl+0x298>)
 8001208:	fba3 1302 	umull	r1, r3, r3, r2
 800120c:	08d9      	lsrs	r1, r3, #3
 800120e:	460b      	mov	r3, r1
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	3330      	adds	r3, #48	; 0x30
 800121c:	77bb      	strb	r3, [r7, #30]
 800121e:	e014      	b.n	800124a <ClosedControl+0xfe>

		} else {
			pValDec = ((i/10) + '0');
 8001220:	7f7b      	ldrb	r3, [r7, #29]
 8001222:	4a70      	ldr	r2, [pc, #448]	; (80013e4 <ClosedControl+0x298>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	08db      	lsrs	r3, r3, #3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	3330      	adds	r3, #48	; 0x30
 800122e:	77fb      	strb	r3, [r7, #31]
			pValUni = ((i % 10)+'0');
 8001230:	7f7a      	ldrb	r2, [r7, #29]
 8001232:	4b6c      	ldr	r3, [pc, #432]	; (80013e4 <ClosedControl+0x298>)
 8001234:	fba3 1302 	umull	r1, r3, r3, r2
 8001238:	08d9      	lsrs	r1, r3, #3
 800123a:	460b      	mov	r3, r1
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	3330      	adds	r3, #48	; 0x30
 8001248:	77bb      	strb	r3, [r7, #30]
		}
		canMessages[can_propulsion_ctrl].data[5] = pValDec;
 800124a:	4a63      	ldr	r2, [pc, #396]	; (80013d8 <ClosedControl+0x28c>)
 800124c:	7ffb      	ldrb	r3, [r7, #31]
 800124e:	f882 3099 	strb.w	r3, [r2, #153]	; 0x99
		canMessages[can_propulsion_ctrl].data[6] = pValUni;
 8001252:	4a61      	ldr	r2, [pc, #388]	; (80013d8 <ClosedControl+0x28c>)
 8001254:	7fbb      	ldrb	r3, [r7, #30]
 8001256:	f882 309a 	strb.w	r3, [r2, #154]	; 0x9a
		Can_Tx_Msg(&canMessages[can_propulsion_ctrl]);
 800125a:	4863      	ldr	r0, [pc, #396]	; (80013e8 <ClosedControl+0x29c>)
 800125c:	f7ff f87c 	bl	8000358 <Can_Tx_Msg>
		delay_ms(delSetAccel);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f8fe 	bl	8001464 <delay_ms>
	for (i = 30; i>DesiredSpeed; i--) {
 8001268:	7f7b      	ldrb	r3, [r7, #29]
 800126a:	3b01      	subs	r3, #1
 800126c:	777b      	strb	r3, [r7, #29]
 800126e:	7f7a      	ldrb	r2, [r7, #29]
 8001270:	7dbb      	ldrb	r3, [r7, #22]
 8001272:	429a      	cmp	r2, r3
 8001274:	d8c1      	bhi.n	80011fa <ClosedControl+0xae>
	}

	// Cruise Time with adjusted photoelectric feedback signal
	for (uint8_t d = 0; d < CruiseDistance; d++) {
 8001276:	2300      	movs	r3, #0
 8001278:	773b      	strb	r3, [r7, #28]
 800127a:	e03d      	b.n	80012f8 <ClosedControl+0x1ac>
		delay_ms(delSetAccel);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f8f0 	bl	8001464 <delay_ms>
		GPIOC->ODR &= ~GPIO_ODR_OD11;
 8001284:	4b59      	ldr	r3, [pc, #356]	; (80013ec <ClosedControl+0x2a0>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	4a58      	ldr	r2, [pc, #352]	; (80013ec <ClosedControl+0x2a0>)
 800128a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800128e:	6153      	str	r3, [r2, #20]
		if (!(GPIOA->IDR & GPIO_IDR_ID3)) {
 8001290:	4b57      	ldr	r3, [pc, #348]	; (80013f0 <ClosedControl+0x2a4>)
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d106      	bne.n	80012aa <ClosedControl+0x15e>
			GPIOC->ODR |= GPIO_ODR_OD11;
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <ClosedControl+0x2a0>)
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	4a52      	ldr	r2, [pc, #328]	; (80013ec <ClosedControl+0x2a0>)
 80012a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012a6:	6153      	str	r3, [r2, #20]
 80012a8:	e01d      	b.n	80012e6 <ClosedControl+0x19a>

		} else {
			delay_ms(delSetAccel);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 f8d9 	bl	8001464 <delay_ms>
			GPIOC->ODR |= GPIO_ODR_OD11;
 80012b2:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <ClosedControl+0x2a0>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	4a4d      	ldr	r2, [pc, #308]	; (80013ec <ClosedControl+0x2a0>)
 80012b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012bc:	6153      	str	r3, [r2, #20]
			GPIOC->ODR &= ~GPIO_ODR_OD12;
 80012be:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <ClosedControl+0x2a0>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	4a4a      	ldr	r2, [pc, #296]	; (80013ec <ClosedControl+0x2a0>)
 80012c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012c8:	6153      	str	r3, [r2, #20]
			while(!(GPIOA->IDR & GPIO_IDR_ID3));	// Waiting for Navigation Aid pass
 80012ca:	bf00      	nop
 80012cc:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <ClosedControl+0x2a4>)
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f9      	beq.n	80012cc <ClosedControl+0x180>
			while((GPIOA->IDR & GPIO_IDR_ID3));
 80012d8:	bf00      	nop
 80012da:	4b45      	ldr	r3, [pc, #276]	; (80013f0 <ClosedControl+0x2a4>)
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f9      	bne.n	80012da <ClosedControl+0x18e>
		}
		GPIOC->ODR |= GPIO_ODR_OD11 | GPIO_ODR_OD12;
 80012e6:	4b41      	ldr	r3, [pc, #260]	; (80013ec <ClosedControl+0x2a0>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a40      	ldr	r2, [pc, #256]	; (80013ec <ClosedControl+0x2a0>)
 80012ec:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 80012f0:	6153      	str	r3, [r2, #20]
	for (uint8_t d = 0; d < CruiseDistance; d++) {
 80012f2:	7f3b      	ldrb	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	773b      	strb	r3, [r7, #28]
 80012f8:	7f3a      	ldrb	r2, [r7, #28]
 80012fa:	7d7b      	ldrb	r3, [r7, #21]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3bd      	bcc.n	800127c <ClosedControl+0x130>
	}
	// Disable IO-Link sensor
	GPIOB->ODR &= ~GPIO_ODR_OD14;
 8001300:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <ClosedControl+0x294>)
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	4a36      	ldr	r2, [pc, #216]	; (80013e0 <ClosedControl+0x294>)
 8001306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800130a:	6153      	str	r3, [r2, #20]
	// Deceleration process
	for (i = DesiredSpeed; i<30; i++) {
 800130c:	7dbb      	ldrb	r3, [r7, #22]
 800130e:	777b      	strb	r3, [r7, #29]
 8001310:	e03c      	b.n	800138c <ClosedControl+0x240>
		if (i<10) {
 8001312:	7f7b      	ldrb	r3, [r7, #29]
 8001314:	2b09      	cmp	r3, #9
 8001316:	d814      	bhi.n	8001342 <ClosedControl+0x1f6>
			canMessages[can_propulsion_ctrl].data[5] = '0';
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <ClosedControl+0x28c>)
 800131a:	2230      	movs	r2, #48	; 0x30
 800131c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
			canMessages[can_propulsion_ctrl].data[6] = ((i % 10)+'0');
 8001320:	7f7a      	ldrb	r2, [r7, #29]
 8001322:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <ClosedControl+0x298>)
 8001324:	fba3 1302 	umull	r1, r3, r3, r2
 8001328:	08d9      	lsrs	r1, r3, #3
 800132a:	460b      	mov	r3, r1
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	3330      	adds	r3, #48	; 0x30
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <ClosedControl+0x28c>)
 800133c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8001340:	e01a      	b.n	8001378 <ClosedControl+0x22c>
		} else {
			canMessages[can_propulsion_ctrl].data[5] = ((i/10)+'0');
 8001342:	7f7b      	ldrb	r3, [r7, #29]
 8001344:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <ClosedControl+0x298>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	08db      	lsrs	r3, r3, #3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	3330      	adds	r3, #48	; 0x30
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <ClosedControl+0x28c>)
 8001354:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
			canMessages[can_propulsion_ctrl].data[6] = ((i % 10)+'0');
 8001358:	7f7a      	ldrb	r2, [r7, #29]
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <ClosedControl+0x298>)
 800135c:	fba3 1302 	umull	r1, r3, r3, r2
 8001360:	08d9      	lsrs	r1, r3, #3
 8001362:	460b      	mov	r3, r1
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	440b      	add	r3, r1
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	3330      	adds	r3, #48	; 0x30
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <ClosedControl+0x28c>)
 8001374:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
		}
		Can_Tx_Msg(&canMessages[can_propulsion_ctrl]);
 8001378:	481b      	ldr	r0, [pc, #108]	; (80013e8 <ClosedControl+0x29c>)
 800137a:	f7fe ffed 	bl	8000358 <Can_Tx_Msg>

		delay_ms(delSetBrake);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f86f 	bl	8001464 <delay_ms>
	for (i = DesiredSpeed; i<30; i++) {
 8001386:	7f7b      	ldrb	r3, [r7, #29]
 8001388:	3301      	adds	r3, #1
 800138a:	777b      	strb	r3, [r7, #29]
 800138c:	7f7b      	ldrb	r3, [r7, #29]
 800138e:	2b1d      	cmp	r3, #29
 8001390:	d9bf      	bls.n	8001312 <ClosedControl+0x1c6>
	}
	canMessages[can_propulsion_ctrl].data[5] = '0';
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <ClosedControl+0x28c>)
 8001394:	2230      	movs	r2, #48	; 0x30
 8001396:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	canMessages[can_propulsion_ctrl].data[6] = '0';
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <ClosedControl+0x28c>)
 800139c:	2230      	movs	r2, #48	; 0x30
 800139e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
	Can_Tx_Msg(&canMessages[can_propulsion_ctrl]);
 80013a2:	4811      	ldr	r0, [pc, #68]	; (80013e8 <ClosedControl+0x29c>)
 80013a4:	f7fe ffd8 	bl	8000358 <Can_Tx_Msg>
	// Brake ON
	canMessages[can_brake_ctrl].data[5] = '2';
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <ClosedControl+0x28c>)
 80013aa:	2232      	movs	r2, #50	; 0x32
 80013ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	canMessages[can_brake_ctrl].data[6] = '0';
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <ClosedControl+0x28c>)
 80013b2:	2230      	movs	r2, #48	; 0x30
 80013b4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	Can_Tx_Msg(&canMessages[can_brake_ctrl]);
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <ClosedControl+0x290>)
 80013ba:	f7fe ffcd 	bl	8000358 <Can_Tx_Msg>
	W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Cruise Complete", sizeof("Cruise Complete"));
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <ClosedControl+0x2a8>)
 80013c0:	6859      	ldr	r1, [r3, #4]
 80013c2:	2310      	movs	r3, #16
 80013c4:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <ClosedControl+0x2ac>)
 80013c6:	2001      	movs	r0, #1
 80013c8:	f000 fd75 	bl	8001eb6 <W6100_TransmitData>
}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	08002e98 	.word	0x08002e98
 80013d8:	20000210 	.word	0x20000210
 80013dc:	20000288 	.word	0x20000288
 80013e0:	40020400 	.word	0x40020400
 80013e4:	cccccccd 	.word	0xcccccccd
 80013e8:	200002a0 	.word	0x200002a0
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	200002c0 	.word	0x200002c0
 80013f8:	08002e9c 	.word	0x08002e9c

080013fc <serverOffResponse>:

void serverOffResponse(uint8_t sck_nbr) {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR |= GPIO_ODR_OD8;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <serverOffResponse+0x30>)
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	4a08      	ldr	r2, [pc, #32]	; (800142c <serverOffResponse+0x30>)
 800140c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001410:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~GPIO_ODR_OD9;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <serverOffResponse+0x30>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <serverOffResponse+0x30>)
 8001418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800141c:	6153      	str	r3, [r2, #20]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40020800 	.word	0x40020800

08001430 <serverStartResponse>:

void serverStartResponse(uint8_t sck_nbr) {
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR &= ~GPIO_ODR_OD8;
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <serverStartResponse+0x30>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <serverStartResponse+0x30>)
 8001440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001444:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= GPIO_ODR_OD9;
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <serverStartResponse+0x30>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <serverStartResponse+0x30>)
 800144c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001450:	6153      	str	r3, [r2, #20]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40020800 	.word	0x40020800

08001464 <delay_ms>:
void setBrakeVal(uint8_t value) {
	itoa(value, brake_val_tab, 10);
}


void delay_ms(int ms) {
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	sysTicks = 0;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <delay_ms+0x28>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
	while(sysTicks < ms);
 8001472:	bf00      	nop
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <delay_ms+0x28>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	dcfa      	bgt.n	8001474 <delay_ms+0x10>
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200002c8 	.word	0x200002c8

08001490 <SysTick_Handler>:


__attribute__((interrupt)) void SysTick_Handler(void){
 8001490:	4668      	mov	r0, sp
 8001492:	f020 0107 	bic.w	r1, r0, #7
 8001496:	468d      	mov	sp, r1
 8001498:	b481      	push	{r0, r7}
 800149a:	af00      	add	r7, sp, #0
	sysTicks++;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SysTick_Handler+0x20>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <SysTick_Handler+0x20>)
 80014a4:	6013      	str	r3, [r2, #0]
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc81      	pop	{r0, r7}
 80014ac:	4685      	mov	sp, r0
 80014ae:	4770      	bx	lr
 80014b0:	200002c8 	.word	0x200002c8

080014b4 <main>:
#include "control_sys.h"



int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0


	SystemRegisterCFG();			// Setup basic peripheral registers
 80014ba:	f7ff f9e5 	bl	8000888 <SystemRegisterCFG>
	canVariables(canMessages);		// Initialises CAN msg structures for the communication
 80014be:	4843      	ldr	r0, [pc, #268]	; (80015cc <main+0x118>)
 80014c0:	f7ff fae2 	bl	8000a88 <canVariables>

	registerSocketCloseCallback(serverOffResponse);		// Register callback function for server close
 80014c4:	4842      	ldr	r0, [pc, #264]	; (80015d0 <main+0x11c>)
 80014c6:	f000 fdf5 	bl	80020b4 <registerSocketCloseCallback>
	registerSocketOpenCallback(serverStartResponse);	// Register callback function for server start (socket connected)
 80014ca:	4842      	ldr	r0, [pc, #264]	; (80015d4 <main+0x120>)
 80014cc:	f000 fde2 	bl	8002094 <registerSocketOpenCallback>
	registerDataReceivedCallback(dataPacketReceived);	// Register callback function when data packets received
 80014d0:	4841      	ldr	r0, [pc, #260]	; (80015d8 <main+0x124>)
 80014d2:	f000 fdcf 	bl	8002074 <registerDataReceivedCallback>
	registerCanMsgRxCallback(canMessageReceived);
 80014d6:	4841      	ldr	r0, [pc, #260]	; (80015dc <main+0x128>)
 80014d8:	f7ff f8ae 	bl	8000638 <registerCanMsgRxCallback>

	GPIOC->ODR &= ~GPIO_ODR_OD9;						// Server RED LED ON
 80014dc:	4b40      	ldr	r3, [pc, #256]	; (80015e0 <main+0x12c>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	4a3f      	ldr	r2, [pc, #252]	; (80015e0 <main+0x12c>)
 80014e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014e6:	6153      	str	r3, [r2, #20]

	W6100_INIT();										// Initialise W6100 with basic network information
 80014e8:	f000 f9d3 	bl	8001892 <W6100_INIT>

	/* Socket 0 Configuration */
	uint8_t txTotalSize = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	75fb      	strb	r3, [r7, #23]
	uint8_t rxTotalSize = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i=0; i<7; i++) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	757b      	strb	r3, [r7, #21]
 80014f8:	e016      	b.n	8001528 <main+0x74>
		SPI_W6100_WSOCK(Sn_TX_BSR, 0x04, i, REG);		// assign 4 Kbytes TX buffer per SOCKET
 80014fa:	7d7a      	ldrb	r2, [r7, #21]
 80014fc:	2301      	movs	r3, #1
 80014fe:	2104      	movs	r1, #4
 8001500:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001504:	f000 f986 	bl	8001814 <SPI_W6100_WSOCK>
		SPI_W6100_WSOCK(Sn_RX_BSR, 0x04, i, REG);		// assign 4 Kbytes RX buffer per SOCKET
 8001508:	7d7a      	ldrb	r2, [r7, #21]
 800150a:	2301      	movs	r3, #1
 800150c:	2104      	movs	r1, #4
 800150e:	f44f 7008 	mov.w	r0, #544	; 0x220
 8001512:	f000 f97f 	bl	8001814 <SPI_W6100_WSOCK>
		txTotalSize += 0x04;
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	3304      	adds	r3, #4
 800151a:	75fb      	strb	r3, [r7, #23]
		rxTotalSize += 0x04;
 800151c:	7dbb      	ldrb	r3, [r7, #22]
 800151e:	3304      	adds	r3, #4
 8001520:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i=0; i<7; i++) {
 8001522:	7d7b      	ldrb	r3, [r7, #21]
 8001524:	3301      	adds	r3, #1
 8001526:	757b      	strb	r3, [r7, #21]
 8001528:	7d7b      	ldrb	r3, [r7, #21]
 800152a:	2b06      	cmp	r3, #6
 800152c:	d9e5      	bls.n	80014fa <main+0x46>
	}

	socket_dest_adr[0] = W6100_OpenTCPSocket(0, 5000);		// Open TCP socket 0 on port 5000 and return its destination address
 800152e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001532:	2000      	movs	r0, #0
 8001534:	f000 fb66 	bl	8001c04 <W6100_OpenTCPSocket>
 8001538:	4602      	mov	r2, r0
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <main+0x130>)
 800153c:	601a      	str	r2, [r3, #0]
	socket_dest_adr[1] = W6100_OpenTCPSocket(1, 5010);		// Open TCP socket 1 on port 5010 and return its destination address
 800153e:	f241 3192 	movw	r1, #5010	; 0x1392
 8001542:	2001      	movs	r0, #1
 8001544:	f000 fb5e 	bl	8001c04 <W6100_OpenTCPSocket>
 8001548:	4602      	mov	r2, r0
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <main+0x130>)
 800154c:	605a      	str	r2, [r3, #4]


	CanInit();
 800154e:	f7fe febd 	bl	80002cc <CanInit>

	Can_Set_Filter(0x00, STANDARD_FORMAT);
 8001552:	2100      	movs	r1, #0
 8001554:	2000      	movs	r0, #0
 8001556:	f7fe ffe3 	bl	8000520 <Can_Set_Filter>
	Can_Set_Filter(0x01, STANDARD_FORMAT);
 800155a:	2100      	movs	r1, #0
 800155c:	2001      	movs	r0, #1
 800155e:	f7fe ffdf 	bl	8000520 <Can_Set_Filter>

	int idxx = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
	char buf[15] = "";
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	f8c3 2007 	str.w	r2, [r3, #7]
	/* MAIN Loop */
	while (1) {

		// Navigation aid counter
		if (!(GPIOA->IDR & GPIO_IDR_ID3)) {
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <main+0x134>)
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d11d      	bne.n	80015be <main+0x10a>
			GPIOC->ODR &= ~GPIO_ODR_OD11;
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <main+0x12c>)
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	4a16      	ldr	r2, [pc, #88]	; (80015e0 <main+0x12c>)
 8001588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800158c:	6153      	str	r3, [r2, #20]
			idxx++;
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	3301      	adds	r3, #1
 8001592:	613b      	str	r3, [r7, #16]
			sprintf(buf, "aux:%i", idxx);
 8001594:	463b      	mov	r3, r7
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4914      	ldr	r1, [pc, #80]	; (80015ec <main+0x138>)
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fea2 	bl	80022e4 <siprintf>
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)buf, sizeof(buf));
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <main+0x130>)
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	463a      	mov	r2, r7
 80015a6:	230f      	movs	r3, #15
 80015a8:	2001      	movs	r0, #1
 80015aa:	f000 fc84 	bl	8001eb6 <W6100_TransmitData>
			while(!(GPIOA->IDR & GPIO_IDR_ID3));
 80015ae:	bf00      	nop
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <main+0x134>)
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f9      	beq.n	80015b0 <main+0xfc>
 80015bc:	e7db      	b.n	8001576 <main+0xc2>

		} else {
			GPIOC->ODR |= GPIO_ODR_OD11;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <main+0x12c>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <main+0x12c>)
 80015c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015c8:	6153      	str	r3, [r2, #20]
		if (!(GPIOA->IDR & GPIO_IDR_ID3)) {
 80015ca:	e7d4      	b.n	8001576 <main+0xc2>
 80015cc:	20000210 	.word	0x20000210
 80015d0:	080013fd 	.word	0x080013fd
 80015d4:	08001431 	.word	0x08001431
 80015d8:	08000c0d 	.word	0x08000c0d
 80015dc:	08000df9 	.word	0x08000df9
 80015e0:	40020800 	.word	0x40020800
 80015e4:	200002c0 	.word	0x200002c0
 80015e8:	40020000 	.word	0x40020000
 80015ec:	08002eac 	.word	0x08002eac

080015f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f8:	4a14      	ldr	r2, [pc, #80]	; (800164c <_sbrk+0x5c>)
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <_sbrk+0x60>)
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <_sbrk+0x64>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <_sbrk+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	429a      	cmp	r2, r3
 800161e:	d207      	bcs.n	8001630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001620:	f000 fe22 	bl	8002268 <__errno>
 8001624:	4602      	mov	r2, r0
 8001626:	230c      	movs	r3, #12
 8001628:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	e009      	b.n	8001644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <_sbrk+0x64>)
 8001640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20020000 	.word	0x20020000
 8001650:	00000400 	.word	0x00000400
 8001654:	200001f8 	.word	0x200001f8
 8001658:	200002d0 	.word	0x200002d0

0800165c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <SystemInit+0x28>)
 8001662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001666:	4a07      	ldr	r2, [pc, #28]	; (8001684 <SystemInit+0x28>)
 8001668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800166c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SystemInit+0x28>)
 8001672:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001676:	609a      	str	r2, [r3, #8]
#endif
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <SPI_Eth_SS>:
 */
#include "w6100.h"



void SPI_Eth_SS(uint8_t state) {
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
	if (state) {
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <SPI_Eth_SS+0x1e>
		GPIOA->ODR &= ~GPIO_ODR_OD4;
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <SPI_Eth_SS+0x3c>)
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <SPI_Eth_SS+0x3c>)
 800169e:	f023 0310 	bic.w	r3, r3, #16
 80016a2:	6153      	str	r3, [r2, #20]
	}
	else if (!state) {
		GPIOA->ODR |= GPIO_ODR_OD4;
	}
}
 80016a4:	e008      	b.n	80016b8 <SPI_Eth_SS+0x30>
	else if (!state) {
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <SPI_Eth_SS+0x30>
		GPIOA->ODR |= GPIO_ODR_OD4;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SPI_Eth_SS+0x3c>)
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <SPI_Eth_SS+0x3c>)
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6153      	str	r3, [r2, #20]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40020000 	.word	0x40020000

080016c8 <SPI_Eth_RT>:

uint8_t SPI_Eth_RT(uint8_t data) {
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	while(!(SPI1->SR & SPI_SR_TXE));	// Wait for Tx buffer empty
 80016d2:	bf00      	nop
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <SPI_Eth_RT+0x40>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f9      	beq.n	80016d4 <SPI_Eth_RT+0xc>
	SPI1->DR = data;
 80016e0:	4a09      	ldr	r2, [pc, #36]	; (8001708 <SPI_Eth_RT+0x40>)
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_RXNE));	// Wait for Rx buffer not empty
 80016e6:	bf00      	nop
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <SPI_Eth_RT+0x40>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f9      	beq.n	80016e8 <SPI_Eth_RT+0x20>
	data = SPI1->DR;
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SPI_Eth_RT+0x40>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	71fb      	strb	r3, [r7, #7]
	return data;
 80016fa:	79fb      	ldrb	r3, [r7, #7]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40013000 	.word	0x40013000

0800170c <SPI_W6100_RCR>:

uint8_t SPI_W6100_RCR(uint16_t adr) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
	/* See Page 76 - W6100 datasheet */
	uint8_t dat;
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff ffb6 	bl	8001688 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	b29b      	uxth	r3, r3
 8001722:	b2db      	uxtb	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ffcf 	bl	80016c8 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ffca 	bl	80016c8 <SPI_Eth_RT>
	SPI_Eth_RT(0x00);		// Send Control Byte	[CR, Read, Variable Length Data Mode]
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff ffc7 	bl	80016c8 <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);	// Send garbage data to read the Common Register
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff ffc4 	bl	80016c8 <SPI_Eth_RT>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(OFF);		// NSS Slave Disable
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff ff9f 	bl	8001688 <SPI_Eth_SS>
	return dat;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <SPI_W6100_WCR>:

void SPI_W6100_WCR(uint16_t adr, uint8_t val) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	460a      	mov	r2, r1
 800175e:	80fb      	strh	r3, [r7, #6]
 8001760:	4613      	mov	r3, r2
 8001762:	717b      	strb	r3, [r7, #5]
	/* See Page 76 - W6100 datasheet */
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff ff8f 	bl	8001688 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	b29b      	uxth	r3, r3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ffa8 	bl	80016c8 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8001778:	88fb      	ldrh	r3, [r7, #6]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ffa3 	bl	80016c8 <SPI_Eth_RT>
	SPI_Eth_RT(0x04);		// Send Control Byte	[CR, Write, Variable Length Data Mode]
 8001782:	2004      	movs	r0, #4
 8001784:	f7ff ffa0 	bl	80016c8 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 8001788:	797b      	ldrb	r3, [r7, #5]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff9c 	bl	80016c8 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff ff79 	bl	8001688 <SPI_Eth_SS>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <SPI_W6100_RSOCK>:

uint8_t SPI_W6100_RSOCK(uint16_t adr, uint8_t socket_nbr, uint8_t block) {
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4603      	mov	r3, r0
 80017a6:	80fb      	strh	r3, [r7, #6]
 80017a8:	460b      	mov	r3, r1
 80017aa:	717b      	strb	r3, [r7, #5]
 80017ac:	4613      	mov	r3, r2
 80017ae:	713b      	strb	r3, [r7, #4]
	uint8_t dat;
	uint8_t cb_temp = 0x00;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 80017b4:	797b      	ldrb	r3, [r7, #5]
 80017b6:	015b      	lsls	r3, r3, #5
 80017b8:	b25a      	sxtb	r2, r3
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4313      	orrs	r3, r2
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 80017c4:	793b      	ldrb	r3, [r7, #4]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7ff ff57 	bl	8001688 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	b29b      	uxth	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff70 	bl	80016c8 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff6b 	bl	80016c8 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff67 	bl	80016c8 <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);		// Send garbage data to read the Common Register
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7ff ff64 	bl	80016c8 <SPI_Eth_RT>
 8001800:	4603      	mov	r3, r0
 8001802:	73bb      	strb	r3, [r7, #14]
	SPI_Eth_SS(OFF);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff ff3f 	bl	8001688 <SPI_Eth_SS>
	return dat;
 800180a:	7bbb      	ldrb	r3, [r7, #14]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <SPI_W6100_WSOCK>:

void SPI_W6100_WSOCK(uint16_t adr, uint8_t val, uint8_t socket_nbr, uint8_t block) {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	4604      	mov	r4, r0
 800181c:	4608      	mov	r0, r1
 800181e:	4611      	mov	r1, r2
 8001820:	461a      	mov	r2, r3
 8001822:	4623      	mov	r3, r4
 8001824:	80fb      	strh	r3, [r7, #6]
 8001826:	4603      	mov	r3, r0
 8001828:	717b      	strb	r3, [r7, #5]
 800182a:	460b      	mov	r3, r1
 800182c:	713b      	strb	r3, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	70fb      	strb	r3, [r7, #3]
	uint8_t cb_temp = 0x04;
 8001832:	2304      	movs	r3, #4
 8001834:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 8001836:	793b      	ldrb	r3, [r7, #4]
 8001838:	015b      	lsls	r3, r3, #5
 800183a:	b25a      	sxtb	r2, r3
 800183c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001840:	4313      	orrs	r3, r2
 8001842:	b25b      	sxtb	r3, r3
 8001844:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	b25a      	sxtb	r2, r3
 800184c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001850:	4313      	orrs	r3, r2
 8001852:	b25b      	sxtb	r3, r3
 8001854:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8001856:	2001      	movs	r0, #1
 8001858:	f7ff ff16 	bl	8001688 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	b29b      	uxth	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff2f 	bl	80016c8 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff2a 	bl	80016c8 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff26 	bl	80016c8 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 800187c:	797b      	ldrb	r3, [r7, #5]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff22 	bl	80016c8 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff feff 	bl	8001688 <SPI_Eth_SS>
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}

08001892 <W6100_INIT>:

void W6100_INIT(void) {
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
	/* *** W6100 Init *** */
	SPI_W6100_WCR(NETLCKR, 0x3a);	// NETLCKR		Network settings unlock
 8001896:	213a      	movs	r1, #58	; 0x3a
 8001898:	f244 10f5 	movw	r0, #16885	; 0x41f5
 800189c:	f7ff ff5a 	bl	8001754 <SPI_W6100_WCR>

	SPI_W6100_WCR(SHAR0, MAC0);	// SHAR[5:0]	Set hardware MAC address
 80018a0:	2111      	movs	r1, #17
 80018a2:	f244 1020 	movw	r0, #16672	; 0x4120
 80018a6:	f7ff ff55 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR1, MAC1);
 80018aa:	2122      	movs	r1, #34	; 0x22
 80018ac:	f244 1021 	movw	r0, #16673	; 0x4121
 80018b0:	f7ff ff50 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR2, MAC2);
 80018b4:	2133      	movs	r1, #51	; 0x33
 80018b6:	f244 1022 	movw	r0, #16674	; 0x4122
 80018ba:	f7ff ff4b 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR3, MAC3);
 80018be:	21aa      	movs	r1, #170	; 0xaa
 80018c0:	f244 1023 	movw	r0, #16675	; 0x4123
 80018c4:	f7ff ff46 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR4, MAC4);
 80018c8:	21bb      	movs	r1, #187	; 0xbb
 80018ca:	f244 1024 	movw	r0, #16676	; 0x4124
 80018ce:	f7ff ff41 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR5, MAC5);
 80018d2:	21cc      	movs	r1, #204	; 0xcc
 80018d4:	f244 1025 	movw	r0, #16677	; 0x4125
 80018d8:	f7ff ff3c 	bl	8001754 <SPI_W6100_WCR>

	SPI_W6100_WCR(GAR0, GIP0);	// GAR[0:3]		Gateway IP address 192.168.0.1
 80018dc:	21c0      	movs	r1, #192	; 0xc0
 80018de:	f244 1030 	movw	r0, #16688	; 0x4130
 80018e2:	f7ff ff37 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR1, GIP1);
 80018e6:	21a8      	movs	r1, #168	; 0xa8
 80018e8:	f244 1031 	movw	r0, #16689	; 0x4131
 80018ec:	f7ff ff32 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR2, GIP2);
 80018f0:	2100      	movs	r1, #0
 80018f2:	f244 1032 	movw	r0, #16690	; 0x4132
 80018f6:	f7ff ff2d 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR3, GIP3);
 80018fa:	2101      	movs	r1, #1
 80018fc:	f244 1033 	movw	r0, #16691	; 0x4133
 8001900:	f7ff ff28 	bl	8001754 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUBR0, SBM0);	// SUBR[0:3]	Subnet mask address 255:255:255:0
 8001904:	21ff      	movs	r1, #255	; 0xff
 8001906:	f244 1034 	movw	r0, #16692	; 0x4134
 800190a:	f7ff ff23 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR1, SBM1);
 800190e:	21ff      	movs	r1, #255	; 0xff
 8001910:	f244 1035 	movw	r0, #16693	; 0x4135
 8001914:	f7ff ff1e 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR2, SBM2);
 8001918:	21ff      	movs	r1, #255	; 0xff
 800191a:	f244 1036 	movw	r0, #16694	; 0x4136
 800191e:	f7ff ff19 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR3, SBM3);
 8001922:	2100      	movs	r1, #0
 8001924:	f244 1037 	movw	r0, #16695	; 0x4137
 8001928:	f7ff ff14 	bl	8001754 <SPI_W6100_WCR>

	SPI_W6100_WCR(SIPR0, IPV0);	// SIPR[0:3]	IPv4 Source IP Address 192.168.0.27
 800192c:	21c0      	movs	r1, #192	; 0xc0
 800192e:	f244 1038 	movw	r0, #16696	; 0x4138
 8001932:	f7ff ff0f 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR1, IPV1);
 8001936:	21a8      	movs	r1, #168	; 0xa8
 8001938:	f244 1039 	movw	r0, #16697	; 0x4139
 800193c:	f7ff ff0a 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR2, IPV2);
 8001940:	2100      	movs	r1, #0
 8001942:	f244 103a 	movw	r0, #16698	; 0x413a
 8001946:	f7ff ff05 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR3, IPV3);
 800194a:	211b      	movs	r1, #27
 800194c:	f244 103b 	movw	r0, #16699	; 0x413b
 8001950:	f7ff ff00 	bl	8001754 <SPI_W6100_WCR>

	SPI_W6100_WCR(LLAR0, 0xfe);	// Link Local Address, FE80::1322:33FF:FEAA:BBCC
 8001954:	21fe      	movs	r1, #254	; 0xfe
 8001956:	f244 1040 	movw	r0, #16704	; 0x4140
 800195a:	f7ff fefb 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR1, 0x80);
 800195e:	2180      	movs	r1, #128	; 0x80
 8001960:	f244 1041 	movw	r0, #16705	; 0x4141
 8001964:	f7ff fef6 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR2, 0x00);
 8001968:	2100      	movs	r1, #0
 800196a:	f244 1042 	movw	r0, #16706	; 0x4142
 800196e:	f7ff fef1 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR3, 0x01);
 8001972:	2101      	movs	r1, #1
 8001974:	f244 1043 	movw	r0, #16707	; 0x4143
 8001978:	f7ff feec 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR4, 0x00);
 800197c:	2100      	movs	r1, #0
 800197e:	f244 1044 	movw	r0, #16708	; 0x4144
 8001982:	f7ff fee7 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR5, 0x00);
 8001986:	2100      	movs	r1, #0
 8001988:	f244 1045 	movw	r0, #16709	; 0x4145
 800198c:	f7ff fee2 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR6, 0x00);
 8001990:	2100      	movs	r1, #0
 8001992:	f244 1046 	movw	r0, #16710	; 0x4146
 8001996:	f7ff fedd 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR7, 0x00);
 800199a:	2100      	movs	r1, #0
 800199c:	f244 1047 	movw	r0, #16711	; 0x4147
 80019a0:	f7ff fed8 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR8, 0x13);
 80019a4:	2113      	movs	r1, #19
 80019a6:	f244 1048 	movw	r0, #16712	; 0x4148
 80019aa:	f7ff fed3 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR9, 0x22);
 80019ae:	2122      	movs	r1, #34	; 0x22
 80019b0:	f244 1049 	movw	r0, #16713	; 0x4149
 80019b4:	f7ff fece 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR10, 0x33);
 80019b8:	2133      	movs	r1, #51	; 0x33
 80019ba:	f244 104a 	movw	r0, #16714	; 0x414a
 80019be:	f7ff fec9 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR11, 0xff);
 80019c2:	21ff      	movs	r1, #255	; 0xff
 80019c4:	f244 104b 	movw	r0, #16715	; 0x414b
 80019c8:	f7ff fec4 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR12, 0xfe);
 80019cc:	21fe      	movs	r1, #254	; 0xfe
 80019ce:	f244 104c 	movw	r0, #16716	; 0x414c
 80019d2:	f7ff febf 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR13, 0xaa);
 80019d6:	21aa      	movs	r1, #170	; 0xaa
 80019d8:	f244 104d 	movw	r0, #16717	; 0x414d
 80019dc:	f7ff feba 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR14, 0xbb);
 80019e0:	21bb      	movs	r1, #187	; 0xbb
 80019e2:	f244 104e 	movw	r0, #16718	; 0x414e
 80019e6:	f7ff feb5 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR15, 0xcc);
 80019ea:	21cc      	movs	r1, #204	; 0xcc
 80019ec:	f244 104f 	movw	r0, #16719	; 0x414f
 80019f0:	f7ff feb0 	bl	8001754 <SPI_W6100_WCR>

	SPI_W6100_WCR(GUAR0, 0x20);	// Global Unicast Address, 2001:0DB8:E001::1222:33FF:FEAA:BBCC
 80019f4:	2120      	movs	r1, #32
 80019f6:	f244 1050 	movw	r0, #16720	; 0x4150
 80019fa:	f7ff feab 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR1, 0x01);
 80019fe:	2101      	movs	r1, #1
 8001a00:	f244 1051 	movw	r0, #16721	; 0x4151
 8001a04:	f7ff fea6 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR2, 0x0d);
 8001a08:	210d      	movs	r1, #13
 8001a0a:	f244 1052 	movw	r0, #16722	; 0x4152
 8001a0e:	f7ff fea1 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR3, 0xb8);
 8001a12:	21b8      	movs	r1, #184	; 0xb8
 8001a14:	f244 1053 	movw	r0, #16723	; 0x4153
 8001a18:	f7ff fe9c 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR4, 0xe0);
 8001a1c:	21e0      	movs	r1, #224	; 0xe0
 8001a1e:	f244 1054 	movw	r0, #16724	; 0x4154
 8001a22:	f7ff fe97 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR5, 0x01);
 8001a26:	2101      	movs	r1, #1
 8001a28:	f244 1055 	movw	r0, #16725	; 0x4155
 8001a2c:	f7ff fe92 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR6, 0x00);
 8001a30:	2100      	movs	r1, #0
 8001a32:	f244 1056 	movw	r0, #16726	; 0x4156
 8001a36:	f7ff fe8d 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR7, 0x00);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	f244 1057 	movw	r0, #16727	; 0x4157
 8001a40:	f7ff fe88 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR8, 0x13);
 8001a44:	2113      	movs	r1, #19
 8001a46:	f244 1058 	movw	r0, #16728	; 0x4158
 8001a4a:	f7ff fe83 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR9, 0x22);
 8001a4e:	2122      	movs	r1, #34	; 0x22
 8001a50:	f244 1059 	movw	r0, #16729	; 0x4159
 8001a54:	f7ff fe7e 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR10, 0x33);
 8001a58:	2133      	movs	r1, #51	; 0x33
 8001a5a:	f244 105a 	movw	r0, #16730	; 0x415a
 8001a5e:	f7ff fe79 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR11, 0xff);
 8001a62:	21ff      	movs	r1, #255	; 0xff
 8001a64:	f244 105b 	movw	r0, #16731	; 0x415b
 8001a68:	f7ff fe74 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR12, 0xfe);
 8001a6c:	21fe      	movs	r1, #254	; 0xfe
 8001a6e:	f244 105c 	movw	r0, #16732	; 0x415c
 8001a72:	f7ff fe6f 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR13, 0xaa);
 8001a76:	21aa      	movs	r1, #170	; 0xaa
 8001a78:	f244 105d 	movw	r0, #16733	; 0x415d
 8001a7c:	f7ff fe6a 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR14, 0xbb);
 8001a80:	21bb      	movs	r1, #187	; 0xbb
 8001a82:	f244 105e 	movw	r0, #16734	; 0x415e
 8001a86:	f7ff fe65 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR15, 0xcc);
 8001a8a:	21cc      	movs	r1, #204	; 0xcc
 8001a8c:	f244 105f 	movw	r0, #16735	; 0x415f
 8001a90:	f7ff fe60 	bl	8001754 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUB6R0, 0xff);	// IPv6 Subnet Prefix, FFFF:FFFF::
 8001a94:	21ff      	movs	r1, #255	; 0xff
 8001a96:	f244 1060 	movw	r0, #16736	; 0x4160
 8001a9a:	f7ff fe5b 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R1, 0xff);
 8001a9e:	21ff      	movs	r1, #255	; 0xff
 8001aa0:	f244 1061 	movw	r0, #16737	; 0x4161
 8001aa4:	f7ff fe56 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R2, 0xff);
 8001aa8:	21ff      	movs	r1, #255	; 0xff
 8001aaa:	f244 1062 	movw	r0, #16738	; 0x4162
 8001aae:	f7ff fe51 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R3, 0xff);
 8001ab2:	21ff      	movs	r1, #255	; 0xff
 8001ab4:	f244 1063 	movw	r0, #16739	; 0x4163
 8001ab8:	f7ff fe4c 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R4, 0xff);
 8001abc:	21ff      	movs	r1, #255	; 0xff
 8001abe:	f244 1064 	movw	r0, #16740	; 0x4164
 8001ac2:	f7ff fe47 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R5, 0xff);
 8001ac6:	21ff      	movs	r1, #255	; 0xff
 8001ac8:	f244 1065 	movw	r0, #16741	; 0x4165
 8001acc:	f7ff fe42 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R6, 0xff);
 8001ad0:	21ff      	movs	r1, #255	; 0xff
 8001ad2:	f244 1066 	movw	r0, #16742	; 0x4166
 8001ad6:	f7ff fe3d 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R7, 0xff);
 8001ada:	21ff      	movs	r1, #255	; 0xff
 8001adc:	f244 1067 	movw	r0, #16743	; 0x4167
 8001ae0:	f7ff fe38 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R8, 0x00);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f244 1068 	movw	r0, #16744	; 0x4168
 8001aea:	f7ff fe33 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R9, 0x00);
 8001aee:	2100      	movs	r1, #0
 8001af0:	f244 1069 	movw	r0, #16745	; 0x4169
 8001af4:	f7ff fe2e 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R10, 0x00);
 8001af8:	2100      	movs	r1, #0
 8001afa:	f244 106a 	movw	r0, #16746	; 0x416a
 8001afe:	f7ff fe29 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R11, 0x00);
 8001b02:	2100      	movs	r1, #0
 8001b04:	f244 106b 	movw	r0, #16747	; 0x416b
 8001b08:	f7ff fe24 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R12, 0x00);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	f244 106c 	movw	r0, #16748	; 0x416c
 8001b12:	f7ff fe1f 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R13, 0x00);
 8001b16:	2100      	movs	r1, #0
 8001b18:	f244 106d 	movw	r0, #16749	; 0x416d
 8001b1c:	f7ff fe1a 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R14, 0x00);
 8001b20:	2100      	movs	r1, #0
 8001b22:	f244 106e 	movw	r0, #16750	; 0x416e
 8001b26:	f7ff fe15 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R15, 0x00);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f244 106f 	movw	r0, #16751	; 0x416f
 8001b30:	f7ff fe10 	bl	8001754 <SPI_W6100_WCR>

	SPI_W6100_WCR(GA6R0, 0xfe);	// IPv6 Gateway Address, FFFF:FFFF::
 8001b34:	21fe      	movs	r1, #254	; 0xfe
 8001b36:	f244 1070 	movw	r0, #16752	; 0x4170
 8001b3a:	f7ff fe0b 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R1, 0x80);
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	f244 1071 	movw	r0, #16753	; 0x4171
 8001b44:	f7ff fe06 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R2, 0x00);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	f244 1072 	movw	r0, #16754	; 0x4172
 8001b4e:	f7ff fe01 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R3, 0x00);
 8001b52:	2100      	movs	r1, #0
 8001b54:	f244 1073 	movw	r0, #16755	; 0x4173
 8001b58:	f7ff fdfc 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R4, 0x00);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	f244 1074 	movw	r0, #16756	; 0x4174
 8001b62:	f7ff fdf7 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R5, 0x00);
 8001b66:	2100      	movs	r1, #0
 8001b68:	f244 1075 	movw	r0, #16757	; 0x4175
 8001b6c:	f7ff fdf2 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R6, 0x00);
 8001b70:	2100      	movs	r1, #0
 8001b72:	f244 1076 	movw	r0, #16758	; 0x4176
 8001b76:	f7ff fded 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R7, 0x00);
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	f244 1077 	movw	r0, #16759	; 0x4177
 8001b80:	f7ff fde8 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R8, 0x13);
 8001b84:	2113      	movs	r1, #19
 8001b86:	f244 1078 	movw	r0, #16760	; 0x4178
 8001b8a:	f7ff fde3 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R9, 0x22);
 8001b8e:	2122      	movs	r1, #34	; 0x22
 8001b90:	f244 1079 	movw	r0, #16761	; 0x4179
 8001b94:	f7ff fdde 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R10, 0x33);
 8001b98:	2133      	movs	r1, #51	; 0x33
 8001b9a:	f244 107a 	movw	r0, #16762	; 0x417a
 8001b9e:	f7ff fdd9 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R11, 0xff);
 8001ba2:	21ff      	movs	r1, #255	; 0xff
 8001ba4:	f244 107b 	movw	r0, #16763	; 0x417b
 8001ba8:	f7ff fdd4 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R12, 0xfe);
 8001bac:	21fe      	movs	r1, #254	; 0xfe
 8001bae:	f244 107c 	movw	r0, #16764	; 0x417c
 8001bb2:	f7ff fdcf 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R13, 0x44);
 8001bb6:	2144      	movs	r1, #68	; 0x44
 8001bb8:	f244 107d 	movw	r0, #16765	; 0x417d
 8001bbc:	f7ff fdca 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R14, 0x55);
 8001bc0:	2155      	movs	r1, #85	; 0x55
 8001bc2:	f244 107e 	movw	r0, #16766	; 0x417e
 8001bc6:	f7ff fdc5 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R15, 0x66);
 8001bca:	2166      	movs	r1, #102	; 0x66
 8001bcc:	f244 107f 	movw	r0, #16767	; 0x417f
 8001bd0:	f7ff fdc0 	bl	8001754 <SPI_W6100_WCR>

	SPI_W6100_WCR(NETLCKR, 0x00);	// NETLCKR		Network settings lock
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	f244 10f5 	movw	r0, #16885	; 0x41f5
 8001bda:	f7ff fdbb 	bl	8001754 <SPI_W6100_WCR>

	// W6100 Packet Received Interrupt setup (for Socket 0)
	// *** Modify this code to fire interrupts for other sockets if in use ***
	SPI_W6100_WCR(SYCR1, 0x80);				// Interrupt enabled (by default after reset)
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	f242 0005 	movw	r0, #8197	; 0x2005
 8001be4:	f7ff fdb6 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIMR, 0x01);				// enable SIMR[S0_INT] – enable SOCKET 0 Interrupt
 8001be8:	2101      	movs	r1, #1
 8001bea:	f242 1014 	movw	r0, #8468	; 0x2114
 8001bee:	f7ff fdb1 	bl	8001754 <SPI_W6100_WCR>
	SPI_W6100_WSOCK(Sn_IMR, 0x04, 0, REG);	// Enable RECV Interrupt Mask Bit for Socket 0
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	2024      	movs	r0, #36	; 0x24
 8001bfa:	f7ff fe0b 	bl	8001814 <SPI_W6100_WSOCK>
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <W6100_OpenTCPSocket>:




uint32_t W6100_OpenTCPSocket (uint8_t sck_nbr, uint16_t port) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	4613      	mov	r3, r2
 8001c12:	80bb      	strh	r3, [r7, #4]
	uint32_t dest_adr;
	/* *** Open Socket as TCP4 *** */
	SPI_W6100_WSOCK(Sn_MR, 0x01, sck_nbr, REG);				// Set TCP4 mode
 8001c14:	79fa      	ldrb	r2, [r7, #7]
 8001c16:	2301      	movs	r3, #1
 8001c18:	2101      	movs	r1, #1
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7ff fdfa 	bl	8001814 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR0, (port >> 8), sck_nbr, REG);	// Set PORT number
 8001c20:	88bb      	ldrh	r3, [r7, #4]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	b2d9      	uxtb	r1, r3
 8001c28:	79fa      	ldrb	r2, [r7, #7]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001c30:	f7ff fdf0 	bl	8001814 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR1, (port & 0xff), sck_nbr, REG);
 8001c34:	88bb      	ldrh	r3, [r7, #4]
 8001c36:	b2d9      	uxtb	r1, r3
 8001c38:	79fa      	ldrb	r2, [r7, #7]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f240 1015 	movw	r0, #277	; 0x115
 8001c40:	f7ff fde8 	bl	8001814 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_CR, 0x01, sck_nbr, REG);				// Set OPEN command
 8001c44:	79fa      	ldrb	r2, [r7, #7]
 8001c46:	2301      	movs	r3, #1
 8001c48:	2101      	movs	r1, #1
 8001c4a:	2010      	movs	r0, #16
 8001c4c:	f7ff fde2 	bl	8001814 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until OPEN command is cleared
 8001c50:	bf00      	nop
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2201      	movs	r2, #1
 8001c56:	4619      	mov	r1, r3
 8001c58:	2010      	movs	r0, #16
 8001c5a:	f7ff fda0 	bl	800179e <SPI_W6100_RSOCK>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f6      	bne.n	8001c52 <W6100_OpenTCPSocket+0x4e>


	SPI_W6100_WSOCK(Sn_CR, 0x02, sck_nbr, REG);				// Set LISTEN command
 8001c64:	79fa      	ldrb	r2, [r7, #7]
 8001c66:	2301      	movs	r3, #1
 8001c68:	2102      	movs	r1, #2
 8001c6a:	2010      	movs	r0, #16
 8001c6c:	f7ff fdd2 	bl	8001814 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until LISTEN command is cleared
 8001c70:	bf00      	nop
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	2201      	movs	r2, #1
 8001c76:	4619      	mov	r1, r3
 8001c78:	2010      	movs	r0, #16
 8001c7a:	f7ff fd90 	bl	800179e <SPI_W6100_RSOCK>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f6      	bne.n	8001c72 <W6100_OpenTCPSocket+0x6e>

	// CONNECT NOW
	while ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x17);	// Wait until SOCKET ESTABLISHED
 8001c84:	bf00      	nop
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	2030      	movs	r0, #48	; 0x30
 8001c8e:	f7ff fd86 	bl	800179e <SPI_W6100_RSOCK>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b17      	cmp	r3, #23
 8001c96:	d1f6      	bne.n	8001c86 <W6100_OpenTCPSocket+0x82>

	/* HARDWARE RESPONSE ON THE SOCKET OPEN */
	if(socketOpenCallback) socketOpenCallback(sck_nbr);
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <W6100_OpenTCPSocket+0x11c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <W6100_OpenTCPSocket+0xa6>
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <W6100_OpenTCPSocket+0x11c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	79fa      	ldrb	r2, [r7, #7]
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4798      	blx	r3
	/* END OF HARDWARE RESPONSE */							// Socket established

	SPI_W6100_WSOCK(Sn_IRCLR, 0x01, sck_nbr, REG);			// Interrupt clear
 8001caa:	79fa      	ldrb	r2, [r7, #7]
 8001cac:	2301      	movs	r3, #1
 8001cae:	2101      	movs	r1, #1
 8001cb0:	2028      	movs	r0, #40	; 0x28
 8001cb2:	f7ff fdaf 	bl	8001814 <SPI_W6100_WSOCK>

	// Read destination address
	dest_adr = (SPI_W6100_RSOCK(Sn_DIPR0, sck_nbr, REG) << 24);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f44f 7090 	mov.w	r0, #288	; 0x120
 8001cc0:	f7ff fd6d 	bl	800179e <SPI_W6100_RSOCK>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR1, sck_nbr, REG) << 16);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f240 1021 	movw	r0, #289	; 0x121
 8001cd4:	f7ff fd63 	bl	800179e <SPI_W6100_RSOCK>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	041b      	lsls	r3, r3, #16
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR2, sck_nbr, REG) << 8);
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 7091 	mov.w	r0, #290	; 0x122
 8001cee:	f7ff fd56 	bl	800179e <SPI_W6100_RSOCK>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
	dest_adr |= SPI_W6100_RSOCK(Sn_DIPR3, sck_nbr, REG);
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2201      	movs	r2, #1
 8001d02:	4619      	mov	r1, r3
 8001d04:	f240 1023 	movw	r0, #291	; 0x123
 8001d08:	f7ff fd49 	bl	800179e <SPI_W6100_RSOCK>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]

	return dest_adr;	// Return destination address
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000200 	.word	0x20000200

08001d24 <W6100_ReceiveData>:




uint8_t W6100_ReceiveData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab, uint8_t size) {
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4603      	mov	r3, r0
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	4613      	mov	r3, r2
 8001d36:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	uint32_t get_size, gSn_RX_MAX, get_start_address, Sn_RX_RD_temp;

	if ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) == 0x1c) {								// Check if socket close request pending
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	2030      	movs	r0, #48	; 0x30
 8001d40:	f7ff fd2d 	bl	800179e <SPI_W6100_RSOCK>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b1c      	cmp	r3, #28
 8001d48:	d103      	bne.n	8001d52 <W6100_ReceiveData+0x2e>
		W6100_PassiveCloseSocket(sck_nbr);
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f9c1 	bl	80020d4 <W6100_PassiveCloseSocket>
	}

	if ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0b00000100) == 0x04) {					// Check if data received
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4619      	mov	r1, r3
 8001d58:	2020      	movs	r0, #32
 8001d5a:	f7ff fd20 	bl	800179e <SPI_W6100_RSOCK>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	f040 80a1 	bne.w	8001eac <W6100_ReceiveData+0x188>


			// Read data from the buffer
			get_size = (SPI_W6100_RSOCK(Sn_RX_RSR0, sck_nbr, REG) << 8);
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f44f 7009 	mov.w	r0, #548	; 0x224
 8001d74:	f7ff fd13 	bl	800179e <SPI_W6100_RSOCK>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	623b      	str	r3, [r7, #32]
			get_size |= SPI_W6100_RSOCK(Sn_RX_RSR1, sck_nbr, REG);
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	2201      	movs	r2, #1
 8001d82:	4619      	mov	r1, r3
 8001d84:	f240 2025 	movw	r0, #549	; 0x225
 8001d88:	f7ff fd09 	bl	800179e <SPI_W6100_RSOCK>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	623b      	str	r3, [r7, #32]
			gSn_RX_MAX = (SPI_W6100_RSOCK(Sn_RX_BSR, sck_nbr, REG) * 1024);
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f44f 7008 	mov.w	r0, #544	; 0x220
 8001da0:	f7ff fcfd 	bl	800179e <SPI_W6100_RSOCK>
 8001da4:	4603      	mov	r3, r0
 8001da6:	029b      	lsls	r3, r3, #10
 8001da8:	61fb      	str	r3, [r7, #28]
			get_start_address = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	2201      	movs	r2, #1
 8001dae:	4619      	mov	r1, r3
 8001db0:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001db4:	f7ff fcf3 	bl	800179e <SPI_W6100_RSOCK>
 8001db8:	4603      	mov	r3, r0
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	617b      	str	r3, [r7, #20]
			get_start_address |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f240 2029 	movw	r0, #553	; 0x229
 8001dc8:	f7ff fce9 	bl	800179e <SPI_W6100_RSOCK>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]

			// Move data to the array
			memset(tab, '\0', size);
 8001dd6:	7bbb      	ldrb	r3, [r7, #14]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2100      	movs	r1, #0
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fa78 	bl	80022d2 <memset>
			for (i=0; i<get_size; i++) {
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001de8:	e016      	b.n	8001e18 <W6100_ReceiveData+0xf4>
				tab[i] = SPI_W6100_RSOCK((get_start_address+i), sck_nbr, RX_BUF);
 8001dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	b298      	uxth	r0, r3
 8001df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	18d4      	adds	r4, r2, r3
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	2203      	movs	r2, #3
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7ff fcca 	bl	800179e <SPI_W6100_RSOCK>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	7023      	strb	r3, [r4, #0]
			for (i=0; i<get_size; i++) {
 8001e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e12:	3301      	adds	r3, #1
 8001e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e1c:	6a3a      	ldr	r2, [r7, #32]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d8e3      	bhi.n	8001dea <W6100_ReceiveData+0xc6>
			}

			memcpy(&get_start_address, &dest_adr, get_size);
 8001e22:	f107 0108 	add.w	r1, r7, #8
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	6a3a      	ldr	r2, [r7, #32]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fa45 	bl	80022bc <memcpy>

			Sn_RX_RD_temp = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4619      	mov	r1, r3
 8001e38:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001e3c:	f7ff fcaf 	bl	800179e <SPI_W6100_RSOCK>
 8001e40:	4603      	mov	r3, r0
 8001e42:	021b      	lsls	r3, r3, #8
 8001e44:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f240 2029 	movw	r0, #553	; 0x229
 8001e50:	f7ff fca5 	bl	800179e <SPI_W6100_RSOCK>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp += get_size;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	4413      	add	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
			SPI_W6100_WSOCK(Sn_RX_RD0, (Sn_RX_RD_temp>>8), sck_nbr, REG);
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	b2d9      	uxtb	r1, r3
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001e74:	f7ff fcce 	bl	8001814 <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_RX_RD1, (Sn_RX_RD_temp), sck_nbr, REG);
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	b2d9      	uxtb	r1, r3
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f240 2029 	movw	r0, #553	; 0x229
 8001e84:	f7ff fcc6 	bl	8001814 <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_CR, 0x40, sck_nbr, REG);
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	2140      	movs	r1, #64	; 0x40
 8001e8e:	2010      	movs	r0, #16
 8001e90:	f7ff fcc0 	bl	8001814 <SPI_W6100_WSOCK>
			while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);
 8001e94:	bf00      	nop
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	2010      	movs	r0, #16
 8001e9e:	f7ff fc7e 	bl	800179e <SPI_W6100_RSOCK>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f6      	bne.n	8001e96 <W6100_ReceiveData+0x172>

			return 1;	// Return 1 if data was received
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <W6100_ReceiveData+0x18a>
	}
	else 	return 0;	// Return 0 of no data was received
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	372c      	adds	r7, #44	; 0x2c
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd90      	pop	{r4, r7, pc}

08001eb6 <W6100_TransmitData>:

void W6100_TransmitData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab, uint8_t size) {
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b08a      	sub	sp, #40	; 0x28
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	73fb      	strb	r3, [r7, #15]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	uint8_t send_size = size;
 8001eca:	7bbb      	ldrb	r3, [r7, #14]
 8001ecc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t gSn_TX_MAX, get_start_address, Sn_TX_WR_temp, Sn_TX_FSR_temp;

	gSn_TX_MAX = (SPI_W6100_RSOCK(Sn_TX_BSR, sck_nbr, REG) * 1024);						// Socket TX buffer size
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001eda:	f7ff fc60 	bl	800179e <SPI_W6100_RSOCK>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	029b      	lsls	r3, r3, #10
 8001ee2:	61fb      	str	r3, [r7, #28]

	if(send_size > gSn_TX_MAX) send_size = gSn_TX_MAX;
 8001ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d219      	bcs.n	8001f22 <W6100_TransmitData+0x6c>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	while(send_size > Sn_TX_FSR_temp) {													// wait until Socket Tx buffer is free
 8001ef4:	e015      	b.n	8001f22 <W6100_TransmitData+0x6c>
		Sn_TX_FSR_temp = (SPI_W6100_RSOCK(Sn_TX_FSR0, sck_nbr, REG) << 8);
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4619      	mov	r1, r3
 8001efc:	f44f 7001 	mov.w	r0, #516	; 0x204
 8001f00:	f7ff fc4d 	bl	800179e <SPI_W6100_RSOCK>
 8001f04:	4603      	mov	r3, r0
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	623b      	str	r3, [r7, #32]
		Sn_TX_FSR_temp |= SPI_W6100_RSOCK(Sn_TX_FSR1, sck_nbr, REG);
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f240 2005 	movw	r0, #517	; 0x205
 8001f14:	f7ff fc43 	bl	800179e <SPI_W6100_RSOCK>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	623b      	str	r3, [r7, #32]
	while(send_size > Sn_TX_FSR_temp) {													// wait until Socket Tx buffer is free
 8001f22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f26:	6a3a      	ldr	r2, [r7, #32]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d3e4      	bcc.n	8001ef6 <W6100_TransmitData+0x40>
	}

	get_start_address = (SPI_W6100_RSOCK(Sn_TX_WR0, sck_nbr, REG) << 8);
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8001f36:	f7ff fc32 	bl	800179e <SPI_W6100_RSOCK>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	617b      	str	r3, [r7, #20]
	get_start_address |= SPI_W6100_RSOCK(Sn_TX_WR1, sck_nbr, REG);
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	2201      	movs	r2, #1
 8001f44:	4619      	mov	r1, r3
 8001f46:	f240 200d 	movw	r0, #525	; 0x20d
 8001f4a:	f7ff fc28 	bl	800179e <SPI_W6100_RSOCK>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461a      	mov	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]


	Sn_TX_WR_temp = (SPI_W6100_RSOCK(Sn_TX_WR0, sck_nbr, REG) << 8);
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8001f62:	f7ff fc1c 	bl	800179e <SPI_W6100_RSOCK>
 8001f66:	4603      	mov	r3, r0
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	61bb      	str	r3, [r7, #24]
	Sn_TX_WR_temp |= SPI_W6100_RSOCK(Sn_TX_WR1, sck_nbr, REG);
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4619      	mov	r1, r3
 8001f72:	f240 200d 	movw	r0, #525	; 0x20d
 8001f76:	f7ff fc12 	bl	800179e <SPI_W6100_RSOCK>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
	Sn_TX_WR_temp += size;
 8001f84:	7bbb      	ldrb	r3, [r7, #14]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4413      	add	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
	SPI_W6100_WSOCK(Sn_TX_WR0, (Sn_TX_WR_temp>>8), sck_nbr, REG);
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	b2d9      	uxtb	r1, r3
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	2301      	movs	r3, #1
 8001f96:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8001f9a:	f7ff fc3b 	bl	8001814 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_TX_WR1, (Sn_TX_WR_temp), sck_nbr, REG);
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	b2d9      	uxtb	r1, r3
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f240 200d 	movw	r0, #525	; 0x20d
 8001faa:	f7ff fc33 	bl	8001814 <SPI_W6100_WSOCK>

	// Move data to the array
	for (i=0; i<size; i++) {
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fb4:	e014      	b.n	8001fe0 <W6100_TransmitData+0x12a>
		SPI_W6100_WSOCK((get_start_address+i), tab[i], sck_nbr, TX_BUF);
 8001fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	b298      	uxth	r0, r3
 8001fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	7819      	ldrb	r1, [r3, #0]
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f7ff fc1f 	bl	8001814 <SPI_W6100_WSOCK>
	for (i=0; i<size; i++) {
 8001fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001fe0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001fe4:	7bbb      	ldrb	r3, [r7, #14]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d3e5      	bcc.n	8001fb6 <W6100_TransmitData+0x100>
	}

	memcpy(&get_start_address, &dest_adr, send_size);
 8001fea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001fee:	f107 0108 	add.w	r1, r7, #8
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f960 	bl	80022bc <memcpy>

	SPI_W6100_WSOCK(Sn_CR, 0x20, sck_nbr, REG);											// SEND command sent to TCP/TCP6 mode
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	2301      	movs	r3, #1
 8002000:	2120      	movs	r1, #32
 8002002:	2010      	movs	r0, #16
 8002004:	f7ff fc06 	bl	8001814 <SPI_W6100_WSOCK>
	while(SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG) != 0x00);								// Wait for SEND command clear
 8002008:	bf00      	nop
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	2201      	movs	r2, #1
 800200e:	4619      	mov	r1, r3
 8002010:	2010      	movs	r0, #16
 8002012:	f7ff fbc4 	bl	800179e <SPI_W6100_RSOCK>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f6      	bne.n	800200a <W6100_TransmitData+0x154>

	while(((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x10) == 0) && ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x08) == 0));
 800201c:	bf00      	nop
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	2201      	movs	r2, #1
 8002022:	4619      	mov	r1, r3
 8002024:	2020      	movs	r0, #32
 8002026:	f7ff fbba 	bl	800179e <SPI_W6100_RSOCK>
 800202a:	4603      	mov	r3, r0
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <W6100_TransmitData+0x194>
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	2201      	movs	r2, #1
 8002038:	4619      	mov	r1, r3
 800203a:	2020      	movs	r0, #32
 800203c:	f7ff fbaf 	bl	800179e <SPI_W6100_RSOCK>
 8002040:	4603      	mov	r3, r0
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0e9      	beq.n	800201e <W6100_TransmitData+0x168>

	if((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x10) == 0x10) SPI_W6100_WSOCK(Sn_IRCLR, 0x10, sck_nbr, REG);	// Clear SENDOK interrupt
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	2201      	movs	r2, #1
 800204e:	4619      	mov	r1, r3
 8002050:	2020      	movs	r0, #32
 8002052:	f7ff fba4 	bl	800179e <SPI_W6100_RSOCK>
 8002056:	4603      	mov	r3, r0
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b10      	cmp	r3, #16
 800205e:	d105      	bne.n	800206c <W6100_TransmitData+0x1b6>
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	2301      	movs	r3, #1
 8002064:	2110      	movs	r1, #16
 8002066:	2028      	movs	r0, #40	; 0x28
 8002068:	f7ff fbd4 	bl	8001814 <SPI_W6100_WSOCK>

}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	; 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <registerDataReceivedCallback>:

void registerDataReceivedCallback(void (*callback)(char * RxBuf)) {
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	dataReceivedCallback = callback;
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <registerDataReceivedCallback+0x1c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000204 	.word	0x20000204

08002094 <registerSocketOpenCallback>:


void registerSocketOpenCallback(void (*callback)(uint8_t sck_nbr)) {
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	socketOpenCallback = callback;
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <registerSocketOpenCallback+0x1c>)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6013      	str	r3, [r2, #0]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000200 	.word	0x20000200

080020b4 <registerSocketCloseCallback>:

void registerSocketCloseCallback(void (*callback)(uint8_t sck_nbr)) {
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	socketCloseCallback = callback;
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <registerSocketCloseCallback+0x1c>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6013      	str	r3, [r2, #0]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	200001fc 	.word	0x200001fc

080020d4 <W6100_PassiveCloseSocket>:


void W6100_PassiveCloseSocket(uint8_t sck_nbr) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
	SPI_W6100_WSOCK(Sn_CR, 0x08, sck_nbr, REG);						// Send FIN packet (DISCON command)
 80020de:	79fa      	ldrb	r2, [r7, #7]
 80020e0:	2301      	movs	r3, #1
 80020e2:	2108      	movs	r1, #8
 80020e4:	2010      	movs	r0, #16
 80020e6:	f7ff fb95 	bl	8001814 <SPI_W6100_WSOCK>
	while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);			// Wait for DISCON command clear
 80020ea:	bf00      	nop
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2201      	movs	r2, #1
 80020f0:	4619      	mov	r1, r3
 80020f2:	2010      	movs	r0, #16
 80020f4:	f7ff fb53 	bl	800179e <SPI_W6100_RSOCK>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f6      	bne.n	80020ec <W6100_PassiveCloseSocket+0x18>
	// Wait for ACK packet
	while((((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b10) == 0) && (((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b1000) == 0));
 80020fe:	bf00      	nop
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	2201      	movs	r2, #1
 8002104:	4619      	mov	r1, r3
 8002106:	2020      	movs	r0, #32
 8002108:	f7ff fb49 	bl	800179e <SPI_W6100_RSOCK>
 800210c:	4603      	mov	r3, r0
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10a      	bne.n	800212c <W6100_PassiveCloseSocket+0x58>
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	2201      	movs	r2, #1
 800211a:	4619      	mov	r1, r3
 800211c:	2020      	movs	r0, #32
 800211e:	f7ff fb3e 	bl	800179e <SPI_W6100_RSOCK>
 8002122:	4603      	mov	r3, r0
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0e9      	beq.n	8002100 <W6100_PassiveCloseSocket+0x2c>

	if ((((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b10) == 0b10)) {
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	2201      	movs	r2, #1
 8002130:	4619      	mov	r1, r3
 8002132:	2020      	movs	r0, #32
 8002134:	f7ff fb33 	bl	800179e <SPI_W6100_RSOCK>
 8002138:	4603      	mov	r3, r0
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b02      	cmp	r3, #2
 8002140:	d10f      	bne.n	8002162 <W6100_PassiveCloseSocket+0x8e>
		SPI_W6100_WSOCK(Sn_IRCLR, 0x02, sck_nbr, REG);				// Clear DISCON interrupt
 8002142:	79fa      	ldrb	r2, [r7, #7]
 8002144:	2301      	movs	r3, #1
 8002146:	2102      	movs	r1, #2
 8002148:	2028      	movs	r0, #40	; 0x28
 800214a:	f7ff fb63 	bl	8001814 <SPI_W6100_WSOCK>
		while((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x00);		// Wait until socket is CLOSED
 800214e:	bf00      	nop
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	2201      	movs	r2, #1
 8002154:	4619      	mov	r1, r3
 8002156:	2030      	movs	r0, #48	; 0x30
 8002158:	f7ff fb21 	bl	800179e <SPI_W6100_RSOCK>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f6      	bne.n	8002150 <W6100_PassiveCloseSocket+0x7c>
	}
	/* HARDWARE RESPONSE ON THE SOCKET CLOSE */
	if(socketCloseCallback) socketCloseCallback(sck_nbr);			// Response for a socket close
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <W6100_PassiveCloseSocket+0xa8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d004      	beq.n	8002174 <W6100_PassiveCloseSocket+0xa0>
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <W6100_PassiveCloseSocket+0xa8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	79fa      	ldrb	r2, [r7, #7]
 8002170:	4610      	mov	r0, r2
 8002172:	4798      	blx	r3
	/* END OF HARDWARE RESPONSE */
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200001fc 	.word	0x200001fc

08002180 <EXTI9_5_IRQHandler>:


// W6100 external interrupt handler (line PC5)
// Fired when data is received by W6100 ETH
__attribute__((interrupt)) void EXTI9_5_IRQHandler(void) {
 8002180:	4668      	mov	r0, sp
 8002182:	f020 0107 	bic.w	r1, r0, #7
 8002186:	468d      	mov	sp, r1
 8002188:	b581      	push	{r0, r7, lr}
 800218a:	b08b      	sub	sp, #44	; 0x2c
 800218c:	af00      	add	r7, sp, #0

	char rx_buf[40];

	if(EXTI->PR & EXTI_PR_PR5) {
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <EXTI9_5_IRQHandler+0x80>)
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b00      	cmp	r3, #0
 8002198:	d02a      	beq.n	80021f0 <EXTI9_5_IRQHandler+0x70>
		EXTI->PR = EXTI_PR_PR5;		// Clear ISR flag
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <EXTI9_5_IRQHandler+0x80>)
 800219c:	2220      	movs	r2, #32
 800219e:	615a      	str	r2, [r3, #20]
		/* W6100: Generic Interrupt fired */
		// Check if W6100 RECEIVE ISR for Socket 0 was fired
		if(SPI_W6100_RCR(SIR) && 0x01){
 80021a0:	f242 1001 	movw	r0, #8449	; 0x2101
 80021a4:	f7ff fab2 	bl	800170c <SPI_W6100_RCR>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d020      	beq.n	80021f0 <EXTI9_5_IRQHandler+0x70>
			/* Check if SOCKET 0 data was received */
			if(SPI_W6100_RSOCK(Sn_IR, 0, REG) && 0x04) {
 80021ae:	2201      	movs	r2, #1
 80021b0:	2100      	movs	r1, #0
 80021b2:	2020      	movs	r0, #32
 80021b4:	f7ff faf3 	bl	800179e <SPI_W6100_RSOCK>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d018      	beq.n	80021f0 <EXTI9_5_IRQHandler+0x70>
				if (W6100_ReceiveData(0, socket_dest_adr[0], (uint8_t*)rx_buf, sizeof(rx_buf))) {		// Check if data arrived
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <EXTI9_5_IRQHandler+0x84>)
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	463a      	mov	r2, r7
 80021c4:	2328      	movs	r3, #40	; 0x28
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7ff fdac 	bl	8001d24 <W6100_ReceiveData>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d008      	beq.n	80021e4 <EXTI9_5_IRQHandler+0x64>
					/* HARDWARE RESPONSE ON DATA RECEIVED FROM SOCKET[0] */
					if(dataReceivedCallback) dataReceivedCallback(rx_buf);	// Callback function
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <EXTI9_5_IRQHandler+0x88>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d004      	beq.n	80021e4 <EXTI9_5_IRQHandler+0x64>
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <EXTI9_5_IRQHandler+0x88>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	463a      	mov	r2, r7
 80021e0:	4610      	mov	r0, r2
 80021e2:	4798      	blx	r3
					/* END OF HARDWARE RESPONSE */
				}
				SPI_W6100_WSOCK(Sn_IRCLR, 0x04, 0, REG);					// Clear data interrupt (must be after callback!)
 80021e4:	2301      	movs	r3, #1
 80021e6:	2200      	movs	r2, #0
 80021e8:	2104      	movs	r1, #4
 80021ea:	2028      	movs	r0, #40	; 0x28
 80021ec:	f7ff fb12 	bl	8001814 <SPI_W6100_WSOCK>
			}

		}
	}
}
 80021f0:	bf00      	nop
 80021f2:	372c      	adds	r7, #44	; 0x2c
 80021f4:	46bd      	mov	sp, r7
 80021f6:	e8bd 4081 	ldmia.w	sp!, {r0, r7, lr}
 80021fa:	4685      	mov	sp, r0
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40013c00 	.word	0x40013c00
 8002204:	200002c0 	.word	0x200002c0
 8002208:	20000204 	.word	0x20000204

0800220c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800220c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002244 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002212:	e003      	b.n	800221c <LoopCopyDataInit>

08002214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800221a:	3104      	adds	r1, #4

0800221c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800221c:	480b      	ldr	r0, [pc, #44]	; (800224c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002224:	d3f6      	bcc.n	8002214 <CopyDataInit>
  ldr  r2, =_sbss
 8002226:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002228:	e002      	b.n	8002230 <LoopFillZerobss>

0800222a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800222a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800222c:	f842 3b04 	str.w	r3, [r2], #4

08002230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002234:	d3f9      	bcc.n	800222a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002236:	f7ff fa11 	bl	800165c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223a:	f000 f81b 	bl	8002274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223e:	f7ff f939 	bl	80014b4 <main>
  bx  lr    
 8002242:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002244:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002248:	08002ffc 	.word	0x08002ffc
  ldr  r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002250:	200001d0 	.word	0x200001d0
  ldr  r2, =_sbss
 8002254:	200001d0 	.word	0x200001d0
  ldr  r3, = _ebss
 8002258:	200002d0 	.word	0x200002d0

0800225c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC_IRQHandler>

0800225e <atoi>:
 800225e:	220a      	movs	r2, #10
 8002260:	2100      	movs	r1, #0
 8002262:	f000 b941 	b.w	80024e8 <strtol>
	...

08002268 <__errno>:
 8002268:	4b01      	ldr	r3, [pc, #4]	; (8002270 <__errno+0x8>)
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000000 	.word	0x20000000

08002274 <__libc_init_array>:
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	4e0d      	ldr	r6, [pc, #52]	; (80022ac <__libc_init_array+0x38>)
 8002278:	4c0d      	ldr	r4, [pc, #52]	; (80022b0 <__libc_init_array+0x3c>)
 800227a:	1ba4      	subs	r4, r4, r6
 800227c:	10a4      	asrs	r4, r4, #2
 800227e:	2500      	movs	r5, #0
 8002280:	42a5      	cmp	r5, r4
 8002282:	d109      	bne.n	8002298 <__libc_init_array+0x24>
 8002284:	4e0b      	ldr	r6, [pc, #44]	; (80022b4 <__libc_init_array+0x40>)
 8002286:	4c0c      	ldr	r4, [pc, #48]	; (80022b8 <__libc_init_array+0x44>)
 8002288:	f000 fd4a 	bl	8002d20 <_init>
 800228c:	1ba4      	subs	r4, r4, r6
 800228e:	10a4      	asrs	r4, r4, #2
 8002290:	2500      	movs	r5, #0
 8002292:	42a5      	cmp	r5, r4
 8002294:	d105      	bne.n	80022a2 <__libc_init_array+0x2e>
 8002296:	bd70      	pop	{r4, r5, r6, pc}
 8002298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800229c:	4798      	blx	r3
 800229e:	3501      	adds	r5, #1
 80022a0:	e7ee      	b.n	8002280 <__libc_init_array+0xc>
 80022a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022a6:	4798      	blx	r3
 80022a8:	3501      	adds	r5, #1
 80022aa:	e7f2      	b.n	8002292 <__libc_init_array+0x1e>
 80022ac:	08002ff4 	.word	0x08002ff4
 80022b0:	08002ff4 	.word	0x08002ff4
 80022b4:	08002ff4 	.word	0x08002ff4
 80022b8:	08002ff8 	.word	0x08002ff8

080022bc <memcpy>:
 80022bc:	b510      	push	{r4, lr}
 80022be:	1e43      	subs	r3, r0, #1
 80022c0:	440a      	add	r2, r1
 80022c2:	4291      	cmp	r1, r2
 80022c4:	d100      	bne.n	80022c8 <memcpy+0xc>
 80022c6:	bd10      	pop	{r4, pc}
 80022c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80022cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80022d0:	e7f7      	b.n	80022c2 <memcpy+0x6>

080022d2 <memset>:
 80022d2:	4402      	add	r2, r0
 80022d4:	4603      	mov	r3, r0
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d100      	bne.n	80022dc <memset+0xa>
 80022da:	4770      	bx	lr
 80022dc:	f803 1b01 	strb.w	r1, [r3], #1
 80022e0:	e7f9      	b.n	80022d6 <memset+0x4>
	...

080022e4 <siprintf>:
 80022e4:	b40e      	push	{r1, r2, r3}
 80022e6:	b500      	push	{lr}
 80022e8:	b09c      	sub	sp, #112	; 0x70
 80022ea:	ab1d      	add	r3, sp, #116	; 0x74
 80022ec:	9002      	str	r0, [sp, #8]
 80022ee:	9006      	str	r0, [sp, #24]
 80022f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022f4:	4809      	ldr	r0, [pc, #36]	; (800231c <siprintf+0x38>)
 80022f6:	9107      	str	r1, [sp, #28]
 80022f8:	9104      	str	r1, [sp, #16]
 80022fa:	4909      	ldr	r1, [pc, #36]	; (8002320 <siprintf+0x3c>)
 80022fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002300:	9105      	str	r1, [sp, #20]
 8002302:	6800      	ldr	r0, [r0, #0]
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	a902      	add	r1, sp, #8
 8002308:	f000 fa24 	bl	8002754 <_svfiprintf_r>
 800230c:	9b02      	ldr	r3, [sp, #8]
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	b01c      	add	sp, #112	; 0x70
 8002314:	f85d eb04 	ldr.w	lr, [sp], #4
 8002318:	b003      	add	sp, #12
 800231a:	4770      	bx	lr
 800231c:	20000000 	.word	0x20000000
 8002320:	ffff0208 	.word	0xffff0208

08002324 <strncmp>:
 8002324:	b510      	push	{r4, lr}
 8002326:	b16a      	cbz	r2, 8002344 <strncmp+0x20>
 8002328:	3901      	subs	r1, #1
 800232a:	1884      	adds	r4, r0, r2
 800232c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002330:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002334:	4293      	cmp	r3, r2
 8002336:	d103      	bne.n	8002340 <strncmp+0x1c>
 8002338:	42a0      	cmp	r0, r4
 800233a:	d001      	beq.n	8002340 <strncmp+0x1c>
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f5      	bne.n	800232c <strncmp+0x8>
 8002340:	1a98      	subs	r0, r3, r2
 8002342:	bd10      	pop	{r4, pc}
 8002344:	4610      	mov	r0, r2
 8002346:	e7fc      	b.n	8002342 <strncmp+0x1e>

08002348 <strtok>:
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <strtok+0x50>)
 800234a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800234e:	681d      	ldr	r5, [r3, #0]
 8002350:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8002352:	4606      	mov	r6, r0
 8002354:	460f      	mov	r7, r1
 8002356:	b9b4      	cbnz	r4, 8002386 <strtok+0x3e>
 8002358:	2050      	movs	r0, #80	; 0x50
 800235a:	f000 f8df 	bl	800251c <malloc>
 800235e:	65a8      	str	r0, [r5, #88]	; 0x58
 8002360:	e9c0 4400 	strd	r4, r4, [r0]
 8002364:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8002368:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800236c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8002370:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8002374:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8002378:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800237c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8002380:	6184      	str	r4, [r0, #24]
 8002382:	7704      	strb	r4, [r0, #28]
 8002384:	6244      	str	r4, [r0, #36]	; 0x24
 8002386:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8002388:	4639      	mov	r1, r7
 800238a:	4630      	mov	r0, r6
 800238c:	2301      	movs	r3, #1
 800238e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002392:	f000 b803 	b.w	800239c <__strtok_r>
 8002396:	bf00      	nop
 8002398:	20000000 	.word	0x20000000

0800239c <__strtok_r>:
 800239c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239e:	b918      	cbnz	r0, 80023a8 <__strtok_r+0xc>
 80023a0:	6810      	ldr	r0, [r2, #0]
 80023a2:	b908      	cbnz	r0, 80023a8 <__strtok_r+0xc>
 80023a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a6:	4620      	mov	r0, r4
 80023a8:	4604      	mov	r4, r0
 80023aa:	460f      	mov	r7, r1
 80023ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80023b0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80023b4:	b91e      	cbnz	r6, 80023be <__strtok_r+0x22>
 80023b6:	b96d      	cbnz	r5, 80023d4 <__strtok_r+0x38>
 80023b8:	6015      	str	r5, [r2, #0]
 80023ba:	4628      	mov	r0, r5
 80023bc:	e7f2      	b.n	80023a4 <__strtok_r+0x8>
 80023be:	42b5      	cmp	r5, r6
 80023c0:	d1f6      	bne.n	80023b0 <__strtok_r+0x14>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1ef      	bne.n	80023a6 <__strtok_r+0xa>
 80023c6:	6014      	str	r4, [r2, #0]
 80023c8:	7003      	strb	r3, [r0, #0]
 80023ca:	e7eb      	b.n	80023a4 <__strtok_r+0x8>
 80023cc:	462b      	mov	r3, r5
 80023ce:	e00d      	b.n	80023ec <__strtok_r+0x50>
 80023d0:	b926      	cbnz	r6, 80023dc <__strtok_r+0x40>
 80023d2:	461c      	mov	r4, r3
 80023d4:	4623      	mov	r3, r4
 80023d6:	460f      	mov	r7, r1
 80023d8:	f813 5b01 	ldrb.w	r5, [r3], #1
 80023dc:	f817 6b01 	ldrb.w	r6, [r7], #1
 80023e0:	42b5      	cmp	r5, r6
 80023e2:	d1f5      	bne.n	80023d0 <__strtok_r+0x34>
 80023e4:	2d00      	cmp	r5, #0
 80023e6:	d0f1      	beq.n	80023cc <__strtok_r+0x30>
 80023e8:	2100      	movs	r1, #0
 80023ea:	7021      	strb	r1, [r4, #0]
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e7d9      	b.n	80023a4 <__strtok_r+0x8>

080023f0 <_strtol_l.isra.0>:
 80023f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023f4:	4680      	mov	r8, r0
 80023f6:	4689      	mov	r9, r1
 80023f8:	4692      	mov	sl, r2
 80023fa:	461e      	mov	r6, r3
 80023fc:	460f      	mov	r7, r1
 80023fe:	463d      	mov	r5, r7
 8002400:	9808      	ldr	r0, [sp, #32]
 8002402:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002406:	f000 f885 	bl	8002514 <__locale_ctype_ptr_l>
 800240a:	4420      	add	r0, r4
 800240c:	7843      	ldrb	r3, [r0, #1]
 800240e:	f013 0308 	ands.w	r3, r3, #8
 8002412:	d132      	bne.n	800247a <_strtol_l.isra.0+0x8a>
 8002414:	2c2d      	cmp	r4, #45	; 0x2d
 8002416:	d132      	bne.n	800247e <_strtol_l.isra.0+0x8e>
 8002418:	787c      	ldrb	r4, [r7, #1]
 800241a:	1cbd      	adds	r5, r7, #2
 800241c:	2201      	movs	r2, #1
 800241e:	2e00      	cmp	r6, #0
 8002420:	d05d      	beq.n	80024de <_strtol_l.isra.0+0xee>
 8002422:	2e10      	cmp	r6, #16
 8002424:	d109      	bne.n	800243a <_strtol_l.isra.0+0x4a>
 8002426:	2c30      	cmp	r4, #48	; 0x30
 8002428:	d107      	bne.n	800243a <_strtol_l.isra.0+0x4a>
 800242a:	782b      	ldrb	r3, [r5, #0]
 800242c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002430:	2b58      	cmp	r3, #88	; 0x58
 8002432:	d14f      	bne.n	80024d4 <_strtol_l.isra.0+0xe4>
 8002434:	786c      	ldrb	r4, [r5, #1]
 8002436:	2610      	movs	r6, #16
 8002438:	3502      	adds	r5, #2
 800243a:	2a00      	cmp	r2, #0
 800243c:	bf14      	ite	ne
 800243e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002442:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002446:	2700      	movs	r7, #0
 8002448:	fbb1 fcf6 	udiv	ip, r1, r6
 800244c:	4638      	mov	r0, r7
 800244e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8002452:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002456:	2b09      	cmp	r3, #9
 8002458:	d817      	bhi.n	800248a <_strtol_l.isra.0+0x9a>
 800245a:	461c      	mov	r4, r3
 800245c:	42a6      	cmp	r6, r4
 800245e:	dd23      	ble.n	80024a8 <_strtol_l.isra.0+0xb8>
 8002460:	1c7b      	adds	r3, r7, #1
 8002462:	d007      	beq.n	8002474 <_strtol_l.isra.0+0x84>
 8002464:	4584      	cmp	ip, r0
 8002466:	d31c      	bcc.n	80024a2 <_strtol_l.isra.0+0xb2>
 8002468:	d101      	bne.n	800246e <_strtol_l.isra.0+0x7e>
 800246a:	45a6      	cmp	lr, r4
 800246c:	db19      	blt.n	80024a2 <_strtol_l.isra.0+0xb2>
 800246e:	fb00 4006 	mla	r0, r0, r6, r4
 8002472:	2701      	movs	r7, #1
 8002474:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002478:	e7eb      	b.n	8002452 <_strtol_l.isra.0+0x62>
 800247a:	462f      	mov	r7, r5
 800247c:	e7bf      	b.n	80023fe <_strtol_l.isra.0+0xe>
 800247e:	2c2b      	cmp	r4, #43	; 0x2b
 8002480:	bf04      	itt	eq
 8002482:	1cbd      	addeq	r5, r7, #2
 8002484:	787c      	ldrbeq	r4, [r7, #1]
 8002486:	461a      	mov	r2, r3
 8002488:	e7c9      	b.n	800241e <_strtol_l.isra.0+0x2e>
 800248a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800248e:	2b19      	cmp	r3, #25
 8002490:	d801      	bhi.n	8002496 <_strtol_l.isra.0+0xa6>
 8002492:	3c37      	subs	r4, #55	; 0x37
 8002494:	e7e2      	b.n	800245c <_strtol_l.isra.0+0x6c>
 8002496:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800249a:	2b19      	cmp	r3, #25
 800249c:	d804      	bhi.n	80024a8 <_strtol_l.isra.0+0xb8>
 800249e:	3c57      	subs	r4, #87	; 0x57
 80024a0:	e7dc      	b.n	800245c <_strtol_l.isra.0+0x6c>
 80024a2:	f04f 37ff 	mov.w	r7, #4294967295
 80024a6:	e7e5      	b.n	8002474 <_strtol_l.isra.0+0x84>
 80024a8:	1c7b      	adds	r3, r7, #1
 80024aa:	d108      	bne.n	80024be <_strtol_l.isra.0+0xce>
 80024ac:	2322      	movs	r3, #34	; 0x22
 80024ae:	f8c8 3000 	str.w	r3, [r8]
 80024b2:	4608      	mov	r0, r1
 80024b4:	f1ba 0f00 	cmp.w	sl, #0
 80024b8:	d107      	bne.n	80024ca <_strtol_l.isra.0+0xda>
 80024ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024be:	b102      	cbz	r2, 80024c2 <_strtol_l.isra.0+0xd2>
 80024c0:	4240      	negs	r0, r0
 80024c2:	f1ba 0f00 	cmp.w	sl, #0
 80024c6:	d0f8      	beq.n	80024ba <_strtol_l.isra.0+0xca>
 80024c8:	b10f      	cbz	r7, 80024ce <_strtol_l.isra.0+0xde>
 80024ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80024ce:	f8ca 9000 	str.w	r9, [sl]
 80024d2:	e7f2      	b.n	80024ba <_strtol_l.isra.0+0xca>
 80024d4:	2430      	movs	r4, #48	; 0x30
 80024d6:	2e00      	cmp	r6, #0
 80024d8:	d1af      	bne.n	800243a <_strtol_l.isra.0+0x4a>
 80024da:	2608      	movs	r6, #8
 80024dc:	e7ad      	b.n	800243a <_strtol_l.isra.0+0x4a>
 80024de:	2c30      	cmp	r4, #48	; 0x30
 80024e0:	d0a3      	beq.n	800242a <_strtol_l.isra.0+0x3a>
 80024e2:	260a      	movs	r6, #10
 80024e4:	e7a9      	b.n	800243a <_strtol_l.isra.0+0x4a>
	...

080024e8 <strtol>:
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <strtol+0x24>)
 80024ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024ec:	681c      	ldr	r4, [r3, #0]
 80024ee:	4d08      	ldr	r5, [pc, #32]	; (8002510 <strtol+0x28>)
 80024f0:	6a23      	ldr	r3, [r4, #32]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	bf08      	it	eq
 80024f6:	462b      	moveq	r3, r5
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	4613      	mov	r3, r2
 80024fc:	460a      	mov	r2, r1
 80024fe:	4601      	mov	r1, r0
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff ff75 	bl	80023f0 <_strtol_l.isra.0>
 8002506:	b003      	add	sp, #12
 8002508:	bd30      	pop	{r4, r5, pc}
 800250a:	bf00      	nop
 800250c:	20000000 	.word	0x20000000
 8002510:	20000064 	.word	0x20000064

08002514 <__locale_ctype_ptr_l>:
 8002514:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002518:	4770      	bx	lr
	...

0800251c <malloc>:
 800251c:	4b02      	ldr	r3, [pc, #8]	; (8002528 <malloc+0xc>)
 800251e:	4601      	mov	r1, r0
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	f000 b863 	b.w	80025ec <_malloc_r>
 8002526:	bf00      	nop
 8002528:	20000000 	.word	0x20000000

0800252c <__ascii_mbtowc>:
 800252c:	b082      	sub	sp, #8
 800252e:	b901      	cbnz	r1, 8002532 <__ascii_mbtowc+0x6>
 8002530:	a901      	add	r1, sp, #4
 8002532:	b142      	cbz	r2, 8002546 <__ascii_mbtowc+0x1a>
 8002534:	b14b      	cbz	r3, 800254a <__ascii_mbtowc+0x1e>
 8002536:	7813      	ldrb	r3, [r2, #0]
 8002538:	600b      	str	r3, [r1, #0]
 800253a:	7812      	ldrb	r2, [r2, #0]
 800253c:	1c10      	adds	r0, r2, #0
 800253e:	bf18      	it	ne
 8002540:	2001      	movne	r0, #1
 8002542:	b002      	add	sp, #8
 8002544:	4770      	bx	lr
 8002546:	4610      	mov	r0, r2
 8002548:	e7fb      	b.n	8002542 <__ascii_mbtowc+0x16>
 800254a:	f06f 0001 	mvn.w	r0, #1
 800254e:	e7f8      	b.n	8002542 <__ascii_mbtowc+0x16>

08002550 <_free_r>:
 8002550:	b538      	push	{r3, r4, r5, lr}
 8002552:	4605      	mov	r5, r0
 8002554:	2900      	cmp	r1, #0
 8002556:	d045      	beq.n	80025e4 <_free_r+0x94>
 8002558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800255c:	1f0c      	subs	r4, r1, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	bfb8      	it	lt
 8002562:	18e4      	addlt	r4, r4, r3
 8002564:	f000 fbac 	bl	8002cc0 <__malloc_lock>
 8002568:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <_free_r+0x98>)
 800256a:	6813      	ldr	r3, [r2, #0]
 800256c:	4610      	mov	r0, r2
 800256e:	b933      	cbnz	r3, 800257e <_free_r+0x2e>
 8002570:	6063      	str	r3, [r4, #4]
 8002572:	6014      	str	r4, [r2, #0]
 8002574:	4628      	mov	r0, r5
 8002576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800257a:	f000 bba2 	b.w	8002cc2 <__malloc_unlock>
 800257e:	42a3      	cmp	r3, r4
 8002580:	d90c      	bls.n	800259c <_free_r+0x4c>
 8002582:	6821      	ldr	r1, [r4, #0]
 8002584:	1862      	adds	r2, r4, r1
 8002586:	4293      	cmp	r3, r2
 8002588:	bf04      	itt	eq
 800258a:	681a      	ldreq	r2, [r3, #0]
 800258c:	685b      	ldreq	r3, [r3, #4]
 800258e:	6063      	str	r3, [r4, #4]
 8002590:	bf04      	itt	eq
 8002592:	1852      	addeq	r2, r2, r1
 8002594:	6022      	streq	r2, [r4, #0]
 8002596:	6004      	str	r4, [r0, #0]
 8002598:	e7ec      	b.n	8002574 <_free_r+0x24>
 800259a:	4613      	mov	r3, r2
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	b10a      	cbz	r2, 80025a4 <_free_r+0x54>
 80025a0:	42a2      	cmp	r2, r4
 80025a2:	d9fa      	bls.n	800259a <_free_r+0x4a>
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	1858      	adds	r0, r3, r1
 80025a8:	42a0      	cmp	r0, r4
 80025aa:	d10b      	bne.n	80025c4 <_free_r+0x74>
 80025ac:	6820      	ldr	r0, [r4, #0]
 80025ae:	4401      	add	r1, r0
 80025b0:	1858      	adds	r0, r3, r1
 80025b2:	4282      	cmp	r2, r0
 80025b4:	6019      	str	r1, [r3, #0]
 80025b6:	d1dd      	bne.n	8002574 <_free_r+0x24>
 80025b8:	6810      	ldr	r0, [r2, #0]
 80025ba:	6852      	ldr	r2, [r2, #4]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	4401      	add	r1, r0
 80025c0:	6019      	str	r1, [r3, #0]
 80025c2:	e7d7      	b.n	8002574 <_free_r+0x24>
 80025c4:	d902      	bls.n	80025cc <_free_r+0x7c>
 80025c6:	230c      	movs	r3, #12
 80025c8:	602b      	str	r3, [r5, #0]
 80025ca:	e7d3      	b.n	8002574 <_free_r+0x24>
 80025cc:	6820      	ldr	r0, [r4, #0]
 80025ce:	1821      	adds	r1, r4, r0
 80025d0:	428a      	cmp	r2, r1
 80025d2:	bf04      	itt	eq
 80025d4:	6811      	ldreq	r1, [r2, #0]
 80025d6:	6852      	ldreq	r2, [r2, #4]
 80025d8:	6062      	str	r2, [r4, #4]
 80025da:	bf04      	itt	eq
 80025dc:	1809      	addeq	r1, r1, r0
 80025de:	6021      	streq	r1, [r4, #0]
 80025e0:	605c      	str	r4, [r3, #4]
 80025e2:	e7c7      	b.n	8002574 <_free_r+0x24>
 80025e4:	bd38      	pop	{r3, r4, r5, pc}
 80025e6:	bf00      	nop
 80025e8:	20000208 	.word	0x20000208

080025ec <_malloc_r>:
 80025ec:	b570      	push	{r4, r5, r6, lr}
 80025ee:	1ccd      	adds	r5, r1, #3
 80025f0:	f025 0503 	bic.w	r5, r5, #3
 80025f4:	3508      	adds	r5, #8
 80025f6:	2d0c      	cmp	r5, #12
 80025f8:	bf38      	it	cc
 80025fa:	250c      	movcc	r5, #12
 80025fc:	2d00      	cmp	r5, #0
 80025fe:	4606      	mov	r6, r0
 8002600:	db01      	blt.n	8002606 <_malloc_r+0x1a>
 8002602:	42a9      	cmp	r1, r5
 8002604:	d903      	bls.n	800260e <_malloc_r+0x22>
 8002606:	230c      	movs	r3, #12
 8002608:	6033      	str	r3, [r6, #0]
 800260a:	2000      	movs	r0, #0
 800260c:	bd70      	pop	{r4, r5, r6, pc}
 800260e:	f000 fb57 	bl	8002cc0 <__malloc_lock>
 8002612:	4a21      	ldr	r2, [pc, #132]	; (8002698 <_malloc_r+0xac>)
 8002614:	6814      	ldr	r4, [r2, #0]
 8002616:	4621      	mov	r1, r4
 8002618:	b991      	cbnz	r1, 8002640 <_malloc_r+0x54>
 800261a:	4c20      	ldr	r4, [pc, #128]	; (800269c <_malloc_r+0xb0>)
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	b91b      	cbnz	r3, 8002628 <_malloc_r+0x3c>
 8002620:	4630      	mov	r0, r6
 8002622:	f000 fb17 	bl	8002c54 <_sbrk_r>
 8002626:	6020      	str	r0, [r4, #0]
 8002628:	4629      	mov	r1, r5
 800262a:	4630      	mov	r0, r6
 800262c:	f000 fb12 	bl	8002c54 <_sbrk_r>
 8002630:	1c43      	adds	r3, r0, #1
 8002632:	d124      	bne.n	800267e <_malloc_r+0x92>
 8002634:	230c      	movs	r3, #12
 8002636:	6033      	str	r3, [r6, #0]
 8002638:	4630      	mov	r0, r6
 800263a:	f000 fb42 	bl	8002cc2 <__malloc_unlock>
 800263e:	e7e4      	b.n	800260a <_malloc_r+0x1e>
 8002640:	680b      	ldr	r3, [r1, #0]
 8002642:	1b5b      	subs	r3, r3, r5
 8002644:	d418      	bmi.n	8002678 <_malloc_r+0x8c>
 8002646:	2b0b      	cmp	r3, #11
 8002648:	d90f      	bls.n	800266a <_malloc_r+0x7e>
 800264a:	600b      	str	r3, [r1, #0]
 800264c:	50cd      	str	r5, [r1, r3]
 800264e:	18cc      	adds	r4, r1, r3
 8002650:	4630      	mov	r0, r6
 8002652:	f000 fb36 	bl	8002cc2 <__malloc_unlock>
 8002656:	f104 000b 	add.w	r0, r4, #11
 800265a:	1d23      	adds	r3, r4, #4
 800265c:	f020 0007 	bic.w	r0, r0, #7
 8002660:	1ac3      	subs	r3, r0, r3
 8002662:	d0d3      	beq.n	800260c <_malloc_r+0x20>
 8002664:	425a      	negs	r2, r3
 8002666:	50e2      	str	r2, [r4, r3]
 8002668:	e7d0      	b.n	800260c <_malloc_r+0x20>
 800266a:	428c      	cmp	r4, r1
 800266c:	684b      	ldr	r3, [r1, #4]
 800266e:	bf16      	itet	ne
 8002670:	6063      	strne	r3, [r4, #4]
 8002672:	6013      	streq	r3, [r2, #0]
 8002674:	460c      	movne	r4, r1
 8002676:	e7eb      	b.n	8002650 <_malloc_r+0x64>
 8002678:	460c      	mov	r4, r1
 800267a:	6849      	ldr	r1, [r1, #4]
 800267c:	e7cc      	b.n	8002618 <_malloc_r+0x2c>
 800267e:	1cc4      	adds	r4, r0, #3
 8002680:	f024 0403 	bic.w	r4, r4, #3
 8002684:	42a0      	cmp	r0, r4
 8002686:	d005      	beq.n	8002694 <_malloc_r+0xa8>
 8002688:	1a21      	subs	r1, r4, r0
 800268a:	4630      	mov	r0, r6
 800268c:	f000 fae2 	bl	8002c54 <_sbrk_r>
 8002690:	3001      	adds	r0, #1
 8002692:	d0cf      	beq.n	8002634 <_malloc_r+0x48>
 8002694:	6025      	str	r5, [r4, #0]
 8002696:	e7db      	b.n	8002650 <_malloc_r+0x64>
 8002698:	20000208 	.word	0x20000208
 800269c:	2000020c 	.word	0x2000020c

080026a0 <__ssputs_r>:
 80026a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026a4:	688e      	ldr	r6, [r1, #8]
 80026a6:	429e      	cmp	r6, r3
 80026a8:	4682      	mov	sl, r0
 80026aa:	460c      	mov	r4, r1
 80026ac:	4690      	mov	r8, r2
 80026ae:	4699      	mov	r9, r3
 80026b0:	d837      	bhi.n	8002722 <__ssputs_r+0x82>
 80026b2:	898a      	ldrh	r2, [r1, #12]
 80026b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80026b8:	d031      	beq.n	800271e <__ssputs_r+0x7e>
 80026ba:	6825      	ldr	r5, [r4, #0]
 80026bc:	6909      	ldr	r1, [r1, #16]
 80026be:	1a6f      	subs	r7, r5, r1
 80026c0:	6965      	ldr	r5, [r4, #20]
 80026c2:	2302      	movs	r3, #2
 80026c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80026cc:	f109 0301 	add.w	r3, r9, #1
 80026d0:	443b      	add	r3, r7
 80026d2:	429d      	cmp	r5, r3
 80026d4:	bf38      	it	cc
 80026d6:	461d      	movcc	r5, r3
 80026d8:	0553      	lsls	r3, r2, #21
 80026da:	d530      	bpl.n	800273e <__ssputs_r+0x9e>
 80026dc:	4629      	mov	r1, r5
 80026de:	f7ff ff85 	bl	80025ec <_malloc_r>
 80026e2:	4606      	mov	r6, r0
 80026e4:	b950      	cbnz	r0, 80026fc <__ssputs_r+0x5c>
 80026e6:	230c      	movs	r3, #12
 80026e8:	f8ca 3000 	str.w	r3, [sl]
 80026ec:	89a3      	ldrh	r3, [r4, #12]
 80026ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f2:	81a3      	strh	r3, [r4, #12]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026fc:	463a      	mov	r2, r7
 80026fe:	6921      	ldr	r1, [r4, #16]
 8002700:	f7ff fddc 	bl	80022bc <memcpy>
 8002704:	89a3      	ldrh	r3, [r4, #12]
 8002706:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800270a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270e:	81a3      	strh	r3, [r4, #12]
 8002710:	6126      	str	r6, [r4, #16]
 8002712:	6165      	str	r5, [r4, #20]
 8002714:	443e      	add	r6, r7
 8002716:	1bed      	subs	r5, r5, r7
 8002718:	6026      	str	r6, [r4, #0]
 800271a:	60a5      	str	r5, [r4, #8]
 800271c:	464e      	mov	r6, r9
 800271e:	454e      	cmp	r6, r9
 8002720:	d900      	bls.n	8002724 <__ssputs_r+0x84>
 8002722:	464e      	mov	r6, r9
 8002724:	4632      	mov	r2, r6
 8002726:	4641      	mov	r1, r8
 8002728:	6820      	ldr	r0, [r4, #0]
 800272a:	f000 fab0 	bl	8002c8e <memmove>
 800272e:	68a3      	ldr	r3, [r4, #8]
 8002730:	1b9b      	subs	r3, r3, r6
 8002732:	60a3      	str	r3, [r4, #8]
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	441e      	add	r6, r3
 8002738:	6026      	str	r6, [r4, #0]
 800273a:	2000      	movs	r0, #0
 800273c:	e7dc      	b.n	80026f8 <__ssputs_r+0x58>
 800273e:	462a      	mov	r2, r5
 8002740:	f000 fac0 	bl	8002cc4 <_realloc_r>
 8002744:	4606      	mov	r6, r0
 8002746:	2800      	cmp	r0, #0
 8002748:	d1e2      	bne.n	8002710 <__ssputs_r+0x70>
 800274a:	6921      	ldr	r1, [r4, #16]
 800274c:	4650      	mov	r0, sl
 800274e:	f7ff feff 	bl	8002550 <_free_r>
 8002752:	e7c8      	b.n	80026e6 <__ssputs_r+0x46>

08002754 <_svfiprintf_r>:
 8002754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002758:	461d      	mov	r5, r3
 800275a:	898b      	ldrh	r3, [r1, #12]
 800275c:	061f      	lsls	r7, r3, #24
 800275e:	b09d      	sub	sp, #116	; 0x74
 8002760:	4680      	mov	r8, r0
 8002762:	460c      	mov	r4, r1
 8002764:	4616      	mov	r6, r2
 8002766:	d50f      	bpl.n	8002788 <_svfiprintf_r+0x34>
 8002768:	690b      	ldr	r3, [r1, #16]
 800276a:	b96b      	cbnz	r3, 8002788 <_svfiprintf_r+0x34>
 800276c:	2140      	movs	r1, #64	; 0x40
 800276e:	f7ff ff3d 	bl	80025ec <_malloc_r>
 8002772:	6020      	str	r0, [r4, #0]
 8002774:	6120      	str	r0, [r4, #16]
 8002776:	b928      	cbnz	r0, 8002784 <_svfiprintf_r+0x30>
 8002778:	230c      	movs	r3, #12
 800277a:	f8c8 3000 	str.w	r3, [r8]
 800277e:	f04f 30ff 	mov.w	r0, #4294967295
 8002782:	e0c8      	b.n	8002916 <_svfiprintf_r+0x1c2>
 8002784:	2340      	movs	r3, #64	; 0x40
 8002786:	6163      	str	r3, [r4, #20]
 8002788:	2300      	movs	r3, #0
 800278a:	9309      	str	r3, [sp, #36]	; 0x24
 800278c:	2320      	movs	r3, #32
 800278e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002792:	2330      	movs	r3, #48	; 0x30
 8002794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002798:	9503      	str	r5, [sp, #12]
 800279a:	f04f 0b01 	mov.w	fp, #1
 800279e:	4637      	mov	r7, r6
 80027a0:	463d      	mov	r5, r7
 80027a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80027a6:	b10b      	cbz	r3, 80027ac <_svfiprintf_r+0x58>
 80027a8:	2b25      	cmp	r3, #37	; 0x25
 80027aa:	d13e      	bne.n	800282a <_svfiprintf_r+0xd6>
 80027ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80027b0:	d00b      	beq.n	80027ca <_svfiprintf_r+0x76>
 80027b2:	4653      	mov	r3, sl
 80027b4:	4632      	mov	r2, r6
 80027b6:	4621      	mov	r1, r4
 80027b8:	4640      	mov	r0, r8
 80027ba:	f7ff ff71 	bl	80026a0 <__ssputs_r>
 80027be:	3001      	adds	r0, #1
 80027c0:	f000 80a4 	beq.w	800290c <_svfiprintf_r+0x1b8>
 80027c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027c6:	4453      	add	r3, sl
 80027c8:	9309      	str	r3, [sp, #36]	; 0x24
 80027ca:	783b      	ldrb	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 809d 	beq.w	800290c <_svfiprintf_r+0x1b8>
 80027d2:	2300      	movs	r3, #0
 80027d4:	f04f 32ff 	mov.w	r2, #4294967295
 80027d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027dc:	9304      	str	r3, [sp, #16]
 80027de:	9307      	str	r3, [sp, #28]
 80027e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027e4:	931a      	str	r3, [sp, #104]	; 0x68
 80027e6:	462f      	mov	r7, r5
 80027e8:	2205      	movs	r2, #5
 80027ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80027ee:	4850      	ldr	r0, [pc, #320]	; (8002930 <_svfiprintf_r+0x1dc>)
 80027f0:	f7fd fcfe 	bl	80001f0 <memchr>
 80027f4:	9b04      	ldr	r3, [sp, #16]
 80027f6:	b9d0      	cbnz	r0, 800282e <_svfiprintf_r+0xda>
 80027f8:	06d9      	lsls	r1, r3, #27
 80027fa:	bf44      	itt	mi
 80027fc:	2220      	movmi	r2, #32
 80027fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002802:	071a      	lsls	r2, r3, #28
 8002804:	bf44      	itt	mi
 8002806:	222b      	movmi	r2, #43	; 0x2b
 8002808:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800280c:	782a      	ldrb	r2, [r5, #0]
 800280e:	2a2a      	cmp	r2, #42	; 0x2a
 8002810:	d015      	beq.n	800283e <_svfiprintf_r+0xea>
 8002812:	9a07      	ldr	r2, [sp, #28]
 8002814:	462f      	mov	r7, r5
 8002816:	2000      	movs	r0, #0
 8002818:	250a      	movs	r5, #10
 800281a:	4639      	mov	r1, r7
 800281c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002820:	3b30      	subs	r3, #48	; 0x30
 8002822:	2b09      	cmp	r3, #9
 8002824:	d94d      	bls.n	80028c2 <_svfiprintf_r+0x16e>
 8002826:	b1b8      	cbz	r0, 8002858 <_svfiprintf_r+0x104>
 8002828:	e00f      	b.n	800284a <_svfiprintf_r+0xf6>
 800282a:	462f      	mov	r7, r5
 800282c:	e7b8      	b.n	80027a0 <_svfiprintf_r+0x4c>
 800282e:	4a40      	ldr	r2, [pc, #256]	; (8002930 <_svfiprintf_r+0x1dc>)
 8002830:	1a80      	subs	r0, r0, r2
 8002832:	fa0b f000 	lsl.w	r0, fp, r0
 8002836:	4318      	orrs	r0, r3
 8002838:	9004      	str	r0, [sp, #16]
 800283a:	463d      	mov	r5, r7
 800283c:	e7d3      	b.n	80027e6 <_svfiprintf_r+0x92>
 800283e:	9a03      	ldr	r2, [sp, #12]
 8002840:	1d11      	adds	r1, r2, #4
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	9103      	str	r1, [sp, #12]
 8002846:	2a00      	cmp	r2, #0
 8002848:	db01      	blt.n	800284e <_svfiprintf_r+0xfa>
 800284a:	9207      	str	r2, [sp, #28]
 800284c:	e004      	b.n	8002858 <_svfiprintf_r+0x104>
 800284e:	4252      	negs	r2, r2
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	9207      	str	r2, [sp, #28]
 8002856:	9304      	str	r3, [sp, #16]
 8002858:	783b      	ldrb	r3, [r7, #0]
 800285a:	2b2e      	cmp	r3, #46	; 0x2e
 800285c:	d10c      	bne.n	8002878 <_svfiprintf_r+0x124>
 800285e:	787b      	ldrb	r3, [r7, #1]
 8002860:	2b2a      	cmp	r3, #42	; 0x2a
 8002862:	d133      	bne.n	80028cc <_svfiprintf_r+0x178>
 8002864:	9b03      	ldr	r3, [sp, #12]
 8002866:	1d1a      	adds	r2, r3, #4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	9203      	str	r2, [sp, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	bfb8      	it	lt
 8002870:	f04f 33ff 	movlt.w	r3, #4294967295
 8002874:	3702      	adds	r7, #2
 8002876:	9305      	str	r3, [sp, #20]
 8002878:	4d2e      	ldr	r5, [pc, #184]	; (8002934 <_svfiprintf_r+0x1e0>)
 800287a:	7839      	ldrb	r1, [r7, #0]
 800287c:	2203      	movs	r2, #3
 800287e:	4628      	mov	r0, r5
 8002880:	f7fd fcb6 	bl	80001f0 <memchr>
 8002884:	b138      	cbz	r0, 8002896 <_svfiprintf_r+0x142>
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	1b40      	subs	r0, r0, r5
 800288a:	fa03 f000 	lsl.w	r0, r3, r0
 800288e:	9b04      	ldr	r3, [sp, #16]
 8002890:	4303      	orrs	r3, r0
 8002892:	3701      	adds	r7, #1
 8002894:	9304      	str	r3, [sp, #16]
 8002896:	7839      	ldrb	r1, [r7, #0]
 8002898:	4827      	ldr	r0, [pc, #156]	; (8002938 <_svfiprintf_r+0x1e4>)
 800289a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800289e:	2206      	movs	r2, #6
 80028a0:	1c7e      	adds	r6, r7, #1
 80028a2:	f7fd fca5 	bl	80001f0 <memchr>
 80028a6:	2800      	cmp	r0, #0
 80028a8:	d038      	beq.n	800291c <_svfiprintf_r+0x1c8>
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <_svfiprintf_r+0x1e8>)
 80028ac:	bb13      	cbnz	r3, 80028f4 <_svfiprintf_r+0x1a0>
 80028ae:	9b03      	ldr	r3, [sp, #12]
 80028b0:	3307      	adds	r3, #7
 80028b2:	f023 0307 	bic.w	r3, r3, #7
 80028b6:	3308      	adds	r3, #8
 80028b8:	9303      	str	r3, [sp, #12]
 80028ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028bc:	444b      	add	r3, r9
 80028be:	9309      	str	r3, [sp, #36]	; 0x24
 80028c0:	e76d      	b.n	800279e <_svfiprintf_r+0x4a>
 80028c2:	fb05 3202 	mla	r2, r5, r2, r3
 80028c6:	2001      	movs	r0, #1
 80028c8:	460f      	mov	r7, r1
 80028ca:	e7a6      	b.n	800281a <_svfiprintf_r+0xc6>
 80028cc:	2300      	movs	r3, #0
 80028ce:	3701      	adds	r7, #1
 80028d0:	9305      	str	r3, [sp, #20]
 80028d2:	4619      	mov	r1, r3
 80028d4:	250a      	movs	r5, #10
 80028d6:	4638      	mov	r0, r7
 80028d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028dc:	3a30      	subs	r2, #48	; 0x30
 80028de:	2a09      	cmp	r2, #9
 80028e0:	d903      	bls.n	80028ea <_svfiprintf_r+0x196>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0c8      	beq.n	8002878 <_svfiprintf_r+0x124>
 80028e6:	9105      	str	r1, [sp, #20]
 80028e8:	e7c6      	b.n	8002878 <_svfiprintf_r+0x124>
 80028ea:	fb05 2101 	mla	r1, r5, r1, r2
 80028ee:	2301      	movs	r3, #1
 80028f0:	4607      	mov	r7, r0
 80028f2:	e7f0      	b.n	80028d6 <_svfiprintf_r+0x182>
 80028f4:	ab03      	add	r3, sp, #12
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	4622      	mov	r2, r4
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <_svfiprintf_r+0x1ec>)
 80028fc:	a904      	add	r1, sp, #16
 80028fe:	4640      	mov	r0, r8
 8002900:	f3af 8000 	nop.w
 8002904:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002908:	4681      	mov	r9, r0
 800290a:	d1d6      	bne.n	80028ba <_svfiprintf_r+0x166>
 800290c:	89a3      	ldrh	r3, [r4, #12]
 800290e:	065b      	lsls	r3, r3, #25
 8002910:	f53f af35 	bmi.w	800277e <_svfiprintf_r+0x2a>
 8002914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002916:	b01d      	add	sp, #116	; 0x74
 8002918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800291c:	ab03      	add	r3, sp, #12
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	4622      	mov	r2, r4
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <_svfiprintf_r+0x1ec>)
 8002924:	a904      	add	r1, sp, #16
 8002926:	4640      	mov	r0, r8
 8002928:	f000 f882 	bl	8002a30 <_printf_i>
 800292c:	e7ea      	b.n	8002904 <_svfiprintf_r+0x1b0>
 800292e:	bf00      	nop
 8002930:	08002ebd 	.word	0x08002ebd
 8002934:	08002ec3 	.word	0x08002ec3
 8002938:	08002ec7 	.word	0x08002ec7
 800293c:	00000000 	.word	0x00000000
 8002940:	080026a1 	.word	0x080026a1

08002944 <_printf_common>:
 8002944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002948:	4691      	mov	r9, r2
 800294a:	461f      	mov	r7, r3
 800294c:	688a      	ldr	r2, [r1, #8]
 800294e:	690b      	ldr	r3, [r1, #16]
 8002950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002954:	4293      	cmp	r3, r2
 8002956:	bfb8      	it	lt
 8002958:	4613      	movlt	r3, r2
 800295a:	f8c9 3000 	str.w	r3, [r9]
 800295e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002962:	4606      	mov	r6, r0
 8002964:	460c      	mov	r4, r1
 8002966:	b112      	cbz	r2, 800296e <_printf_common+0x2a>
 8002968:	3301      	adds	r3, #1
 800296a:	f8c9 3000 	str.w	r3, [r9]
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	0699      	lsls	r1, r3, #26
 8002972:	bf42      	ittt	mi
 8002974:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002978:	3302      	addmi	r3, #2
 800297a:	f8c9 3000 	strmi.w	r3, [r9]
 800297e:	6825      	ldr	r5, [r4, #0]
 8002980:	f015 0506 	ands.w	r5, r5, #6
 8002984:	d107      	bne.n	8002996 <_printf_common+0x52>
 8002986:	f104 0a19 	add.w	sl, r4, #25
 800298a:	68e3      	ldr	r3, [r4, #12]
 800298c:	f8d9 2000 	ldr.w	r2, [r9]
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	42ab      	cmp	r3, r5
 8002994:	dc28      	bgt.n	80029e8 <_printf_common+0xa4>
 8002996:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800299a:	6822      	ldr	r2, [r4, #0]
 800299c:	3300      	adds	r3, #0
 800299e:	bf18      	it	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	0692      	lsls	r2, r2, #26
 80029a4:	d42d      	bmi.n	8002a02 <_printf_common+0xbe>
 80029a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029aa:	4639      	mov	r1, r7
 80029ac:	4630      	mov	r0, r6
 80029ae:	47c0      	blx	r8
 80029b0:	3001      	adds	r0, #1
 80029b2:	d020      	beq.n	80029f6 <_printf_common+0xb2>
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	68e5      	ldr	r5, [r4, #12]
 80029b8:	f8d9 2000 	ldr.w	r2, [r9]
 80029bc:	f003 0306 	and.w	r3, r3, #6
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	bf08      	it	eq
 80029c4:	1aad      	subeq	r5, r5, r2
 80029c6:	68a3      	ldr	r3, [r4, #8]
 80029c8:	6922      	ldr	r2, [r4, #16]
 80029ca:	bf0c      	ite	eq
 80029cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029d0:	2500      	movne	r5, #0
 80029d2:	4293      	cmp	r3, r2
 80029d4:	bfc4      	itt	gt
 80029d6:	1a9b      	subgt	r3, r3, r2
 80029d8:	18ed      	addgt	r5, r5, r3
 80029da:	f04f 0900 	mov.w	r9, #0
 80029de:	341a      	adds	r4, #26
 80029e0:	454d      	cmp	r5, r9
 80029e2:	d11a      	bne.n	8002a1a <_printf_common+0xd6>
 80029e4:	2000      	movs	r0, #0
 80029e6:	e008      	b.n	80029fa <_printf_common+0xb6>
 80029e8:	2301      	movs	r3, #1
 80029ea:	4652      	mov	r2, sl
 80029ec:	4639      	mov	r1, r7
 80029ee:	4630      	mov	r0, r6
 80029f0:	47c0      	blx	r8
 80029f2:	3001      	adds	r0, #1
 80029f4:	d103      	bne.n	80029fe <_printf_common+0xba>
 80029f6:	f04f 30ff 	mov.w	r0, #4294967295
 80029fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029fe:	3501      	adds	r5, #1
 8002a00:	e7c3      	b.n	800298a <_printf_common+0x46>
 8002a02:	18e1      	adds	r1, r4, r3
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	2030      	movs	r0, #48	; 0x30
 8002a08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a0c:	4422      	add	r2, r4
 8002a0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a16:	3302      	adds	r3, #2
 8002a18:	e7c5      	b.n	80029a6 <_printf_common+0x62>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	4639      	mov	r1, r7
 8002a20:	4630      	mov	r0, r6
 8002a22:	47c0      	blx	r8
 8002a24:	3001      	adds	r0, #1
 8002a26:	d0e6      	beq.n	80029f6 <_printf_common+0xb2>
 8002a28:	f109 0901 	add.w	r9, r9, #1
 8002a2c:	e7d8      	b.n	80029e0 <_printf_common+0x9c>
	...

08002a30 <_printf_i>:
 8002a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002a38:	460c      	mov	r4, r1
 8002a3a:	7e09      	ldrb	r1, [r1, #24]
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	296e      	cmp	r1, #110	; 0x6e
 8002a40:	4617      	mov	r7, r2
 8002a42:	4606      	mov	r6, r0
 8002a44:	4698      	mov	r8, r3
 8002a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a48:	f000 80b3 	beq.w	8002bb2 <_printf_i+0x182>
 8002a4c:	d822      	bhi.n	8002a94 <_printf_i+0x64>
 8002a4e:	2963      	cmp	r1, #99	; 0x63
 8002a50:	d036      	beq.n	8002ac0 <_printf_i+0x90>
 8002a52:	d80a      	bhi.n	8002a6a <_printf_i+0x3a>
 8002a54:	2900      	cmp	r1, #0
 8002a56:	f000 80b9 	beq.w	8002bcc <_printf_i+0x19c>
 8002a5a:	2958      	cmp	r1, #88	; 0x58
 8002a5c:	f000 8083 	beq.w	8002b66 <_printf_i+0x136>
 8002a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002a68:	e032      	b.n	8002ad0 <_printf_i+0xa0>
 8002a6a:	2964      	cmp	r1, #100	; 0x64
 8002a6c:	d001      	beq.n	8002a72 <_printf_i+0x42>
 8002a6e:	2969      	cmp	r1, #105	; 0x69
 8002a70:	d1f6      	bne.n	8002a60 <_printf_i+0x30>
 8002a72:	6820      	ldr	r0, [r4, #0]
 8002a74:	6813      	ldr	r3, [r2, #0]
 8002a76:	0605      	lsls	r5, r0, #24
 8002a78:	f103 0104 	add.w	r1, r3, #4
 8002a7c:	d52a      	bpl.n	8002ad4 <_printf_i+0xa4>
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6011      	str	r1, [r2, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	da03      	bge.n	8002a8e <_printf_i+0x5e>
 8002a86:	222d      	movs	r2, #45	; 0x2d
 8002a88:	425b      	negs	r3, r3
 8002a8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002a8e:	486f      	ldr	r0, [pc, #444]	; (8002c4c <_printf_i+0x21c>)
 8002a90:	220a      	movs	r2, #10
 8002a92:	e039      	b.n	8002b08 <_printf_i+0xd8>
 8002a94:	2973      	cmp	r1, #115	; 0x73
 8002a96:	f000 809d 	beq.w	8002bd4 <_printf_i+0x1a4>
 8002a9a:	d808      	bhi.n	8002aae <_printf_i+0x7e>
 8002a9c:	296f      	cmp	r1, #111	; 0x6f
 8002a9e:	d020      	beq.n	8002ae2 <_printf_i+0xb2>
 8002aa0:	2970      	cmp	r1, #112	; 0x70
 8002aa2:	d1dd      	bne.n	8002a60 <_printf_i+0x30>
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	f043 0320 	orr.w	r3, r3, #32
 8002aaa:	6023      	str	r3, [r4, #0]
 8002aac:	e003      	b.n	8002ab6 <_printf_i+0x86>
 8002aae:	2975      	cmp	r1, #117	; 0x75
 8002ab0:	d017      	beq.n	8002ae2 <_printf_i+0xb2>
 8002ab2:	2978      	cmp	r1, #120	; 0x78
 8002ab4:	d1d4      	bne.n	8002a60 <_printf_i+0x30>
 8002ab6:	2378      	movs	r3, #120	; 0x78
 8002ab8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002abc:	4864      	ldr	r0, [pc, #400]	; (8002c50 <_printf_i+0x220>)
 8002abe:	e055      	b.n	8002b6c <_printf_i+0x13c>
 8002ac0:	6813      	ldr	r3, [r2, #0]
 8002ac2:	1d19      	adds	r1, r3, #4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6011      	str	r1, [r2, #0]
 8002ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e08c      	b.n	8002bee <_printf_i+0x1be>
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6011      	str	r1, [r2, #0]
 8002ad8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002adc:	bf18      	it	ne
 8002ade:	b21b      	sxthne	r3, r3
 8002ae0:	e7cf      	b.n	8002a82 <_printf_i+0x52>
 8002ae2:	6813      	ldr	r3, [r2, #0]
 8002ae4:	6825      	ldr	r5, [r4, #0]
 8002ae6:	1d18      	adds	r0, r3, #4
 8002ae8:	6010      	str	r0, [r2, #0]
 8002aea:	0628      	lsls	r0, r5, #24
 8002aec:	d501      	bpl.n	8002af2 <_printf_i+0xc2>
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	e002      	b.n	8002af8 <_printf_i+0xc8>
 8002af2:	0668      	lsls	r0, r5, #25
 8002af4:	d5fb      	bpl.n	8002aee <_printf_i+0xbe>
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	4854      	ldr	r0, [pc, #336]	; (8002c4c <_printf_i+0x21c>)
 8002afa:	296f      	cmp	r1, #111	; 0x6f
 8002afc:	bf14      	ite	ne
 8002afe:	220a      	movne	r2, #10
 8002b00:	2208      	moveq	r2, #8
 8002b02:	2100      	movs	r1, #0
 8002b04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b08:	6865      	ldr	r5, [r4, #4]
 8002b0a:	60a5      	str	r5, [r4, #8]
 8002b0c:	2d00      	cmp	r5, #0
 8002b0e:	f2c0 8095 	blt.w	8002c3c <_printf_i+0x20c>
 8002b12:	6821      	ldr	r1, [r4, #0]
 8002b14:	f021 0104 	bic.w	r1, r1, #4
 8002b18:	6021      	str	r1, [r4, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d13d      	bne.n	8002b9a <_printf_i+0x16a>
 8002b1e:	2d00      	cmp	r5, #0
 8002b20:	f040 808e 	bne.w	8002c40 <_printf_i+0x210>
 8002b24:	4665      	mov	r5, ip
 8002b26:	2a08      	cmp	r2, #8
 8002b28:	d10b      	bne.n	8002b42 <_printf_i+0x112>
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	07db      	lsls	r3, r3, #31
 8002b2e:	d508      	bpl.n	8002b42 <_printf_i+0x112>
 8002b30:	6923      	ldr	r3, [r4, #16]
 8002b32:	6862      	ldr	r2, [r4, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	bfde      	ittt	le
 8002b38:	2330      	movle	r3, #48	; 0x30
 8002b3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b42:	ebac 0305 	sub.w	r3, ip, r5
 8002b46:	6123      	str	r3, [r4, #16]
 8002b48:	f8cd 8000 	str.w	r8, [sp]
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	aa03      	add	r2, sp, #12
 8002b50:	4621      	mov	r1, r4
 8002b52:	4630      	mov	r0, r6
 8002b54:	f7ff fef6 	bl	8002944 <_printf_common>
 8002b58:	3001      	adds	r0, #1
 8002b5a:	d14d      	bne.n	8002bf8 <_printf_i+0x1c8>
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	b005      	add	sp, #20
 8002b62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b66:	4839      	ldr	r0, [pc, #228]	; (8002c4c <_printf_i+0x21c>)
 8002b68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002b6c:	6813      	ldr	r3, [r2, #0]
 8002b6e:	6821      	ldr	r1, [r4, #0]
 8002b70:	1d1d      	adds	r5, r3, #4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6015      	str	r5, [r2, #0]
 8002b76:	060a      	lsls	r2, r1, #24
 8002b78:	d50b      	bpl.n	8002b92 <_printf_i+0x162>
 8002b7a:	07ca      	lsls	r2, r1, #31
 8002b7c:	bf44      	itt	mi
 8002b7e:	f041 0120 	orrmi.w	r1, r1, #32
 8002b82:	6021      	strmi	r1, [r4, #0]
 8002b84:	b91b      	cbnz	r3, 8002b8e <_printf_i+0x15e>
 8002b86:	6822      	ldr	r2, [r4, #0]
 8002b88:	f022 0220 	bic.w	r2, r2, #32
 8002b8c:	6022      	str	r2, [r4, #0]
 8002b8e:	2210      	movs	r2, #16
 8002b90:	e7b7      	b.n	8002b02 <_printf_i+0xd2>
 8002b92:	064d      	lsls	r5, r1, #25
 8002b94:	bf48      	it	mi
 8002b96:	b29b      	uxthmi	r3, r3
 8002b98:	e7ef      	b.n	8002b7a <_printf_i+0x14a>
 8002b9a:	4665      	mov	r5, ip
 8002b9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ba0:	fb02 3311 	mls	r3, r2, r1, r3
 8002ba4:	5cc3      	ldrb	r3, [r0, r3]
 8002ba6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002baa:	460b      	mov	r3, r1
 8002bac:	2900      	cmp	r1, #0
 8002bae:	d1f5      	bne.n	8002b9c <_printf_i+0x16c>
 8002bb0:	e7b9      	b.n	8002b26 <_printf_i+0xf6>
 8002bb2:	6813      	ldr	r3, [r2, #0]
 8002bb4:	6825      	ldr	r5, [r4, #0]
 8002bb6:	6961      	ldr	r1, [r4, #20]
 8002bb8:	1d18      	adds	r0, r3, #4
 8002bba:	6010      	str	r0, [r2, #0]
 8002bbc:	0628      	lsls	r0, r5, #24
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	d501      	bpl.n	8002bc6 <_printf_i+0x196>
 8002bc2:	6019      	str	r1, [r3, #0]
 8002bc4:	e002      	b.n	8002bcc <_printf_i+0x19c>
 8002bc6:	066a      	lsls	r2, r5, #25
 8002bc8:	d5fb      	bpl.n	8002bc2 <_printf_i+0x192>
 8002bca:	8019      	strh	r1, [r3, #0]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	6123      	str	r3, [r4, #16]
 8002bd0:	4665      	mov	r5, ip
 8002bd2:	e7b9      	b.n	8002b48 <_printf_i+0x118>
 8002bd4:	6813      	ldr	r3, [r2, #0]
 8002bd6:	1d19      	adds	r1, r3, #4
 8002bd8:	6011      	str	r1, [r2, #0]
 8002bda:	681d      	ldr	r5, [r3, #0]
 8002bdc:	6862      	ldr	r2, [r4, #4]
 8002bde:	2100      	movs	r1, #0
 8002be0:	4628      	mov	r0, r5
 8002be2:	f7fd fb05 	bl	80001f0 <memchr>
 8002be6:	b108      	cbz	r0, 8002bec <_printf_i+0x1bc>
 8002be8:	1b40      	subs	r0, r0, r5
 8002bea:	6060      	str	r0, [r4, #4]
 8002bec:	6863      	ldr	r3, [r4, #4]
 8002bee:	6123      	str	r3, [r4, #16]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bf6:	e7a7      	b.n	8002b48 <_printf_i+0x118>
 8002bf8:	6923      	ldr	r3, [r4, #16]
 8002bfa:	462a      	mov	r2, r5
 8002bfc:	4639      	mov	r1, r7
 8002bfe:	4630      	mov	r0, r6
 8002c00:	47c0      	blx	r8
 8002c02:	3001      	adds	r0, #1
 8002c04:	d0aa      	beq.n	8002b5c <_printf_i+0x12c>
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	079b      	lsls	r3, r3, #30
 8002c0a:	d413      	bmi.n	8002c34 <_printf_i+0x204>
 8002c0c:	68e0      	ldr	r0, [r4, #12]
 8002c0e:	9b03      	ldr	r3, [sp, #12]
 8002c10:	4298      	cmp	r0, r3
 8002c12:	bfb8      	it	lt
 8002c14:	4618      	movlt	r0, r3
 8002c16:	e7a3      	b.n	8002b60 <_printf_i+0x130>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	464a      	mov	r2, r9
 8002c1c:	4639      	mov	r1, r7
 8002c1e:	4630      	mov	r0, r6
 8002c20:	47c0      	blx	r8
 8002c22:	3001      	adds	r0, #1
 8002c24:	d09a      	beq.n	8002b5c <_printf_i+0x12c>
 8002c26:	3501      	adds	r5, #1
 8002c28:	68e3      	ldr	r3, [r4, #12]
 8002c2a:	9a03      	ldr	r2, [sp, #12]
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	42ab      	cmp	r3, r5
 8002c30:	dcf2      	bgt.n	8002c18 <_printf_i+0x1e8>
 8002c32:	e7eb      	b.n	8002c0c <_printf_i+0x1dc>
 8002c34:	2500      	movs	r5, #0
 8002c36:	f104 0919 	add.w	r9, r4, #25
 8002c3a:	e7f5      	b.n	8002c28 <_printf_i+0x1f8>
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ac      	bne.n	8002b9a <_printf_i+0x16a>
 8002c40:	7803      	ldrb	r3, [r0, #0]
 8002c42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c4a:	e76c      	b.n	8002b26 <_printf_i+0xf6>
 8002c4c:	08002ece 	.word	0x08002ece
 8002c50:	08002edf 	.word	0x08002edf

08002c54 <_sbrk_r>:
 8002c54:	b538      	push	{r3, r4, r5, lr}
 8002c56:	4c06      	ldr	r4, [pc, #24]	; (8002c70 <_sbrk_r+0x1c>)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	4605      	mov	r5, r0
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	6023      	str	r3, [r4, #0]
 8002c60:	f7fe fcc6 	bl	80015f0 <_sbrk>
 8002c64:	1c43      	adds	r3, r0, #1
 8002c66:	d102      	bne.n	8002c6e <_sbrk_r+0x1a>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	b103      	cbz	r3, 8002c6e <_sbrk_r+0x1a>
 8002c6c:	602b      	str	r3, [r5, #0]
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}
 8002c70:	200002cc 	.word	0x200002cc

08002c74 <__ascii_wctomb>:
 8002c74:	b149      	cbz	r1, 8002c8a <__ascii_wctomb+0x16>
 8002c76:	2aff      	cmp	r2, #255	; 0xff
 8002c78:	bf85      	ittet	hi
 8002c7a:	238a      	movhi	r3, #138	; 0x8a
 8002c7c:	6003      	strhi	r3, [r0, #0]
 8002c7e:	700a      	strbls	r2, [r1, #0]
 8002c80:	f04f 30ff 	movhi.w	r0, #4294967295
 8002c84:	bf98      	it	ls
 8002c86:	2001      	movls	r0, #1
 8002c88:	4770      	bx	lr
 8002c8a:	4608      	mov	r0, r1
 8002c8c:	4770      	bx	lr

08002c8e <memmove>:
 8002c8e:	4288      	cmp	r0, r1
 8002c90:	b510      	push	{r4, lr}
 8002c92:	eb01 0302 	add.w	r3, r1, r2
 8002c96:	d807      	bhi.n	8002ca8 <memmove+0x1a>
 8002c98:	1e42      	subs	r2, r0, #1
 8002c9a:	4299      	cmp	r1, r3
 8002c9c:	d00a      	beq.n	8002cb4 <memmove+0x26>
 8002c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ca2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002ca6:	e7f8      	b.n	8002c9a <memmove+0xc>
 8002ca8:	4283      	cmp	r3, r0
 8002caa:	d9f5      	bls.n	8002c98 <memmove+0xa>
 8002cac:	1881      	adds	r1, r0, r2
 8002cae:	1ad2      	subs	r2, r2, r3
 8002cb0:	42d3      	cmn	r3, r2
 8002cb2:	d100      	bne.n	8002cb6 <memmove+0x28>
 8002cb4:	bd10      	pop	{r4, pc}
 8002cb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002cbe:	e7f7      	b.n	8002cb0 <memmove+0x22>

08002cc0 <__malloc_lock>:
 8002cc0:	4770      	bx	lr

08002cc2 <__malloc_unlock>:
 8002cc2:	4770      	bx	lr

08002cc4 <_realloc_r>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	4607      	mov	r7, r0
 8002cc8:	4614      	mov	r4, r2
 8002cca:	460e      	mov	r6, r1
 8002ccc:	b921      	cbnz	r1, 8002cd8 <_realloc_r+0x14>
 8002cce:	4611      	mov	r1, r2
 8002cd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002cd4:	f7ff bc8a 	b.w	80025ec <_malloc_r>
 8002cd8:	b922      	cbnz	r2, 8002ce4 <_realloc_r+0x20>
 8002cda:	f7ff fc39 	bl	8002550 <_free_r>
 8002cde:	4625      	mov	r5, r4
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ce4:	f000 f814 	bl	8002d10 <_malloc_usable_size_r>
 8002ce8:	42a0      	cmp	r0, r4
 8002cea:	d20f      	bcs.n	8002d0c <_realloc_r+0x48>
 8002cec:	4621      	mov	r1, r4
 8002cee:	4638      	mov	r0, r7
 8002cf0:	f7ff fc7c 	bl	80025ec <_malloc_r>
 8002cf4:	4605      	mov	r5, r0
 8002cf6:	2800      	cmp	r0, #0
 8002cf8:	d0f2      	beq.n	8002ce0 <_realloc_r+0x1c>
 8002cfa:	4631      	mov	r1, r6
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	f7ff fadd 	bl	80022bc <memcpy>
 8002d02:	4631      	mov	r1, r6
 8002d04:	4638      	mov	r0, r7
 8002d06:	f7ff fc23 	bl	8002550 <_free_r>
 8002d0a:	e7e9      	b.n	8002ce0 <_realloc_r+0x1c>
 8002d0c:	4635      	mov	r5, r6
 8002d0e:	e7e7      	b.n	8002ce0 <_realloc_r+0x1c>

08002d10 <_malloc_usable_size_r>:
 8002d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d14:	1f18      	subs	r0, r3, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bfbc      	itt	lt
 8002d1a:	580b      	ldrlt	r3, [r1, r0]
 8002d1c:	18c0      	addlt	r0, r0, r3
 8002d1e:	4770      	bx	lr

08002d20 <_init>:
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	bf00      	nop
 8002d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d26:	bc08      	pop	{r3}
 8002d28:	469e      	mov	lr, r3
 8002d2a:	4770      	bx	lr

08002d2c <_fini>:
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2e:	bf00      	nop
 8002d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d32:	bc08      	pop	{r3}
 8002d34:	469e      	mov	lr, r3
 8002d36:	4770      	bx	lr
