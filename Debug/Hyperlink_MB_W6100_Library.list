
Hyperlink_MB_W6100_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000095c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ae4  08000aec  00010aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ae4  08000ae4  00010aec  2**0
                  CONTENTS
  4 .ARM          00000000  08000ae4  08000ae4  00010aec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ae4  08000aec  00010aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ae4  08000ae4  00010ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae8  08000ae8  00010ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000aec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000aec  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010aec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001262  00000000  00000000  00010b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000445  00000000  00000000  00011d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d8  00000000  00000000  000121c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  000122a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017535  00000000  00000000  00012340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000f96  00000000  00000000  00029875  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f255  00000000  00000000  0002a80b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a9a60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000238  00000000  00000000  000a9adc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000acc 	.word	0x08000acc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000acc 	.word	0x08000acc

080001c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	db0a      	blt.n	80001f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	490c      	ldr	r1, [pc, #48]	; (8000214 <__NVIC_SetPriority+0x4c>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	0112      	lsls	r2, r2, #4
 80001e8:	b2d2      	uxtb	r2, r2
 80001ea:	440b      	add	r3, r1
 80001ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001f0:	e00a      	b.n	8000208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	4908      	ldr	r1, [pc, #32]	; (8000218 <__NVIC_SetPriority+0x50>)
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	f003 030f 	and.w	r3, r3, #15
 80001fe:	3b04      	subs	r3, #4
 8000200:	0112      	lsls	r2, r2, #4
 8000202:	b2d2      	uxtb	r2, r2
 8000204:	440b      	add	r3, r1
 8000206:	761a      	strb	r2, [r3, #24]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	e000e100 	.word	0xe000e100
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3b01      	subs	r3, #1
 8000228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800022c:	d301      	bcc.n	8000232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800022e:	2301      	movs	r3, #1
 8000230:	e00f      	b.n	8000252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000232:	4a0a      	ldr	r2, [pc, #40]	; (800025c <SysTick_Config+0x40>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3b01      	subs	r3, #1
 8000238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800023a:	210f      	movs	r1, #15
 800023c:	f04f 30ff 	mov.w	r0, #4294967295
 8000240:	f7ff ffc2 	bl	80001c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <SysTick_Config+0x40>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <SysTick_Config+0x40>)
 800024c:	2207      	movs	r2, #7
 800024e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000250:	2300      	movs	r3, #0
}
 8000252:	4618      	mov	r0, r3
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	e000e010 	.word	0xe000e010

08000260 <SystemRegisterCFG>:
 */
#include "config.h"



void SystemRegisterCFG(void) {
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	// RCC Configuration
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;	// GPIO Clock
 8000264:	4b22      	ldr	r3, [pc, #136]	; (80002f0 <SystemRegisterCFG+0x90>)
 8000266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000268:	4a21      	ldr	r2, [pc, #132]	; (80002f0 <SystemRegisterCFG+0x90>)
 800026a:	f043 0307 	orr.w	r3, r3, #7
 800026e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;		// SPI1 clock
 8000270:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <SystemRegisterCFG+0x90>)
 8000272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000274:	4a1e      	ldr	r2, [pc, #120]	; (80002f0 <SystemRegisterCFG+0x90>)
 8000276:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800027a:	6453      	str	r3, [r2, #68]	; 0x44

	// Standard GPIO Config
	GPIOC->MODER |= GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE11_0 | GPIO_MODER_MODE12_0;	// STM LEDs output
 800027c:	4b1d      	ldr	r3, [pc, #116]	; (80002f4 <SystemRegisterCFG+0x94>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1c      	ldr	r2, [pc, #112]	; (80002f4 <SystemRegisterCFG+0x94>)
 8000282:	f043 73a2 	orr.w	r3, r3, #21233664	; 0x1440000
 8000286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800028a:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD8 | GPIO_ODR_OD9 | GPIO_ODR_OD11 | GPIO_ODR_OD12;		// STM LEDs OFF
 800028c:	4b19      	ldr	r3, [pc, #100]	; (80002f4 <SystemRegisterCFG+0x94>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <SystemRegisterCFG+0x94>)
 8000292:	f443 53d8 	orr.w	r3, r3, #6912	; 0x1b00
 8000296:	6153      	str	r3, [r2, #20]

	// W6100 External Reset config
	GPIOC->MODER |= GPIO_MODER_MODE4_0;		// Output
 8000298:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <SystemRegisterCFG+0x94>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a15      	ldr	r2, [pc, #84]	; (80002f4 <SystemRegisterCFG+0x94>)
 800029e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD4;				// Level high (reset disable)
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <SystemRegisterCFG+0x94>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <SystemRegisterCFG+0x94>)
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	6153      	str	r3, [r2, #20]

	// SPI GPIO Config
	GPIOA->MODER |= GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1;		// SPI1 AFIO Set (NSS Software)
 80002b0:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <SystemRegisterCFG+0x98>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <SystemRegisterCFG+0x98>)
 80002b6:	f443 4329 	orr.w	r3, r3, #43264	; 0xa900
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_OD4;		// Slave select HIGH (disable)
 80002bc:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <SystemRegisterCFG+0x98>)
 80002be:	695b      	ldr	r3, [r3, #20]
 80002c0:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <SystemRegisterCFG+0x98>)
 80002c2:	f043 0310 	orr.w	r3, r3, #16
 80002c6:	6153      	str	r3, [r2, #20]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL5_0 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL6_0 |
 80002c8:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <SystemRegisterCFG+0x98>)
 80002ca:	6a1b      	ldr	r3, [r3, #32]
 80002cc:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <SystemRegisterCFG+0x98>)
 80002ce:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002d2:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80002d6:	6213      	str	r3, [r2, #32]
					 GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL7_0 | GPIO_AFRL_AFRL7_2;			// SPI1 AFIO => SPI1

	// SPI Config
	SPI1->CR1 |= SPI_CR1_SPE | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_MSTR;
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <SystemRegisterCFG+0x9c>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a07      	ldr	r2, [pc, #28]	; (80002fc <SystemRegisterCFG+0x9c>)
 80002de:	f443 7351 	orr.w	r3, r3, #836	; 0x344
 80002e2:	6013      	str	r3, [r2, #0]


	// SysTic Config
	SysTick_Config(16000000);
 80002e4:	4806      	ldr	r0, [pc, #24]	; (8000300 <SystemRegisterCFG+0xa0>)
 80002e6:	f7ff ff99 	bl	800021c <SysTick_Config>
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	40023800 	.word	0x40023800
 80002f4:	40020800 	.word	0x40020800
 80002f8:	40020000 	.word	0x40020000
 80002fc:	40013000 	.word	0x40013000
 8000300:	00f42400 	.word	0x00f42400

08000304 <SPI_Eth_SS>:

void SPI_Eth_SS(uint8_t state) {
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	if (state) {
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d006      	beq.n	8000322 <SPI_Eth_SS+0x1e>
		GPIOA->ODR &= ~GPIO_ODR_OD4;
 8000314:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <SPI_Eth_SS+0x3c>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	4a09      	ldr	r2, [pc, #36]	; (8000340 <SPI_Eth_SS+0x3c>)
 800031a:	f023 0310 	bic.w	r3, r3, #16
 800031e:	6153      	str	r3, [r2, #20]
	}
	else if (!state) {
		GPIOA->ODR |= GPIO_ODR_OD4;
	}
}
 8000320:	e008      	b.n	8000334 <SPI_Eth_SS+0x30>
	else if (!state) {
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d105      	bne.n	8000334 <SPI_Eth_SS+0x30>
		GPIOA->ODR |= GPIO_ODR_OD4;
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <SPI_Eth_SS+0x3c>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <SPI_Eth_SS+0x3c>)
 800032e:	f043 0310 	orr.w	r3, r3, #16
 8000332:	6153      	str	r3, [r2, #20]
}
 8000334:	bf00      	nop
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40020000 	.word	0x40020000

08000344 <SPI_Eth_RT>:

uint8_t SPI_Eth_RT(uint8_t data) {
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	while(!(SPI1->SR & SPI_SR_TXE));	// Wait for Tx buffer empty
 800034e:	bf00      	nop
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <SPI_Eth_RT+0x40>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	f003 0302 	and.w	r3, r3, #2
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0f9      	beq.n	8000350 <SPI_Eth_RT+0xc>
	SPI1->DR = data;
 800035c:	4a09      	ldr	r2, [pc, #36]	; (8000384 <SPI_Eth_RT+0x40>)
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_RXNE));	// Wait for Rx buffer not empty
 8000362:	bf00      	nop
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <SPI_Eth_RT+0x40>)
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d0f9      	beq.n	8000364 <SPI_Eth_RT+0x20>
	data = SPI1->DR;
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <SPI_Eth_RT+0x40>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	71fb      	strb	r3, [r7, #7]
	return data;
 8000376:	79fb      	ldrb	r3, [r7, #7]
}
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40013000 	.word	0x40013000

08000388 <SPI_W6100_RCR>:

uint8_t SPI_W6100_RCR(uint16_t adr) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	80fb      	strh	r3, [r7, #6]
	// See Page 76 - W6100 datasheet
	uint8_t dat;
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000392:	2001      	movs	r0, #1
 8000394:	f7ff ffb6 	bl	8000304 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000398:	88fb      	ldrh	r3, [r7, #6]
 800039a:	0a1b      	lsrs	r3, r3, #8
 800039c:	b29b      	uxth	r3, r3
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ffcf 	bl	8000344 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 80003a6:	88fb      	ldrh	r3, [r7, #6]
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	4618      	mov	r0, r3
 80003ac:	f7ff ffca 	bl	8000344 <SPI_Eth_RT>
	SPI_Eth_RT(0x00);		// Send Control Byte	[CR, Read, Variable Length Data Mode]
 80003b0:	2000      	movs	r0, #0
 80003b2:	f7ff ffc7 	bl	8000344 <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);	// Send garbage data to read the Common Register
 80003b6:	2000      	movs	r0, #0
 80003b8:	f7ff ffc4 	bl	8000344 <SPI_Eth_RT>
 80003bc:	4603      	mov	r3, r0
 80003be:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(OFF);		// NSS Slave Disable
 80003c0:	2000      	movs	r0, #0
 80003c2:	f7ff ff9f 	bl	8000304 <SPI_Eth_SS>
	return dat;
 80003c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <SPI_W6100_WCR>:

void SPI_W6100_WCR(uint16_t adr, uint8_t val) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	460a      	mov	r2, r1
 80003da:	80fb      	strh	r3, [r7, #6]
 80003dc:	4613      	mov	r3, r2
 80003de:	717b      	strb	r3, [r7, #5]
	// See Page 76 - W6100 datasheet
	SPI_Eth_SS(ON);			// NSS Slave Enable
 80003e0:	2001      	movs	r0, #1
 80003e2:	f7ff ff8f 	bl	8000304 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	0a1b      	lsrs	r3, r3, #8
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff ffa8 	bl	8000344 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 80003f4:	88fb      	ldrh	r3, [r7, #6]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ffa3 	bl	8000344 <SPI_Eth_RT>
	SPI_Eth_RT(0x04);		// Send Control Byte	[CR, Write, Variable Length Data Mode]
 80003fe:	2004      	movs	r0, #4
 8000400:	f7ff ffa0 	bl	8000344 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 8000404:	797b      	ldrb	r3, [r7, #5]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff9c 	bl	8000344 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff79 	bl	8000304 <SPI_Eth_SS>
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <SPI_W6100_RSOCK>:

uint8_t SPI_W6100_RSOCK(uint16_t adr, uint8_t socket_nbr, uint8_t block) {
 800041a:	b580      	push	{r7, lr}
 800041c:	b084      	sub	sp, #16
 800041e:	af00      	add	r7, sp, #0
 8000420:	4603      	mov	r3, r0
 8000422:	80fb      	strh	r3, [r7, #6]
 8000424:	460b      	mov	r3, r1
 8000426:	717b      	strb	r3, [r7, #5]
 8000428:	4613      	mov	r3, r2
 800042a:	713b      	strb	r3, [r7, #4]
	uint8_t dat;
	uint8_t cb_temp = 0x00;
 800042c:	2300      	movs	r3, #0
 800042e:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 8000430:	797b      	ldrb	r3, [r7, #5]
 8000432:	015b      	lsls	r3, r3, #5
 8000434:	b25a      	sxtb	r2, r3
 8000436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800043a:	4313      	orrs	r3, r2
 800043c:	b25b      	sxtb	r3, r3
 800043e:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 8000440:	793b      	ldrb	r3, [r7, #4]
 8000442:	00db      	lsls	r3, r3, #3
 8000444:	b25a      	sxtb	r2, r3
 8000446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800044a:	4313      	orrs	r3, r2
 800044c:	b25b      	sxtb	r3, r3
 800044e:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000450:	2001      	movs	r0, #1
 8000452:	f7ff ff57 	bl	8000304 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000456:	88fb      	ldrh	r3, [r7, #6]
 8000458:	0a1b      	lsrs	r3, r3, #8
 800045a:	b29b      	uxth	r3, r3
 800045c:	b2db      	uxtb	r3, r3
 800045e:	4618      	mov	r0, r3
 8000460:	f7ff ff70 	bl	8000344 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000464:	88fb      	ldrh	r3, [r7, #6]
 8000466:	b2db      	uxtb	r3, r3
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff ff6b 	bl	8000344 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ff67 	bl	8000344 <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);		// Send garbage data to read the Common Register
 8000476:	2000      	movs	r0, #0
 8000478:	f7ff ff64 	bl	8000344 <SPI_Eth_RT>
 800047c:	4603      	mov	r3, r0
 800047e:	73bb      	strb	r3, [r7, #14]
	SPI_Eth_SS(OFF);
 8000480:	2000      	movs	r0, #0
 8000482:	f7ff ff3f 	bl	8000304 <SPI_Eth_SS>
	return dat;
 8000486:	7bbb      	ldrb	r3, [r7, #14]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <SPI_W6100_WSOCK>:

void SPI_W6100_WSOCK(uint16_t adr, uint8_t val, uint8_t socket_nbr, uint8_t block) {
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	4604      	mov	r4, r0
 8000498:	4608      	mov	r0, r1
 800049a:	4611      	mov	r1, r2
 800049c:	461a      	mov	r2, r3
 800049e:	4623      	mov	r3, r4
 80004a0:	80fb      	strh	r3, [r7, #6]
 80004a2:	4603      	mov	r3, r0
 80004a4:	717b      	strb	r3, [r7, #5]
 80004a6:	460b      	mov	r3, r1
 80004a8:	713b      	strb	r3, [r7, #4]
 80004aa:	4613      	mov	r3, r2
 80004ac:	70fb      	strb	r3, [r7, #3]
	uint8_t cb_temp = 0x04;
 80004ae:	2304      	movs	r3, #4
 80004b0:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 80004b2:	793b      	ldrb	r3, [r7, #4]
 80004b4:	015b      	lsls	r3, r3, #5
 80004b6:	b25a      	sxtb	r2, r3
 80004b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004bc:	4313      	orrs	r3, r2
 80004be:	b25b      	sxtb	r3, r3
 80004c0:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 80004c2:	78fb      	ldrb	r3, [r7, #3]
 80004c4:	00db      	lsls	r3, r3, #3
 80004c6:	b25a      	sxtb	r2, r3
 80004c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	b25b      	sxtb	r3, r3
 80004d0:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 80004d2:	2001      	movs	r0, #1
 80004d4:	f7ff ff16 	bl	8000304 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	0a1b      	lsrs	r3, r3, #8
 80004dc:	b29b      	uxth	r3, r3
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff ff2f 	bl	8000344 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff2a 	bl	8000344 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff26 	bl	8000344 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 80004f8:	797b      	ldrb	r3, [r7, #5]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff ff22 	bl	8000344 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 8000500:	2000      	movs	r0, #0
 8000502:	f7ff feff 	bl	8000304 <SPI_Eth_SS>
}
 8000506:	bf00      	nop
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bd90      	pop	{r4, r7, pc}

0800050e <SysTick_Handler>:





__attribute__((interrupt)) void SysTick_Handler(void){
 800050e:	4668      	mov	r0, sp
 8000510:	f020 0107 	bic.w	r1, r0, #7
 8000514:	468d      	mov	sp, r1
 8000516:	b481      	push	{r0, r7}
 8000518:	af00      	add	r7, sp, #0
//	GPIOC->ODR ^= GPIO_ODR_OD8;
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc81      	pop	{r0, r7}
 8000520:	4685      	mov	sp, r0
 8000522:	4770      	bx	lr

08000524 <main>:




int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0

	SystemRegisterCFG();
 800052a:	f7ff fe99 	bl	8000260 <SystemRegisterCFG>

	GPIOC->ODR &= ~GPIO_ODR_OD9;
 800052e:	4bd8      	ldr	r3, [pc, #864]	; (8000890 <main+0x36c>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4ad7      	ldr	r2, [pc, #860]	; (8000890 <main+0x36c>)
 8000534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000538:	6153      	str	r3, [r2, #20]

	uint8_t rx_dat;


	/* *** W6100 Init *** */
	SPI_W6100_WCR(NETLCKR, 0x3a);	// NETLCKR		Network settings unlock
 800053a:	213a      	movs	r1, #58	; 0x3a
 800053c:	f244 10f5 	movw	r0, #16885	; 0x41f5
 8000540:	f7ff ff46 	bl	80003d0 <SPI_W6100_WCR>

	SPI_W6100_WCR(SHAR0, 0x11);	// SHAR[5:0]	Set hardware MAC address
 8000544:	2111      	movs	r1, #17
 8000546:	f244 1020 	movw	r0, #16672	; 0x4120
 800054a:	f7ff ff41 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR1, 0x22);
 800054e:	2122      	movs	r1, #34	; 0x22
 8000550:	f244 1021 	movw	r0, #16673	; 0x4121
 8000554:	f7ff ff3c 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR2, 0x33);
 8000558:	2133      	movs	r1, #51	; 0x33
 800055a:	f244 1022 	movw	r0, #16674	; 0x4122
 800055e:	f7ff ff37 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR3, 0xaa);
 8000562:	21aa      	movs	r1, #170	; 0xaa
 8000564:	f244 1023 	movw	r0, #16675	; 0x4123
 8000568:	f7ff ff32 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR4, 0xbb);
 800056c:	21bb      	movs	r1, #187	; 0xbb
 800056e:	f244 1024 	movw	r0, #16676	; 0x4124
 8000572:	f7ff ff2d 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR5, 0xcc);
 8000576:	21cc      	movs	r1, #204	; 0xcc
 8000578:	f244 1025 	movw	r0, #16677	; 0x4125
 800057c:	f7ff ff28 	bl	80003d0 <SPI_W6100_WCR>

	SPI_W6100_WCR(GAR0, 0xc0);	// GAR[0:3]		Gateway IP address 192.168.0.1
 8000580:	21c0      	movs	r1, #192	; 0xc0
 8000582:	f244 1030 	movw	r0, #16688	; 0x4130
 8000586:	f7ff ff23 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR1, 0xa8);
 800058a:	21a8      	movs	r1, #168	; 0xa8
 800058c:	f244 1031 	movw	r0, #16689	; 0x4131
 8000590:	f7ff ff1e 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR2, 0x00);
 8000594:	2100      	movs	r1, #0
 8000596:	f244 1032 	movw	r0, #16690	; 0x4132
 800059a:	f7ff ff19 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR3, 0x01);
 800059e:	2101      	movs	r1, #1
 80005a0:	f244 1033 	movw	r0, #16691	; 0x4133
 80005a4:	f7ff ff14 	bl	80003d0 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUBR0, 0xff);	// SUBR[0:3]	Subnet mask address 255:255:255:0
 80005a8:	21ff      	movs	r1, #255	; 0xff
 80005aa:	f244 1034 	movw	r0, #16692	; 0x4134
 80005ae:	f7ff ff0f 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR1, 0xff);
 80005b2:	21ff      	movs	r1, #255	; 0xff
 80005b4:	f244 1035 	movw	r0, #16693	; 0x4135
 80005b8:	f7ff ff0a 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR2, 0xff);
 80005bc:	21ff      	movs	r1, #255	; 0xff
 80005be:	f244 1036 	movw	r0, #16694	; 0x4136
 80005c2:	f7ff ff05 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR3, 0x00);
 80005c6:	2100      	movs	r1, #0
 80005c8:	f244 1037 	movw	r0, #16695	; 0x4137
 80005cc:	f7ff ff00 	bl	80003d0 <SPI_W6100_WCR>

	SPI_W6100_WCR(SIPR0, 0xc0);	// SIPR[0:3]	IPv4 Source IP Address 192.168.0.100
 80005d0:	21c0      	movs	r1, #192	; 0xc0
 80005d2:	f244 1038 	movw	r0, #16696	; 0x4138
 80005d6:	f7ff fefb 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR1, 0xa8);
 80005da:	21a8      	movs	r1, #168	; 0xa8
 80005dc:	f244 1039 	movw	r0, #16697	; 0x4139
 80005e0:	f7ff fef6 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR2, 0x00);
 80005e4:	2100      	movs	r1, #0
 80005e6:	f244 103a 	movw	r0, #16698	; 0x413a
 80005ea:	f7ff fef1 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR3, 0x64);
 80005ee:	2164      	movs	r1, #100	; 0x64
 80005f0:	f244 103b 	movw	r0, #16699	; 0x413b
 80005f4:	f7ff feec 	bl	80003d0 <SPI_W6100_WCR>

	SPI_W6100_WCR(LLAR0, 0xfe);	// Link Local Address, FE80::1322:33FF:FEAA:BBCC
 80005f8:	21fe      	movs	r1, #254	; 0xfe
 80005fa:	f244 1040 	movw	r0, #16704	; 0x4140
 80005fe:	f7ff fee7 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR1, 0x80);
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	f244 1041 	movw	r0, #16705	; 0x4141
 8000608:	f7ff fee2 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR2, 0x00);
 800060c:	2100      	movs	r1, #0
 800060e:	f244 1042 	movw	r0, #16706	; 0x4142
 8000612:	f7ff fedd 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR3, 0x01);
 8000616:	2101      	movs	r1, #1
 8000618:	f244 1043 	movw	r0, #16707	; 0x4143
 800061c:	f7ff fed8 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR4, 0x00);
 8000620:	2100      	movs	r1, #0
 8000622:	f244 1044 	movw	r0, #16708	; 0x4144
 8000626:	f7ff fed3 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR5, 0x00);
 800062a:	2100      	movs	r1, #0
 800062c:	f244 1045 	movw	r0, #16709	; 0x4145
 8000630:	f7ff fece 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR6, 0x00);
 8000634:	2100      	movs	r1, #0
 8000636:	f244 1046 	movw	r0, #16710	; 0x4146
 800063a:	f7ff fec9 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR7, 0x00);
 800063e:	2100      	movs	r1, #0
 8000640:	f244 1047 	movw	r0, #16711	; 0x4147
 8000644:	f7ff fec4 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR8, 0x13);
 8000648:	2113      	movs	r1, #19
 800064a:	f244 1048 	movw	r0, #16712	; 0x4148
 800064e:	f7ff febf 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR9, 0x22);
 8000652:	2122      	movs	r1, #34	; 0x22
 8000654:	f244 1049 	movw	r0, #16713	; 0x4149
 8000658:	f7ff feba 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR10, 0x33);
 800065c:	2133      	movs	r1, #51	; 0x33
 800065e:	f244 104a 	movw	r0, #16714	; 0x414a
 8000662:	f7ff feb5 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR11, 0xff);
 8000666:	21ff      	movs	r1, #255	; 0xff
 8000668:	f244 104b 	movw	r0, #16715	; 0x414b
 800066c:	f7ff feb0 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR12, 0xfe);
 8000670:	21fe      	movs	r1, #254	; 0xfe
 8000672:	f244 104c 	movw	r0, #16716	; 0x414c
 8000676:	f7ff feab 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR13, 0xaa);
 800067a:	21aa      	movs	r1, #170	; 0xaa
 800067c:	f244 104d 	movw	r0, #16717	; 0x414d
 8000680:	f7ff fea6 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR14, 0xbb);
 8000684:	21bb      	movs	r1, #187	; 0xbb
 8000686:	f244 104e 	movw	r0, #16718	; 0x414e
 800068a:	f7ff fea1 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR15, 0xcc);
 800068e:	21cc      	movs	r1, #204	; 0xcc
 8000690:	f244 104f 	movw	r0, #16719	; 0x414f
 8000694:	f7ff fe9c 	bl	80003d0 <SPI_W6100_WCR>

	SPI_W6100_WCR(GUAR0, 0x20);	// Global Unicast Address, 2001:0DB8:E001::1222:33FF:FEAA:BBCC
 8000698:	2120      	movs	r1, #32
 800069a:	f244 1050 	movw	r0, #16720	; 0x4150
 800069e:	f7ff fe97 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR1, 0x01);
 80006a2:	2101      	movs	r1, #1
 80006a4:	f244 1051 	movw	r0, #16721	; 0x4151
 80006a8:	f7ff fe92 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR2, 0x0d);
 80006ac:	210d      	movs	r1, #13
 80006ae:	f244 1052 	movw	r0, #16722	; 0x4152
 80006b2:	f7ff fe8d 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR3, 0xb8);
 80006b6:	21b8      	movs	r1, #184	; 0xb8
 80006b8:	f244 1053 	movw	r0, #16723	; 0x4153
 80006bc:	f7ff fe88 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR4, 0xe0);
 80006c0:	21e0      	movs	r1, #224	; 0xe0
 80006c2:	f244 1054 	movw	r0, #16724	; 0x4154
 80006c6:	f7ff fe83 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR5, 0x01);
 80006ca:	2101      	movs	r1, #1
 80006cc:	f244 1055 	movw	r0, #16725	; 0x4155
 80006d0:	f7ff fe7e 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR6, 0x00);
 80006d4:	2100      	movs	r1, #0
 80006d6:	f244 1056 	movw	r0, #16726	; 0x4156
 80006da:	f7ff fe79 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR7, 0x00);
 80006de:	2100      	movs	r1, #0
 80006e0:	f244 1057 	movw	r0, #16727	; 0x4157
 80006e4:	f7ff fe74 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR8, 0x13);
 80006e8:	2113      	movs	r1, #19
 80006ea:	f244 1058 	movw	r0, #16728	; 0x4158
 80006ee:	f7ff fe6f 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR9, 0x22);
 80006f2:	2122      	movs	r1, #34	; 0x22
 80006f4:	f244 1059 	movw	r0, #16729	; 0x4159
 80006f8:	f7ff fe6a 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR10, 0x33);
 80006fc:	2133      	movs	r1, #51	; 0x33
 80006fe:	f244 105a 	movw	r0, #16730	; 0x415a
 8000702:	f7ff fe65 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR11, 0xff);
 8000706:	21ff      	movs	r1, #255	; 0xff
 8000708:	f244 105b 	movw	r0, #16731	; 0x415b
 800070c:	f7ff fe60 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR12, 0xfe);
 8000710:	21fe      	movs	r1, #254	; 0xfe
 8000712:	f244 105c 	movw	r0, #16732	; 0x415c
 8000716:	f7ff fe5b 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR13, 0xaa);
 800071a:	21aa      	movs	r1, #170	; 0xaa
 800071c:	f244 105d 	movw	r0, #16733	; 0x415d
 8000720:	f7ff fe56 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR14, 0xbb);
 8000724:	21bb      	movs	r1, #187	; 0xbb
 8000726:	f244 105e 	movw	r0, #16734	; 0x415e
 800072a:	f7ff fe51 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR15, 0xcc);
 800072e:	21cc      	movs	r1, #204	; 0xcc
 8000730:	f244 105f 	movw	r0, #16735	; 0x415f
 8000734:	f7ff fe4c 	bl	80003d0 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUB6R0, 0xff);	// IPv6 Subnet Prefix, FFFF:FFFF::
 8000738:	21ff      	movs	r1, #255	; 0xff
 800073a:	f244 1060 	movw	r0, #16736	; 0x4160
 800073e:	f7ff fe47 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R1, 0xff);
 8000742:	21ff      	movs	r1, #255	; 0xff
 8000744:	f244 1061 	movw	r0, #16737	; 0x4161
 8000748:	f7ff fe42 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R2, 0xff);
 800074c:	21ff      	movs	r1, #255	; 0xff
 800074e:	f244 1062 	movw	r0, #16738	; 0x4162
 8000752:	f7ff fe3d 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R3, 0xff);
 8000756:	21ff      	movs	r1, #255	; 0xff
 8000758:	f244 1063 	movw	r0, #16739	; 0x4163
 800075c:	f7ff fe38 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R4, 0xff);
 8000760:	21ff      	movs	r1, #255	; 0xff
 8000762:	f244 1064 	movw	r0, #16740	; 0x4164
 8000766:	f7ff fe33 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R5, 0xff);
 800076a:	21ff      	movs	r1, #255	; 0xff
 800076c:	f244 1065 	movw	r0, #16741	; 0x4165
 8000770:	f7ff fe2e 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R6, 0xff);
 8000774:	21ff      	movs	r1, #255	; 0xff
 8000776:	f244 1066 	movw	r0, #16742	; 0x4166
 800077a:	f7ff fe29 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R7, 0xff);
 800077e:	21ff      	movs	r1, #255	; 0xff
 8000780:	f244 1067 	movw	r0, #16743	; 0x4167
 8000784:	f7ff fe24 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R8, 0x00);
 8000788:	2100      	movs	r1, #0
 800078a:	f244 1068 	movw	r0, #16744	; 0x4168
 800078e:	f7ff fe1f 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R9, 0x00);
 8000792:	2100      	movs	r1, #0
 8000794:	f244 1069 	movw	r0, #16745	; 0x4169
 8000798:	f7ff fe1a 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R10, 0x00);
 800079c:	2100      	movs	r1, #0
 800079e:	f244 106a 	movw	r0, #16746	; 0x416a
 80007a2:	f7ff fe15 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R11, 0x00);
 80007a6:	2100      	movs	r1, #0
 80007a8:	f244 106b 	movw	r0, #16747	; 0x416b
 80007ac:	f7ff fe10 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R12, 0x00);
 80007b0:	2100      	movs	r1, #0
 80007b2:	f244 106c 	movw	r0, #16748	; 0x416c
 80007b6:	f7ff fe0b 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R13, 0x00);
 80007ba:	2100      	movs	r1, #0
 80007bc:	f244 106d 	movw	r0, #16749	; 0x416d
 80007c0:	f7ff fe06 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R14, 0x00);
 80007c4:	2100      	movs	r1, #0
 80007c6:	f244 106e 	movw	r0, #16750	; 0x416e
 80007ca:	f7ff fe01 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R15, 0x00);
 80007ce:	2100      	movs	r1, #0
 80007d0:	f244 106f 	movw	r0, #16751	; 0x416f
 80007d4:	f7ff fdfc 	bl	80003d0 <SPI_W6100_WCR>

	SPI_W6100_WCR(GA6R0, 0xfe);	// IPv6 Gateway Address, FFFF:FFFF::
 80007d8:	21fe      	movs	r1, #254	; 0xfe
 80007da:	f244 1070 	movw	r0, #16752	; 0x4170
 80007de:	f7ff fdf7 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R1, 0x80);
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	f244 1071 	movw	r0, #16753	; 0x4171
 80007e8:	f7ff fdf2 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R2, 0x00);
 80007ec:	2100      	movs	r1, #0
 80007ee:	f244 1072 	movw	r0, #16754	; 0x4172
 80007f2:	f7ff fded 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R3, 0x00);
 80007f6:	2100      	movs	r1, #0
 80007f8:	f244 1073 	movw	r0, #16755	; 0x4173
 80007fc:	f7ff fde8 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R4, 0x00);
 8000800:	2100      	movs	r1, #0
 8000802:	f244 1074 	movw	r0, #16756	; 0x4174
 8000806:	f7ff fde3 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R5, 0x00);
 800080a:	2100      	movs	r1, #0
 800080c:	f244 1075 	movw	r0, #16757	; 0x4175
 8000810:	f7ff fdde 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R6, 0x00);
 8000814:	2100      	movs	r1, #0
 8000816:	f244 1076 	movw	r0, #16758	; 0x4176
 800081a:	f7ff fdd9 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R7, 0x00);
 800081e:	2100      	movs	r1, #0
 8000820:	f244 1077 	movw	r0, #16759	; 0x4177
 8000824:	f7ff fdd4 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R8, 0x13);
 8000828:	2113      	movs	r1, #19
 800082a:	f244 1078 	movw	r0, #16760	; 0x4178
 800082e:	f7ff fdcf 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R9, 0x22);
 8000832:	2122      	movs	r1, #34	; 0x22
 8000834:	f244 1079 	movw	r0, #16761	; 0x4179
 8000838:	f7ff fdca 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R10, 0x33);
 800083c:	2133      	movs	r1, #51	; 0x33
 800083e:	f244 107a 	movw	r0, #16762	; 0x417a
 8000842:	f7ff fdc5 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R11, 0xff);
 8000846:	21ff      	movs	r1, #255	; 0xff
 8000848:	f244 107b 	movw	r0, #16763	; 0x417b
 800084c:	f7ff fdc0 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R12, 0xfe);
 8000850:	21fe      	movs	r1, #254	; 0xfe
 8000852:	f244 107c 	movw	r0, #16764	; 0x417c
 8000856:	f7ff fdbb 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R13, 0x44);
 800085a:	2144      	movs	r1, #68	; 0x44
 800085c:	f244 107d 	movw	r0, #16765	; 0x417d
 8000860:	f7ff fdb6 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R14, 0x55);
 8000864:	2155      	movs	r1, #85	; 0x55
 8000866:	f244 107e 	movw	r0, #16766	; 0x417e
 800086a:	f7ff fdb1 	bl	80003d0 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R15, 0x66);
 800086e:	2166      	movs	r1, #102	; 0x66
 8000870:	f244 107f 	movw	r0, #16767	; 0x417f
 8000874:	f7ff fdac 	bl	80003d0 <SPI_W6100_WCR>

	SPI_W6100_WCR(NETLCKR, 0x00);	// NETLCKR		Network settings lock
 8000878:	2100      	movs	r1, #0
 800087a:	f244 10f5 	movw	r0, #16885	; 0x41f5
 800087e:	f7ff fda7 	bl	80003d0 <SPI_W6100_WCR>

	/* *** Socket Configuration *** */
	uint8_t txTotalSize = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	73fb      	strb	r3, [r7, #15]
	uint8_t rxTotalSize = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	73bb      	strb	r3, [r7, #14]

	for (uint8_t i=0; i<7; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	737b      	strb	r3, [r7, #13]
 800088e:	e018      	b.n	80008c2 <main+0x39e>
 8000890:	40020800 	.word	0x40020800
		SPI_W6100_WSOCK(Sn_TX_BSR, 0x02, i, REG);	// assign 2 Kbytes TX buffer per SOCKET
 8000894:	7b7a      	ldrb	r2, [r7, #13]
 8000896:	2301      	movs	r3, #1
 8000898:	2102      	movs	r1, #2
 800089a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800089e:	f7ff fdf7 	bl	8000490 <SPI_W6100_WSOCK>
		SPI_W6100_WSOCK(Sn_RX_BSR, 0x02, i, REG);	// assign 2 Kbytes RX buffer per SOCKET
 80008a2:	7b7a      	ldrb	r2, [r7, #13]
 80008a4:	2301      	movs	r3, #1
 80008a6:	2102      	movs	r1, #2
 80008a8:	f44f 7008 	mov.w	r0, #544	; 0x220
 80008ac:	f7ff fdf0 	bl	8000490 <SPI_W6100_WSOCK>
		txTotalSize += 0x02;
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	3302      	adds	r3, #2
 80008b4:	73fb      	strb	r3, [r7, #15]
		rxTotalSize += 0x02;
 80008b6:	7bbb      	ldrb	r3, [r7, #14]
 80008b8:	3302      	adds	r3, #2
 80008ba:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i=0; i<7; i++) {
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	3301      	adds	r3, #1
 80008c0:	737b      	strb	r3, [r7, #13]
 80008c2:	7b7b      	ldrb	r3, [r7, #13]
 80008c4:	2b06      	cmp	r3, #6
 80008c6:	d9e5      	bls.n	8000894 <main+0x370>
	}

	/* *** Open Socket0 as TCP4 *** */
	SPI_W6100_WSOCK(Sn_MR, 0x01, 0, REG);	// Set TCP4 mode
 80008c8:	2301      	movs	r3, #1
 80008ca:	2200      	movs	r2, #0
 80008cc:	2101      	movs	r1, #1
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff fdde 	bl	8000490 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR0, 0x13, 0, REG);	// Set PORT 5000
 80008d4:	2301      	movs	r3, #1
 80008d6:	2200      	movs	r2, #0
 80008d8:	2113      	movs	r1, #19
 80008da:	f44f 708a 	mov.w	r0, #276	; 0x114
 80008de:	f7ff fdd7 	bl	8000490 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR1, 0x88, 0, REG);
 80008e2:	2301      	movs	r3, #1
 80008e4:	2200      	movs	r2, #0
 80008e6:	2188      	movs	r1, #136	; 0x88
 80008e8:	f240 1015 	movw	r0, #277	; 0x115
 80008ec:	f7ff fdd0 	bl	8000490 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_CR, 0x01, 0, REG);	// Set OPEN command
 80008f0:	2301      	movs	r3, #1
 80008f2:	2200      	movs	r2, #0
 80008f4:	2101      	movs	r1, #1
 80008f6:	2010      	movs	r0, #16
 80008f8:	f7ff fdca 	bl	8000490 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, 0, REG)) != 0x00);	// Wait until OPEN command is cleared
 80008fc:	bf00      	nop
 80008fe:	2201      	movs	r2, #1
 8000900:	2100      	movs	r1, #0
 8000902:	2010      	movs	r0, #16
 8000904:	f7ff fd89 	bl	800041a <SPI_W6100_RSOCK>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d1f7      	bne.n	80008fe <main+0x3da>


	SPI_W6100_WSOCK(Sn_CR, 0x02, 0, REG);	// Set LISTEN command
 800090e:	2301      	movs	r3, #1
 8000910:	2200      	movs	r2, #0
 8000912:	2102      	movs	r1, #2
 8000914:	2010      	movs	r0, #16
 8000916:	f7ff fdbb 	bl	8000490 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, 0, REG)) != 0x00);	// Wait until LISTEN command is cleared
 800091a:	bf00      	nop
 800091c:	2201      	movs	r2, #1
 800091e:	2100      	movs	r1, #0
 8000920:	2010      	movs	r0, #16
 8000922:	f7ff fd7a 	bl	800041a <SPI_W6100_RSOCK>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1f7      	bne.n	800091c <main+0x3f8>

	// CONNECT NOW

	while ((SPI_W6100_RSOCK(Sn_SR, 0, REG)) != 0x17);	// Wait until SOCKET ESTABLISHED
 800092c:	bf00      	nop
 800092e:	2201      	movs	r2, #1
 8000930:	2100      	movs	r1, #0
 8000932:	2030      	movs	r0, #48	; 0x30
 8000934:	f7ff fd71 	bl	800041a <SPI_W6100_RSOCK>
 8000938:	4603      	mov	r3, r0
 800093a:	2b17      	cmp	r3, #23
 800093c:	d1f7      	bne.n	800092e <main+0x40a>
	GPIOC->ODR &= ~GPIO_ODR_OD8;
 800093e:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <main+0x4d8>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a2e      	ldr	r2, [pc, #184]	; (80009fc <main+0x4d8>)
 8000944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000948:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= GPIO_ODR_OD9;		// Socket established
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <main+0x4d8>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <main+0x4d8>)
 8000950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000954:	6153      	str	r3, [r2, #20]
	SPI_W6100_WSOCK(Sn_IRCLR, 0x01, 0, REG);	// Interrupt clear
 8000956:	2301      	movs	r3, #1
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	2028      	movs	r0, #40	; 0x28
 800095e:	f7ff fd97 	bl	8000490 <SPI_W6100_WSOCK>

  while (1)
  {
	  uint32_t i;

	  rx_dat = SPI_W6100_RCR(CIDR0);
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fd10 	bl	8000388 <SPI_W6100_RCR>
 8000968:	4603      	mov	r3, r0
 800096a:	71fb      	strb	r3, [r7, #7]
	  for (i=0; i<100000; i++);
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	e002      	b.n	8000978 <main+0x454>
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	3301      	adds	r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <main+0x4dc>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d9f8      	bls.n	8000972 <main+0x44e>

	  rx_dat = SPI_W6100_RCR(CIDR1);
 8000980:	2001      	movs	r0, #1
 8000982:	f7ff fd01 	bl	8000388 <SPI_W6100_RCR>
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
	  for (i=0; i<100000; i++);
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	e002      	b.n	8000996 <main+0x472>
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	3301      	adds	r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <main+0x4dc>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d9f8      	bls.n	8000990 <main+0x46c>

	  rx_dat = SPI_W6100_RCR(VER0);
 800099e:	2002      	movs	r0, #2
 80009a0:	f7ff fcf2 	bl	8000388 <SPI_W6100_RCR>
 80009a4:	4603      	mov	r3, r0
 80009a6:	71fb      	strb	r3, [r7, #7]
	  for (i=0; i<100000; i++);
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	e002      	b.n	80009b4 <main+0x490>
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	3301      	adds	r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <main+0x4dc>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d9f8      	bls.n	80009ae <main+0x48a>

	  rx_dat = SPI_W6100_RCR(VER1);
 80009bc:	2003      	movs	r0, #3
 80009be:	f7ff fce3 	bl	8000388 <SPI_W6100_RCR>
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	  for (i=0; i<100000; i++);
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	e002      	b.n	80009d2 <main+0x4ae>
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	3301      	adds	r3, #1
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <main+0x4dc>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d9f8      	bls.n	80009cc <main+0x4a8>

	  rx_dat = SPI_W6100_RCR(PHYDIVR);
 80009da:	f243 0018 	movw	r0, #12312	; 0x3018
 80009de:	f7ff fcd3 	bl	8000388 <SPI_W6100_RCR>
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	  for (i=0; i<100000; i++);
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	e002      	b.n	80009f2 <main+0x4ce>
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	3301      	adds	r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	4a02      	ldr	r2, [pc, #8]	; (8000a00 <main+0x4dc>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d9f8      	bls.n	80009ec <main+0x4c8>
  {
 80009fa:	e7b2      	b.n	8000962 <main+0x43e>
 80009fc:	40020800 	.word	0x40020800
 8000a00:	0001869f 	.word	0x0001869f

08000a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <SystemInit+0x28>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <SystemInit+0x28>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SystemInit+0x28>)
 8000a1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a36:	e003      	b.n	8000a40 <LoopCopyDataInit>

08000a38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a3e:	3104      	adds	r1, #4

08000a40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a40:	480b      	ldr	r0, [pc, #44]	; (8000a70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a48:	d3f6      	bcc.n	8000a38 <CopyDataInit>
  ldr  r2, =_sbss
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a4c:	e002      	b.n	8000a54 <LoopFillZerobss>

08000a4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a50:	f842 3b04 	str.w	r3, [r2], #4

08000a54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a58:	d3f9      	bcc.n	8000a4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a5a:	f7ff ffd3 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f000 f811 	bl	8000a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a62:	f7ff fd5f 	bl	8000524 <main>
  bx  lr    
 8000a66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a6c:	08000aec 	.word	0x08000aec
  ldr  r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a74:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000a78:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000a7c:	2000001c 	.word	0x2000001c

08000a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC_IRQHandler>
	...

08000a84 <__libc_init_array>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4e0d      	ldr	r6, [pc, #52]	; (8000abc <__libc_init_array+0x38>)
 8000a88:	4c0d      	ldr	r4, [pc, #52]	; (8000ac0 <__libc_init_array+0x3c>)
 8000a8a:	1ba4      	subs	r4, r4, r6
 8000a8c:	10a4      	asrs	r4, r4, #2
 8000a8e:	2500      	movs	r5, #0
 8000a90:	42a5      	cmp	r5, r4
 8000a92:	d109      	bne.n	8000aa8 <__libc_init_array+0x24>
 8000a94:	4e0b      	ldr	r6, [pc, #44]	; (8000ac4 <__libc_init_array+0x40>)
 8000a96:	4c0c      	ldr	r4, [pc, #48]	; (8000ac8 <__libc_init_array+0x44>)
 8000a98:	f000 f818 	bl	8000acc <_init>
 8000a9c:	1ba4      	subs	r4, r4, r6
 8000a9e:	10a4      	asrs	r4, r4, #2
 8000aa0:	2500      	movs	r5, #0
 8000aa2:	42a5      	cmp	r5, r4
 8000aa4:	d105      	bne.n	8000ab2 <__libc_init_array+0x2e>
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aac:	4798      	blx	r3
 8000aae:	3501      	adds	r5, #1
 8000ab0:	e7ee      	b.n	8000a90 <__libc_init_array+0xc>
 8000ab2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ab6:	4798      	blx	r3
 8000ab8:	3501      	adds	r5, #1
 8000aba:	e7f2      	b.n	8000aa2 <__libc_init_array+0x1e>
 8000abc:	08000ae4 	.word	0x08000ae4
 8000ac0:	08000ae4 	.word	0x08000ae4
 8000ac4:	08000ae4 	.word	0x08000ae4
 8000ac8:	08000ae8 	.word	0x08000ae8

08000acc <_init>:
 8000acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ace:	bf00      	nop
 8000ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ad2:	bc08      	pop	{r3}
 8000ad4:	469e      	mov	lr, r3
 8000ad6:	4770      	bx	lr

08000ad8 <_fini>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	bf00      	nop
 8000adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ade:	bc08      	pop	{r3}
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	4770      	bx	lr
