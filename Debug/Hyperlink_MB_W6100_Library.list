
Hyperlink_MB_W6100_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000156c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080016f4  080016f4  000116f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001710  08001710  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08001710  08001710  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001710  08001710  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001710  08001710  00011710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001714  08001714  00011714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08001718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000028  08001740  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08001740  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044d1  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ac4  00000000  00000000  00024529  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a8  00000000  00000000  00024ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000150  00000000  00000000  00025198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c80  00000000  00000000  000252e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002309  00000000  00000000  0003df68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083ae4  00000000  00000000  00040271  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c3d55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b8  00000000  00000000  000c3dd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080016dc 	.word	0x080016dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	080016dc 	.word	0x080016dc

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	db0b      	blt.n	8000206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	f003 021f 	and.w	r2, r3, #31
 80001f4:	4907      	ldr	r1, [pc, #28]	; (8000214 <__NVIC_EnableIRQ+0x38>)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	095b      	lsrs	r3, r3, #5
 80001fc:	2001      	movs	r0, #1
 80001fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e100 	.word	0xe000e100

08000218 <CanInit>:
 */

#include "can.h"


void CanInit(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	// *** Pin configuration and remap assignment *** //
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;		// Enable CAN 1 CLK
 800021c:	4b1d      	ldr	r3, [pc, #116]	; (8000294 <CanInit+0x7c>)
 800021e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000220:	4a1c      	ldr	r2, [pc, #112]	; (8000294 <CanInit+0x7c>)
 8000222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000226:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOB->MODER |= GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1;	// PB8 and PB9 Alternative Function
 8000228:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <CanInit+0x80>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <CanInit+0x80>)
 800022e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000232:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_3 | GPIO_AFRH_AFRH0_0 | GPIO_AFRH_AFRH1_0 | GPIO_AFRH_AFRH1_3;		// Alternative function mapped to CAN1_Tx and CAN1_Rx
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <CanInit+0x80>)
 8000236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000238:	4a17      	ldr	r2, [pc, #92]	; (8000298 <CanInit+0x80>)
 800023a:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 800023e:	6253      	str	r3, [r2, #36]	; 0x24

	CAN1->MCR |= CAN_MCR_INRQ;			// Initialisation mode on
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <CanInit+0x84>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a15      	ldr	r2, [pc, #84]	; (800029c <CanInit+0x84>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6013      	str	r3, [r2, #0]

	// *** CAN Test Mode *** //
//	CAN1->BTR |= CAN_BTR_LBKM;			// Loopback mode enabled (For Debug purposes)
	// ********************* //

	NVIC_EnableIRQ(CAN1_TX_IRQn);
 800024c:	2013      	movs	r0, #19
 800024e:	f7ff ffc5 	bl	80001dc <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000252:	2014      	movs	r0, #20
 8000254:	f7ff ffc2 	bl	80001dc <__NVIC_EnableIRQ>

	CAN1->IER |= CAN_IER_FMPIE0;		// Interrupt generated when state of FMP[1:0] bits are not 00b
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <CanInit+0x84>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a0f      	ldr	r2, [pc, #60]	; (800029c <CanInit+0x84>)
 800025e:	f043 0302 	orr.w	r3, r3, #2
 8000262:	6153      	str	r3, [r2, #20]

	CAN1->BTR = 0x00080004;				// CAN Bitrate: 500k
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <CanInit+0x84>)
 8000266:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <CanInit+0x88>)
 8000268:	61da      	str	r2, [r3, #28]


	CAN1->MCR &= ~CAN_MCR_INRQ;			// Initialisation mode off
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <CanInit+0x84>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a0b      	ldr	r2, [pc, #44]	; (800029c <CanInit+0x84>)
 8000270:	f023 0301 	bic.w	r3, r3, #1
 8000274:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MCR_INRQ);
 8000276:	bf00      	nop
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <CanInit+0x84>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1f9      	bne.n	8000278 <CanInit+0x60>


	CAN1->MCR &= ~CAN_MCR_SLEEP;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <CanInit+0x84>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <CanInit+0x84>)
 800028a:	f023 0302 	bic.w	r3, r3, #2
 800028e:	6013      	str	r3, [r2, #0]


}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40023800 	.word	0x40023800
 8000298:	40020400 	.word	0x40020400
 800029c:	40006400 	.word	0x40006400
 80002a0:	00080004 	.word	0x00080004

080002a4 <Can_Tx_Msg>:


void Can_Tx_Msg(CAN_MESSAGE * msg) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]

	CAN1->sTxMailBox[0].TIR = 0;		// Empty TIR register
 80002ac:	4b3c      	ldr	r3, [pc, #240]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	if(msg->format == STANDARD_FORMAT)	{
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d10a      	bne.n	80002d2 <Can_Tx_Msg+0x2e>
		CAN1->sTxMailBox[0].TIR |= (u_int) (msg->id << 21) | CAN_ID_STD;
 80002bc:	4b38      	ldr	r3, [pc, #224]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002be:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	055b      	lsls	r3, r3, #21
 80002c8:	4935      	ldr	r1, [pc, #212]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002ca:	4313      	orrs	r3, r2
 80002cc:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
 80002d0:	e009      	b.n	80002e6 <Can_Tx_Msg+0x42>
	} else {
		CAN1->sTxMailBox[0].TIR |= (u_int) (msg->id << 3) | CAN_ID_EXT;
 80002d2:	4b33      	ldr	r3, [pc, #204]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002d4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	00db      	lsls	r3, r3, #3
 80002de:	4930      	ldr	r1, [pc, #192]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002e0:	4313      	orrs	r3, r2
 80002e2:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
	}

	if (msg->type == DATA_FRAME)  {                 // DATA FRAME
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d106      	bne.n	80002fc <Can_Tx_Msg+0x58>
	    CAN1->sTxMailBox[0].TIR |= CAN_RTR_DATA;
 80002ee:	4b2c      	ldr	r3, [pc, #176]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002f0:	4a2b      	ldr	r2, [pc, #172]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002f2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80002f6:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 80002fa:	e005      	b.n	8000308 <Can_Tx_Msg+0x64>
	} else {                                        // REMOTE FRAME
	    CAN1->sTxMailBox[0].TIR |= CAN_RTR_REMOTE;
 80002fc:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002fe:	4a28      	ldr	r2, [pc, #160]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000300:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000304:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	}

	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	79db      	ldrb	r3, [r3, #7]
 800030c:	061a      	lsls	r2, r3, #24
	                          ((u_int)msg->data[2] << 16) |
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	799b      	ldrb	r3, [r3, #6]
 8000312:	041b      	lsls	r3, r3, #16
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 8000314:	431a      	orrs	r2, r3
	                          ((u_int)msg->data[1] <<  8) |
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	795b      	ldrb	r3, [r3, #5]
 800031a:	021b      	lsls	r3, r3, #8
	                          ((u_int)msg->data[2] << 16) |
 800031c:	4313      	orrs	r3, r2
	                          ((u_int)msg->data[0]));
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	7912      	ldrb	r2, [r2, #4]
 8000322:	4611      	mov	r1, r2
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 8000324:	4a1e      	ldr	r2, [pc, #120]	; (80003a0 <Can_Tx_Msg+0xfc>)
	                          ((u_int)msg->data[1] <<  8) |
 8000326:	430b      	orrs	r3, r1
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 8000328:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	7adb      	ldrb	r3, [r3, #11]
 8000330:	061a      	lsls	r2, r3, #24
	                          ((u_int)msg->data[6] << 16) |
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	7a9b      	ldrb	r3, [r3, #10]
 8000336:	041b      	lsls	r3, r3, #16
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 8000338:	431a      	orrs	r2, r3
	                          ((u_int)msg->data[5] <<  8) |
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	7a5b      	ldrb	r3, [r3, #9]
 800033e:	021b      	lsls	r3, r3, #8
	                          ((u_int)msg->data[6] << 16) |
 8000340:	4313      	orrs	r3, r2
	                          ((u_int)msg->data[4]));
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	7a12      	ldrb	r2, [r2, #8]
 8000346:	4611      	mov	r1, r2
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 8000348:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <Can_Tx_Msg+0xfc>)
	                          ((u_int)msg->data[5] <<  8) |
 800034a:	430b      	orrs	r3, r1
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 800034c:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c

	CAN1->sTxMailBox[0].TDTR &= ~CAN_TDT1R_DLC;
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000352:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8000356:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000358:	f023 030f 	bic.w	r3, r3, #15
 800035c:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	CAN1->sTxMailBox[0].TDTR |=  (msg->len & CAN_TDT0R_DLC);
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000362:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	f003 030f 	and.w	r3, r3, #15
 800036e:	490c      	ldr	r1, [pc, #48]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000370:	4313      	orrs	r3, r2
 8000372:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184

	CAN1->IER |= CAN_IER_TMEIE;                      // enable  TME interrupt
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a09      	ldr	r2, [pc, #36]	; (80003a0 <Can_Tx_Msg+0xfc>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6153      	str	r3, [r2, #20]
	CAN1->sTxMailBox[0].TIR |=  CAN_TI0R_TXRQ;       // transmit message
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000384:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000388:	4a05      	ldr	r2, [pc, #20]	; (80003a0 <Can_Tx_Msg+0xfc>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40006400 	.word	0x40006400

080003a4 <Can_Rx_Msg>:


void Can_Rx_Msg(CAN_MESSAGE * msg) {
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]

	if ((CAN1->sFIFOMailBox[0].RIR & CAN_ID_EXT) == 0) { // Standard ID
 80003ac:	4b2e      	ldr	r3, [pc, #184]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003ae:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->format = STANDARD_FORMAT;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
	    msg->id     = (uint32_t)0x000007FF & (CAN1->sFIFOMailBox[0].RIR >> 21);
 80003b8:	4b2b      	ldr	r3, [pc, #172]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003ba:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80003be:	0d5b      	lsrs	r3, r3, #21
 80003c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]
	  }  else  {                                          // Extended ID
	    msg->format = EXTENDED_FORMAT;
	    msg->id     = (uint32_t)0x0003FFFF & (CAN1->sFIFOMailBox[0].RIR >> 3);
	  }
	                                                  // Read type information
	  if ((CAN1->sFIFOMailBox[0].RIR & CAN_RTR_REMOTE) == 0) {
 80003c8:	4b27      	ldr	r3, [pc, #156]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003ca:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->type =   DATA_FRAME;                     // DATA   FRAME
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
	  }  else  {
	    msg->type = REMOTE_FRAME;                     // REMOTE FRAME
	  }

	  msg->len = (char)0x0000000F & CAN1->sFIFOMailBox[0].RDTR;
 80003d4:	4b24      	ldr	r3, [pc, #144]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003d6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80003da:	f003 020f 	and.w	r2, r3, #15
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	60da      	str	r2, [r3, #12]
	                                                    // Read data
	  msg->data[0] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR);
 80003e2:	4b21      	ldr	r3, [pc, #132]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003e4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003e8:	b2da      	uxtb	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	711a      	strb	r2, [r3, #4]
	  msg->data[1] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 8);
 80003ee:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003f0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003f4:	0a1b      	lsrs	r3, r3, #8
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	715a      	strb	r2, [r3, #5]
	  msg->data[2] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 16);
 80003fc:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003fe:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000402:	0c1b      	lsrs	r3, r3, #16
 8000404:	b2da      	uxtb	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	719a      	strb	r2, [r3, #6]
	  msg->data[3] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 24);
 800040a:	4b17      	ldr	r3, [pc, #92]	; (8000468 <Can_Rx_Msg+0xc4>)
 800040c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000410:	0e1b      	lsrs	r3, r3, #24
 8000412:	b2da      	uxtb	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	71da      	strb	r2, [r3, #7]

	  msg->data[4] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR);
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <Can_Rx_Msg+0xc4>)
 800041a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800041e:	b2da      	uxtb	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	721a      	strb	r2, [r3, #8]
	  msg->data[5] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 8);
 8000424:	4b10      	ldr	r3, [pc, #64]	; (8000468 <Can_Rx_Msg+0xc4>)
 8000426:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800042a:	0a1b      	lsrs	r3, r3, #8
 800042c:	b2da      	uxtb	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	725a      	strb	r2, [r3, #9]
	  msg->data[6] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 16);
 8000432:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <Can_Rx_Msg+0xc4>)
 8000434:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000438:	0c1b      	lsrs	r3, r3, #16
 800043a:	b2da      	uxtb	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	729a      	strb	r2, [r3, #10]
	  msg->data[7] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 24);
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <Can_Rx_Msg+0xc4>)
 8000442:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000446:	0e1b      	lsrs	r3, r3, #24
 8000448:	b2da      	uxtb	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	72da      	strb	r2, [r3, #11]

	  CAN1->RF0R |= CAN_RF0R_RFOM0;                    // Release FIFO 0 output mailbox
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <Can_Rx_Msg+0xc4>)
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	4a05      	ldr	r2, [pc, #20]	; (8000468 <Can_Rx_Msg+0xc4>)
 8000454:	f043 0320 	orr.w	r3, r3, #32
 8000458:	60d3      	str	r3, [r2, #12]

}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40006400 	.word	0x40006400

0800046c <Can_Set_Filter>:


void Can_Set_Filter(uint id, char format) {
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	460b      	mov	r3, r1
 8000476:	70fb      	strb	r3, [r7, #3]

	static unsigned short CAN_filterIdx = 0;
	uint CAN_msgId = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]

	  if (CAN_filterIdx > 13) {                       // check if Filter Memory is full
 800047c:	4b3f      	ldr	r3, [pc, #252]	; (800057c <Can_Set_Filter+0x110>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	2b0d      	cmp	r3, #13
 8000482:	d874      	bhi.n	800056e <Can_Set_Filter+0x102>
	    return;
	  }
	                                                  // Setup identifier information
	  if (format == STANDARD_FORMAT)  {               // Standard ID
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d105      	bne.n	8000496 <Can_Set_Filter+0x2a>
	      CAN_msgId  |= (unsigned int)(id << 21) | CAN_ID_STD;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	055b      	lsls	r3, r3, #21
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	4313      	orrs	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	e004      	b.n	80004a0 <Can_Set_Filter+0x34>
	  }  else  {                                      // Extended ID
	      CAN_msgId  |= (unsigned int)(id <<  3) | CAN_ID_EXT;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	00db      	lsls	r3, r3, #3
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	4313      	orrs	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
	  }

	  CAN1->FMR  |=  CAN_FMR_FINIT;                    // set Initialisation mode for filter banks
 80004a0:	4b37      	ldr	r3, [pc, #220]	; (8000580 <Can_Set_Filter+0x114>)
 80004a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80004a6:	4a36      	ldr	r2, [pc, #216]	; (8000580 <Can_Set_Filter+0x114>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	  CAN1->FA1R &=  ~(unsigned int)(1 << CAN_filterIdx); // deactivate filter
 80004b0:	4b33      	ldr	r3, [pc, #204]	; (8000580 <Can_Set_Filter+0x114>)
 80004b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80004b6:	4b31      	ldr	r3, [pc, #196]	; (800057c <Can_Set_Filter+0x110>)
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	4619      	mov	r1, r3
 80004bc:	2301      	movs	r3, #1
 80004be:	408b      	lsls	r3, r1
 80004c0:	43db      	mvns	r3, r3
 80004c2:	492f      	ldr	r1, [pc, #188]	; (8000580 <Can_Set_Filter+0x114>)
 80004c4:	4013      	ands	r3, r2
 80004c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	                                                  // initialize filter
	  CAN1->FS1R |= (unsigned int)(1 << CAN_filterIdx);// set 32-bit scale configuration
 80004ca:	4b2d      	ldr	r3, [pc, #180]	; (8000580 <Can_Set_Filter+0x114>)
 80004cc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80004d0:	4a2a      	ldr	r2, [pc, #168]	; (800057c <Can_Set_Filter+0x110>)
 80004d2:	8812      	ldrh	r2, [r2, #0]
 80004d4:	4611      	mov	r1, r2
 80004d6:	2201      	movs	r2, #1
 80004d8:	408a      	lsls	r2, r1
 80004da:	4611      	mov	r1, r2
 80004dc:	4a28      	ldr	r2, [pc, #160]	; (8000580 <Can_Set_Filter+0x114>)
 80004de:	430b      	orrs	r3, r1
 80004e0:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	  CAN1->FM1R |= (unsigned int)(1 << CAN_filterIdx);// set 2 32-bit identifier list mode
 80004e4:	4b26      	ldr	r3, [pc, #152]	; (8000580 <Can_Set_Filter+0x114>)
 80004e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004ea:	4a24      	ldr	r2, [pc, #144]	; (800057c <Can_Set_Filter+0x110>)
 80004ec:	8812      	ldrh	r2, [r2, #0]
 80004ee:	4611      	mov	r1, r2
 80004f0:	2201      	movs	r2, #1
 80004f2:	408a      	lsls	r2, r1
 80004f4:	4611      	mov	r1, r2
 80004f6:	4a22      	ldr	r2, [pc, #136]	; (8000580 <Can_Set_Filter+0x114>)
 80004f8:	430b      	orrs	r3, r1
 80004fa:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	  CAN1->sFilterRegister[CAN_filterIdx].FR1 = CAN_msgId; //  32-bit identifier
 80004fe:	4920      	ldr	r1, [pc, #128]	; (8000580 <Can_Set_Filter+0x114>)
 8000500:	4b1e      	ldr	r3, [pc, #120]	; (800057c <Can_Set_Filter+0x110>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	3348      	adds	r3, #72	; 0x48
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	  CAN1->sFilterRegister[CAN_filterIdx].FR2 = CAN_msgId; //  32-bit identifier
 800050c:	4a1c      	ldr	r2, [pc, #112]	; (8000580 <Can_Set_Filter+0x114>)
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <Can_Set_Filter+0x110>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	3348      	adds	r3, #72	; 0x48
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	4413      	add	r3, r2
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	605a      	str	r2, [r3, #4]

	  CAN1->FFA1R &= ~(unsigned int)(1 << CAN_filterIdx);  // assign filter to FIFO 0
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <Can_Set_Filter+0x114>)
 800051e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <Can_Set_Filter+0x110>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	4619      	mov	r1, r3
 8000528:	2301      	movs	r3, #1
 800052a:	408b      	lsls	r3, r1
 800052c:	43db      	mvns	r3, r3
 800052e:	4914      	ldr	r1, [pc, #80]	; (8000580 <Can_Set_Filter+0x114>)
 8000530:	4013      	ands	r3, r2
 8000532:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
	  CAN1->FA1R  |=  (unsigned int)(1 << CAN_filterIdx);  // activate filter
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <Can_Set_Filter+0x114>)
 8000538:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800053c:	4a0f      	ldr	r2, [pc, #60]	; (800057c <Can_Set_Filter+0x110>)
 800053e:	8812      	ldrh	r2, [r2, #0]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	4611      	mov	r1, r2
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <Can_Set_Filter+0x114>)
 800054a:	430b      	orrs	r3, r1
 800054c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	  CAN1->FMR &= ~CAN_FMR_FINIT;                     // reset Initialisation mode for filter banks
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <Can_Set_Filter+0x114>)
 8000552:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <Can_Set_Filter+0x114>)
 8000558:	f023 0301 	bic.w	r3, r3, #1
 800055c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	  CAN_filterIdx += 1;                             // increase filter index
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <Can_Set_Filter+0x110>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <Can_Set_Filter+0x110>)
 800056a:	801a      	strh	r2, [r3, #0]
 800056c:	e000      	b.n	8000570 <Can_Set_Filter+0x104>
	    return;
 800056e:	bf00      	nop

}
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000044 	.word	0x20000044
 8000580:	40006400 	.word	0x40006400

08000584 <CAN1_TX_IRQHandler>:


__attribute__((interrupt)) void CAN1_TX_IRQHandler (void)  {
 8000584:	4668      	mov	r0, sp
 8000586:	f020 0107 	bic.w	r1, r0, #7
 800058a:	468d      	mov	sp, r1
 800058c:	b481      	push	{r0, r7}
 800058e:	af00      	add	r7, sp, #0
	if (CAN1->TSR & CAN_TSR_RQCP0) {                 // request completed mbx 0
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <CAN1_TX_IRQHandler+0x3c>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <CAN1_TX_IRQHandler+0x30>
	    CAN1->TSR |= CAN_TSR_RQCP0;                  // reset request complete mbx 0
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <CAN1_TX_IRQHandler+0x3c>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <CAN1_TX_IRQHandler+0x3c>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6093      	str	r3, [r2, #8]
	    CAN1->IER &= ~CAN_IER_TMEIE;                 // disable  TME interrupt
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <CAN1_TX_IRQHandler+0x3c>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <CAN1_TX_IRQHandler+0x3c>)
 80005ae:	f023 0301 	bic.w	r3, r3, #1
 80005b2:	6153      	str	r3, [r2, #20]
	}

// Tx Interrupt Action

}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc81      	pop	{r0, r7}
 80005ba:	4685      	mov	sp, r0
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40006400 	.word	0x40006400

080005c4 <CAN1_RX0_IRQHandler>:



__attribute__((interrupt)) void CAN1_RX0_IRQHandler (void) {
 80005c4:	4668      	mov	r0, sp
 80005c6:	f020 0107 	bic.w	r1, r0, #7
 80005ca:	468d      	mov	sp, r1
 80005cc:	b589      	push	{r0, r3, r7, lr}
 80005ce:	af00      	add	r7, sp, #0

	if (CAN1->RF0R & CAN_RF0R_FMP0) {			      // message pending?
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <CAN1_RX0_IRQHandler+0x2c>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d002      	beq.n	80005e2 <CAN1_RX0_IRQHandler+0x1e>
		Can_Rx_Msg(&can_rx_message);                  // read the message
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <CAN1_RX0_IRQHandler+0x30>)
 80005de:	f7ff fee1 	bl	80003a4 <Can_Rx_Msg>
	}

}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 80005ea:	4685      	mov	sp, r0
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40006400 	.word	0x40006400
 80005f4:	20000054 	.word	0x20000054

080005f8 <__NVIC_EnableIRQ>:
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	db0b      	blt.n	8000622 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 021f 	and.w	r2, r3, #31
 8000610:	4907      	ldr	r1, [pc, #28]	; (8000630 <__NVIC_EnableIRQ+0x38>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	2001      	movs	r0, #1
 800061a:	fa00 f202 	lsl.w	r2, r0, r2
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000e100 	.word	0xe000e100

08000634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000644:	2b00      	cmp	r3, #0
 8000646:	db0a      	blt.n	800065e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	b2da      	uxtb	r2, r3
 800064c:	490c      	ldr	r1, [pc, #48]	; (8000680 <__NVIC_SetPriority+0x4c>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	0112      	lsls	r2, r2, #4
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	440b      	add	r3, r1
 8000658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800065c:	e00a      	b.n	8000674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4908      	ldr	r1, [pc, #32]	; (8000684 <__NVIC_SetPriority+0x50>)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	3b04      	subs	r3, #4
 800066c:	0112      	lsls	r2, r2, #4
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	440b      	add	r3, r1
 8000672:	761a      	strb	r2, [r3, #24]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000e100 	.word	0xe000e100
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3b01      	subs	r3, #1
 8000694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000698:	d301      	bcc.n	800069e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800069a:	2301      	movs	r3, #1
 800069c:	e00f      	b.n	80006be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <SysTick_Config+0x40>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006a6:	210f      	movs	r1, #15
 80006a8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ac:	f7ff ffc2 	bl	8000634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <SysTick_Config+0x40>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <SysTick_Config+0x40>)
 80006b8:	2207      	movs	r2, #7
 80006ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	e000e010 	.word	0xe000e010

080006cc <SystemRegisterCFG>:
 */
#include "config.h"



void SystemRegisterCFG(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

	// *** Configure System Clock (36MHz for each system BUS) ***
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;		// HSE as an input to the PLL loop
 80006d0:	4b5c      	ldr	r3, [pc, #368]	; (8000844 <SystemRegisterCFG+0x178>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	4a5b      	ldr	r2, [pc, #364]	; (8000844 <SystemRegisterCFG+0x178>)
 80006d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006da:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP_1;		// PLLP DIV = /2
 80006dc:	4b59      	ldr	r3, [pc, #356]	; (8000844 <SystemRegisterCFG+0x178>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	4a58      	ldr	r2, [pc, #352]	; (8000844 <SystemRegisterCFG+0x178>)
 80006e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80006e6:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP_0;
 80006e8:	4b56      	ldr	r3, [pc, #344]	; (8000844 <SystemRegisterCFG+0x178>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	4a55      	ldr	r2, [pc, #340]	; (8000844 <SystemRegisterCFG+0x178>)
 80006ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006f2:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b001001000 << 6);			// Multiplication factor PLLN = 72
 80006f4:	4b53      	ldr	r3, [pc, #332]	; (8000844 <SystemRegisterCFG+0x178>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	4a52      	ldr	r2, [pc, #328]	; (8000844 <SystemRegisterCFG+0x178>)
 80006fa:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 80006fe:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b000100);					// PLLM DIV = /4
 8000700:	4b50      	ldr	r3, [pc, #320]	; (8000844 <SystemRegisterCFG+0x178>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	4a4f      	ldr	r2, [pc, #316]	; (8000844 <SystemRegisterCFG+0x178>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;				// System Clock MUX switched to PLL
 800070c:	4b4d      	ldr	r3, [pc, #308]	; (8000844 <SystemRegisterCFG+0x178>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	4a4c      	ldr	r2, [pc, #304]	; (8000844 <SystemRegisterCFG+0x178>)
 8000712:	f043 0302 	orr.w	r3, r3, #2
 8000716:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (RCC_CFGR_HPRE_DIV2 << RCC_CFGR_HPRE_Pos);		// AHB DIV = /2
 8000718:	4b4a      	ldr	r3, [pc, #296]	; (8000844 <SystemRegisterCFG+0x178>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4a49      	ldr	r2, [pc, #292]	; (8000844 <SystemRegisterCFG+0x178>)
 800071e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000722:	6093      	str	r3, [r2, #8]
	RCC->CR |= RCC_CR_HSEON;	// HSE ON
 8000724:	4b47      	ldr	r3, [pc, #284]	; (8000844 <SystemRegisterCFG+0x178>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a46      	ldr	r2, [pc, #280]	; (8000844 <SystemRegisterCFG+0x178>)
 800072a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800072e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); // Wait for HSE ON
 8000730:	bf00      	nop
 8000732:	4b44      	ldr	r3, [pc, #272]	; (8000844 <SystemRegisterCFG+0x178>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0f9      	beq.n	8000732 <SystemRegisterCFG+0x66>
	RCC->CR |= RCC_CR_PLLON;	// PLL ON
 800073e:	4b41      	ldr	r3, [pc, #260]	; (8000844 <SystemRegisterCFG+0x178>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a40      	ldr	r2, [pc, #256]	; (8000844 <SystemRegisterCFG+0x178>)
 8000744:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000748:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLRDY)); // Check if PLL not locked
 800074a:	bf00      	nop
 800074c:	4b3d      	ldr	r3, [pc, #244]	; (8000844 <SystemRegisterCFG+0x178>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1f9      	bne.n	800074c <SystemRegisterCFG+0x80>
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Check for a correct source set
 8000758:	bf00      	nop
 800075a:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <SystemRegisterCFG+0x178>)
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	f003 030c 	and.w	r3, r3, #12
 8000762:	2b08      	cmp	r3, #8
 8000764:	d1f9      	bne.n	800075a <SystemRegisterCFG+0x8e>
	RCC->CR &= ~RCC_CR_HSION;	// 16MHz HSI OFF
 8000766:	4b37      	ldr	r3, [pc, #220]	; (8000844 <SystemRegisterCFG+0x178>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a36      	ldr	r2, [pc, #216]	; (8000844 <SystemRegisterCFG+0x178>)
 800076c:	f023 0301 	bic.w	r3, r3, #1
 8000770:	6013      	str	r3, [r2, #0]


	// RCC Configuration
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;	// GPIO Clock
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <SystemRegisterCFG+0x178>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a33      	ldr	r2, [pc, #204]	; (8000844 <SystemRegisterCFG+0x178>)
 8000778:	f043 0307 	orr.w	r3, r3, #7
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;		// SPI1 clock
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <SystemRegisterCFG+0x178>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	4a30      	ldr	r2, [pc, #192]	; (8000844 <SystemRegisterCFG+0x178>)
 8000784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000788:	6453      	str	r3, [r2, #68]	; 0x44

	// Standard GPIO Config (LEDs)
	GPIOC->MODER |= GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE11_0 | GPIO_MODER_MODE12_0;	// STM LEDs output
 800078a:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <SystemRegisterCFG+0x17c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a2e      	ldr	r2, [pc, #184]	; (8000848 <SystemRegisterCFG+0x17c>)
 8000790:	f043 73a2 	orr.w	r3, r3, #21233664	; 0x1440000
 8000794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000798:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD8 | GPIO_ODR_OD9 | GPIO_ODR_OD11 | GPIO_ODR_OD12;		// STM LEDs OFF
 800079a:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <SystemRegisterCFG+0x17c>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a2a      	ldr	r2, [pc, #168]	; (8000848 <SystemRegisterCFG+0x17c>)
 80007a0:	f443 53d8 	orr.w	r3, r3, #6912	; 0x1b00
 80007a4:	6153      	str	r3, [r2, #20]

	// W6100 External Reset config
	GPIOC->MODER |= GPIO_MODER_MODE4_0;		// Output
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <SystemRegisterCFG+0x17c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a27      	ldr	r2, [pc, #156]	; (8000848 <SystemRegisterCFG+0x17c>)
 80007ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b0:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD4;				// Level high (reset disable)
 80007b2:	4b25      	ldr	r3, [pc, #148]	; (8000848 <SystemRegisterCFG+0x17c>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a24      	ldr	r2, [pc, #144]	; (8000848 <SystemRegisterCFG+0x17c>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6153      	str	r3, [r2, #20]

	// W6100 External Interrupt pin configuration
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;	// Enable clock for SYSCFG (Used for EXTI ISR)
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <SystemRegisterCFG+0x178>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a20      	ldr	r2, [pc, #128]	; (8000844 <SystemRegisterCFG+0x178>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007ca:	f3bf 8f4f 	dsb	sy
	__DSB();
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PC;	// PC5 pin selected
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <SystemRegisterCFG+0x180>)
 80007d0:	68db      	ldr	r3, [r3, #12]
 80007d2:	4a1e      	ldr	r2, [pc, #120]	; (800084c <SystemRegisterCFG+0x180>)
 80007d4:	f043 0320 	orr.w	r3, r3, #32
 80007d8:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_IM5;						// Interrupt masked for line Px5
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <SystemRegisterCFG+0x184>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <SystemRegisterCFG+0x184>)
 80007e0:	f043 0320 	orr.w	r3, r3, #32
 80007e4:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR5;					// Falling edge for line Px5
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <SystemRegisterCFG+0x184>)
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	4a19      	ldr	r2, [pc, #100]	; (8000850 <SystemRegisterCFG+0x184>)
 80007ec:	f043 0320 	orr.w	r3, r3, #32
 80007f0:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007f2:	2017      	movs	r0, #23
 80007f4:	f7ff ff00 	bl	80005f8 <__NVIC_EnableIRQ>


	// SPI GPIO Config
	GPIOA->MODER |= GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1;		// SPI1 AFIO Set (NSS Software)
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <SystemRegisterCFG+0x188>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a15      	ldr	r2, [pc, #84]	; (8000854 <SystemRegisterCFG+0x188>)
 80007fe:	f443 4329 	orr.w	r3, r3, #43264	; 0xa900
 8000802:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_OD4;		// Slave select HIGH (disable)
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <SystemRegisterCFG+0x188>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a12      	ldr	r2, [pc, #72]	; (8000854 <SystemRegisterCFG+0x188>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6153      	str	r3, [r2, #20]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL5_0 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL6_0 |
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <SystemRegisterCFG+0x188>)
 8000812:	6a1b      	ldr	r3, [r3, #32]
 8000814:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <SystemRegisterCFG+0x188>)
 8000816:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800081a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800081e:	6213      	str	r3, [r2, #32]
					 GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL7_0 | GPIO_AFRL_AFRL7_2;			// SPI1 AFIO => SPI1

	// SPI Config
	SPI1->CR1 |= SPI_CR1_SPE | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_MSTR;
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <SystemRegisterCFG+0x18c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <SystemRegisterCFG+0x18c>)
 8000826:	f443 7351 	orr.w	r3, r3, #836	; 0x344
 800082a:	6013      	str	r3, [r2, #0]

	// IO-Link Config
	GPIOB->MODER |= GPIO_MODER_MODER14_0;		// EN_L+ pin: output
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <SystemRegisterCFG+0x190>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <SystemRegisterCFG+0x190>)
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000836:	6013      	str	r3, [r2, #0]

	// SysTic Config
	SysTick_Config(16000000);
 8000838:	4809      	ldr	r0, [pc, #36]	; (8000860 <SystemRegisterCFG+0x194>)
 800083a:	f7ff ff25 	bl	8000688 <SysTick_Config>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020800 	.word	0x40020800
 800084c:	40013800 	.word	0x40013800
 8000850:	40013c00 	.word	0x40013c00
 8000854:	40020000 	.word	0x40020000
 8000858:	40013000 	.word	0x40013000
 800085c:	40020400 	.word	0x40020400
 8000860:	00f42400 	.word	0x00f42400

08000864 <serverOffResponse>:

void serverOffResponse(uint8_t sck_nbr) {
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR |= GPIO_ODR_OD8;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <serverOffResponse+0x30>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <serverOffResponse+0x30>)
 8000874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000878:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~GPIO_ODR_OD9;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <serverOffResponse+0x30>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <serverOffResponse+0x30>)
 8000880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000884:	6153      	str	r3, [r2, #20]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40020800 	.word	0x40020800

08000898 <serverStartResponse>:

void serverStartResponse(uint8_t sck_nbr) {
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR &= ~GPIO_ODR_OD8;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <serverStartResponse+0x30>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <serverStartResponse+0x30>)
 80008a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008ac:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= GPIO_ODR_OD9;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <serverStartResponse+0x30>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <serverStartResponse+0x30>)
 80008b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b8:	6153      	str	r3, [r2, #20]
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40020800 	.word	0x40020800

080008cc <SysTick_Handler>:



__attribute__((interrupt)) void SysTick_Handler(void){
 80008cc:	4668      	mov	r0, sp
 80008ce:	f020 0107 	bic.w	r1, r0, #7
 80008d2:	468d      	mov	sp, r1
 80008d4:	b481      	push	{r0, r7}
 80008d6:	af00      	add	r7, sp, #0
//	GPIOC->ODR ^= GPIO_ODR_OD11;
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc81      	pop	{r0, r7}
 80008de:	4685      	mov	sp, r0
 80008e0:	4770      	bx	lr
	...

080008e4 <main>:
// Server responses
uint8_t on_message[20] = {"System Enabled\n"};
uint8_t off_message[20] = {"System Disabled\n"};

int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

	SystemRegisterCFG();
 80008ea:	f7ff feef 	bl	80006cc <SystemRegisterCFG>

	registerSocketCloseCallback(serverOffResponse);		// Register callback function for server close
 80008ee:	4835      	ldr	r0, [pc, #212]	; (80009c4 <main+0xe0>)
 80008f0:	f000 fdf6 	bl	80014e0 <registerSocketCloseCallback>
	registerSocketOpenCallback(serverStartResponse);	// Register callback function for server start (socket connected)
 80008f4:	4834      	ldr	r0, [pc, #208]	; (80009c8 <main+0xe4>)
 80008f6:	f000 fde3 	bl	80014c0 <registerSocketOpenCallback>
	registerDataReceivedCallback(dataPacketReceived);	// Register callback function when data packets received
 80008fa:	4834      	ldr	r0, [pc, #208]	; (80009cc <main+0xe8>)
 80008fc:	f000 fdd0 	bl	80014a0 <registerDataReceivedCallback>

	GPIOC->ODR &= ~GPIO_ODR_OD9;						// Server RED LED ON
 8000900:	4b33      	ldr	r3, [pc, #204]	; (80009d0 <main+0xec>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a32      	ldr	r2, [pc, #200]	; (80009d0 <main+0xec>)
 8000906:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800090a:	6153      	str	r3, [r2, #20]

	W6100_INIT();										// Initialise W6100 with basic network information
 800090c:	f000 f9d7 	bl	8000cbe <W6100_INIT>

	/* Socket Configuration */
	uint8_t txTotalSize = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	71fb      	strb	r3, [r7, #7]
	uint8_t rxTotalSize = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	71bb      	strb	r3, [r7, #6]

	for (uint8_t i=0; i<7; i++) {
 8000918:	2300      	movs	r3, #0
 800091a:	717b      	strb	r3, [r7, #5]
 800091c:	e016      	b.n	800094c <main+0x68>
		SPI_W6100_WSOCK(Sn_TX_BSR, 0x02, i, REG);		// assign 2 Kbytes TX buffer per SOCKET
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	2301      	movs	r3, #1
 8000922:	2102      	movs	r1, #2
 8000924:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000928:	f000 f98a 	bl	8000c40 <SPI_W6100_WSOCK>
		SPI_W6100_WSOCK(Sn_RX_BSR, 0x02, i, REG);		// assign 2 Kbytes RX buffer per SOCKET
 800092c:	797a      	ldrb	r2, [r7, #5]
 800092e:	2301      	movs	r3, #1
 8000930:	2102      	movs	r1, #2
 8000932:	f44f 7008 	mov.w	r0, #544	; 0x220
 8000936:	f000 f983 	bl	8000c40 <SPI_W6100_WSOCK>
		txTotalSize += 0x02;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	3302      	adds	r3, #2
 800093e:	71fb      	strb	r3, [r7, #7]
		rxTotalSize += 0x02;
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	3302      	adds	r3, #2
 8000944:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i=0; i<7; i++) {
 8000946:	797b      	ldrb	r3, [r7, #5]
 8000948:	3301      	adds	r3, #1
 800094a:	717b      	strb	r3, [r7, #5]
 800094c:	797b      	ldrb	r3, [r7, #5]
 800094e:	2b06      	cmp	r3, #6
 8000950:	d9e5      	bls.n	800091e <main+0x3a>
	}

	destination_adr = W6100_OpenTCPSocket(0, 5000);		// Open TCP socket 0 on port 5000 and return its destination address
 8000952:	f241 3188 	movw	r1, #5000	; 0x1388
 8000956:	2000      	movs	r0, #0
 8000958:	f000 fb6a 	bl	8001030 <W6100_OpenTCPSocket>
 800095c:	4602      	mov	r2, r0
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <main+0xf0>)
 8000960:	601a      	str	r2, [r3, #0]



	strcpy(can_on_msg.data, "mb_0000");
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <main+0xf4>)
 8000964:	4a1d      	ldr	r2, [pc, #116]	; (80009dc <main+0xf8>)
 8000966:	3304      	adds	r3, #4
 8000968:	e892 0003 	ldmia.w	r2, {r0, r1}
 800096c:	e883 0003 	stmia.w	r3, {r0, r1}
	can_on_msg.format = STANDARD_FORMAT;
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <main+0xf4>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
	can_on_msg.type = DATA_FRAME;
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <main+0xf4>)
 8000978:	2200      	movs	r2, #0
 800097a:	615a      	str	r2, [r3, #20]
	can_on_msg.len = sizeof(can_on_msg);
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <main+0xf4>)
 800097e:	2218      	movs	r2, #24
 8000980:	60da      	str	r2, [r3, #12]
	can_on_msg.id = 0x01;
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <main+0xf4>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]


	strcpy(can_off_msg.data, "mb_0001");
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <main+0xfc>)
 800098a:	4a16      	ldr	r2, [pc, #88]	; (80009e4 <main+0x100>)
 800098c:	3304      	adds	r3, #4
 800098e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000992:	e883 0003 	stmia.w	r3, {r0, r1}
	can_off_msg.format = STANDARD_FORMAT;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <main+0xfc>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
	can_off_msg.type = DATA_FRAME;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <main+0xfc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
	can_off_msg.len = sizeof(can_off_msg);
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <main+0xfc>)
 80009a4:	2218      	movs	r2, #24
 80009a6:	60da      	str	r2, [r3, #12]
	can_off_msg.id = 0x02;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <main+0xfc>)
 80009aa:	2202      	movs	r2, #2
 80009ac:	601a      	str	r2, [r3, #0]

	CanInit();
 80009ae:	f7ff fc33 	bl	8000218 <CanInit>

	Can_Set_Filter(0x03, STANDARD_FORMAT);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2003      	movs	r0, #3
 80009b6:	f7ff fd59 	bl	800046c <Can_Set_Filter>
	Can_Set_Filter(0x04, STANDARD_FORMAT);
 80009ba:	2100      	movs	r1, #0
 80009bc:	2004      	movs	r0, #4
 80009be:	f7ff fd55 	bl	800046c <Can_Set_Filter>



	while (1) {
 80009c2:	e7fe      	b.n	80009c2 <main+0xde>
 80009c4:	08000865 	.word	0x08000865
 80009c8:	08000899 	.word	0x08000899
 80009cc:	080009e9 	.word	0x080009e9
 80009d0:	40020800 	.word	0x40020800
 80009d4:	200000b0 	.word	0x200000b0
 80009d8:	20000084 	.word	0x20000084
 80009dc:	080016f4 	.word	0x080016f4
 80009e0:	2000006c 	.word	0x2000006c
 80009e4:	080016fc 	.word	0x080016fc

080009e8 <dataPacketReceived>:

}



void dataPacketReceived(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	/* Reaction on Data Received */
	// Check Ethernet
	if (W6100_ReceiveData(0, destination_adr, (uint8_t*)rx_dat, sizeof(rx_dat))) {		// Check if data arrived
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <dataPacketReceived+0x7c>)
 80009ee:	6819      	ldr	r1, [r3, #0]
 80009f0:	2314      	movs	r3, #20
 80009f2:	4a1d      	ldr	r2, [pc, #116]	; (8000a68 <dataPacketReceived+0x80>)
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 fbab 	bl	8001150 <W6100_ReceiveData>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d02e      	beq.n	8000a5e <dataPacketReceived+0x76>
		if (!strcmp(rx_dat, "on\n")) {
 8000a00:	491a      	ldr	r1, [pc, #104]	; (8000a6c <dataPacketReceived+0x84>)
 8000a02:	4819      	ldr	r0, [pc, #100]	; (8000a68 <dataPacketReceived+0x80>)
 8000a04:	f7ff fbe0 	bl	80001c8 <strcmp>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d110      	bne.n	8000a30 <dataPacketReceived+0x48>
			GPIOC->ODR &= ~GPIO_ODR_OD12;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <dataPacketReceived+0x88>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <dataPacketReceived+0x88>)
 8000a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a18:	6153      	str	r3, [r2, #20]
			// Send msg to the client
			W6100_TransmitData(0, destination_adr, on_message, sizeof(on_message));
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <dataPacketReceived+0x7c>)
 8000a1c:	6819      	ldr	r1, [r3, #0]
 8000a1e:	2314      	movs	r3, #20
 8000a20:	4a14      	ldr	r2, [pc, #80]	; (8000a74 <dataPacketReceived+0x8c>)
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 fc5d 	bl	80012e2 <W6100_TransmitData>
			Can_Tx_Msg(&can_on_msg);
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <dataPacketReceived+0x90>)
 8000a2a:	f7ff fc3b 	bl	80002a4 <Can_Tx_Msg>
			// Send CAN frame
			Can_Tx_Msg(&can_off_msg);
		}
	}

}
 8000a2e:	e016      	b.n	8000a5e <dataPacketReceived+0x76>
		else if (!strcmp(rx_dat, "off\n"))	{
 8000a30:	4912      	ldr	r1, [pc, #72]	; (8000a7c <dataPacketReceived+0x94>)
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <dataPacketReceived+0x80>)
 8000a34:	f7ff fbc8 	bl	80001c8 <strcmp>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10f      	bne.n	8000a5e <dataPacketReceived+0x76>
			GPIOC->ODR |= GPIO_ODR_OD12;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <dataPacketReceived+0x88>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <dataPacketReceived+0x88>)
 8000a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a48:	6153      	str	r3, [r2, #20]
			W6100_TransmitData(0, destination_adr, off_message, sizeof(off_message));
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <dataPacketReceived+0x7c>)
 8000a4c:	6819      	ldr	r1, [r3, #0]
 8000a4e:	2314      	movs	r3, #20
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <dataPacketReceived+0x98>)
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fc45 	bl	80012e2 <W6100_TransmitData>
			Can_Tx_Msg(&can_off_msg);
 8000a58:	480a      	ldr	r0, [pc, #40]	; (8000a84 <dataPacketReceived+0x9c>)
 8000a5a:	f7ff fc23 	bl	80002a4 <Can_Tx_Msg>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000b0 	.word	0x200000b0
 8000a68:	2000009c 	.word	0x2000009c
 8000a6c:	08001704 	.word	0x08001704
 8000a70:	40020800 	.word	0x40020800
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000084 	.word	0x20000084
 8000a7c:	08001708 	.word	0x08001708
 8000a80:	20000014 	.word	0x20000014
 8000a84:	2000006c 	.word	0x2000006c

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <SystemInit+0x28>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <SystemInit+0x28>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <SystemInit+0x28>)
 8000a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa2:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <SPI_Eth_SS>:





void SPI_Eth_SS(uint8_t state) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	if (state) {
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <SPI_Eth_SS+0x1e>
		GPIOA->ODR &= ~GPIO_ODR_OD4;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <SPI_Eth_SS+0x3c>)
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <SPI_Eth_SS+0x3c>)
 8000aca:	f023 0310 	bic.w	r3, r3, #16
 8000ace:	6153      	str	r3, [r2, #20]
	}
	else if (!state) {
		GPIOA->ODR |= GPIO_ODR_OD4;
	}
}
 8000ad0:	e008      	b.n	8000ae4 <SPI_Eth_SS+0x30>
	else if (!state) {
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d105      	bne.n	8000ae4 <SPI_Eth_SS+0x30>
		GPIOA->ODR |= GPIO_ODR_OD4;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SPI_Eth_SS+0x3c>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <SPI_Eth_SS+0x3c>)
 8000ade:	f043 0310 	orr.w	r3, r3, #16
 8000ae2:	6153      	str	r3, [r2, #20]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40020000 	.word	0x40020000

08000af4 <SPI_Eth_RT>:

uint8_t SPI_Eth_RT(uint8_t data) {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	while(!(SPI1->SR & SPI_SR_TXE));	// Wait for Tx buffer empty
 8000afe:	bf00      	nop
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <SPI_Eth_RT+0x40>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0f9      	beq.n	8000b00 <SPI_Eth_RT+0xc>
	SPI1->DR = data;
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <SPI_Eth_RT+0x40>)
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_RXNE));	// Wait for Rx buffer not empty
 8000b12:	bf00      	nop
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <SPI_Eth_RT+0x40>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f9      	beq.n	8000b14 <SPI_Eth_RT+0x20>
	data = SPI1->DR;
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <SPI_Eth_RT+0x40>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	71fb      	strb	r3, [r7, #7]
	return data;
 8000b26:	79fb      	ldrb	r3, [r7, #7]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40013000 	.word	0x40013000

08000b38 <SPI_W6100_RCR>:

uint8_t SPI_W6100_RCR(uint16_t adr) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
	/* See Page 76 - W6100 datasheet */
	uint8_t dat;
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000b42:	2001      	movs	r0, #1
 8000b44:	f7ff ffb6 	bl	8000ab4 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ffcf 	bl	8000af4 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ffca 	bl	8000af4 <SPI_Eth_RT>
	SPI_Eth_RT(0x00);		// Send Control Byte	[CR, Read, Variable Length Data Mode]
 8000b60:	2000      	movs	r0, #0
 8000b62:	f7ff ffc7 	bl	8000af4 <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);	// Send garbage data to read the Common Register
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff ffc4 	bl	8000af4 <SPI_Eth_RT>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(OFF);		// NSS Slave Disable
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff ff9f 	bl	8000ab4 <SPI_Eth_SS>
	return dat;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <SPI_W6100_WCR>:

void SPI_W6100_WCR(uint16_t adr, uint8_t val) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	80fb      	strh	r3, [r7, #6]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	717b      	strb	r3, [r7, #5]
	/* See Page 76 - W6100 datasheet */
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000b90:	2001      	movs	r0, #1
 8000b92:	f7ff ff8f 	bl	8000ab4 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	0a1b      	lsrs	r3, r3, #8
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffa8 	bl	8000af4 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ffa3 	bl	8000af4 <SPI_Eth_RT>
	SPI_Eth_RT(0x04);		// Send Control Byte	[CR, Write, Variable Length Data Mode]
 8000bae:	2004      	movs	r0, #4
 8000bb0:	f7ff ffa0 	bl	8000af4 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 8000bb4:	797b      	ldrb	r3, [r7, #5]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff9c 	bl	8000af4 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff ff79 	bl	8000ab4 <SPI_Eth_SS>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <SPI_W6100_RSOCK>:

uint8_t SPI_W6100_RSOCK(uint16_t adr, uint8_t socket_nbr, uint8_t block) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	80fb      	strh	r3, [r7, #6]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	717b      	strb	r3, [r7, #5]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	713b      	strb	r3, [r7, #4]
	uint8_t dat;
	uint8_t cb_temp = 0x00;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 8000be0:	797b      	ldrb	r3, [r7, #5]
 8000be2:	015b      	lsls	r3, r3, #5
 8000be4:	b25a      	sxtb	r2, r3
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 8000bf0:	793b      	ldrb	r3, [r7, #4]
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	b25a      	sxtb	r2, r3
 8000bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff ff57 	bl	8000ab4 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff70 	bl	8000af4 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff6b 	bl	8000af4 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff67 	bl	8000af4 <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);		// Send garbage data to read the Common Register
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff ff64 	bl	8000af4 <SPI_Eth_RT>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73bb      	strb	r3, [r7, #14]
	SPI_Eth_SS(OFF);
 8000c30:	2000      	movs	r0, #0
 8000c32:	f7ff ff3f 	bl	8000ab4 <SPI_Eth_SS>
	return dat;
 8000c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <SPI_W6100_WSOCK>:

void SPI_W6100_WSOCK(uint16_t adr, uint8_t val, uint8_t socket_nbr, uint8_t block) {
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4604      	mov	r4, r0
 8000c48:	4608      	mov	r0, r1
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4623      	mov	r3, r4
 8000c50:	80fb      	strh	r3, [r7, #6]
 8000c52:	4603      	mov	r3, r0
 8000c54:	717b      	strb	r3, [r7, #5]
 8000c56:	460b      	mov	r3, r1
 8000c58:	713b      	strb	r3, [r7, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	70fb      	strb	r3, [r7, #3]
	uint8_t cb_temp = 0x04;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 8000c62:	793b      	ldrb	r3, [r7, #4]
 8000c64:	015b      	lsls	r3, r3, #5
 8000c66:	b25a      	sxtb	r2, r3
 8000c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	b25a      	sxtb	r2, r3
 8000c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff ff16 	bl	8000ab4 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff2f 	bl	8000af4 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff2a 	bl	8000af4 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff26 	bl	8000af4 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 8000ca8:	797b      	ldrb	r3, [r7, #5]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff22 	bl	8000af4 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff feff 	bl	8000ab4 <SPI_Eth_SS>
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd90      	pop	{r4, r7, pc}

08000cbe <W6100_INIT>:

void W6100_INIT(void) {
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
	/* *** W6100 Init *** */
	SPI_W6100_WCR(NETLCKR, 0x3a);	// NETLCKR		Network settings unlock
 8000cc2:	213a      	movs	r1, #58	; 0x3a
 8000cc4:	f244 10f5 	movw	r0, #16885	; 0x41f5
 8000cc8:	f7ff ff5a 	bl	8000b80 <SPI_W6100_WCR>

	SPI_W6100_WCR(SHAR0, MAC0);	// SHAR[5:0]	Set hardware MAC address
 8000ccc:	2111      	movs	r1, #17
 8000cce:	f244 1020 	movw	r0, #16672	; 0x4120
 8000cd2:	f7ff ff55 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR1, MAC1);
 8000cd6:	2122      	movs	r1, #34	; 0x22
 8000cd8:	f244 1021 	movw	r0, #16673	; 0x4121
 8000cdc:	f7ff ff50 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR2, MAC2);
 8000ce0:	2133      	movs	r1, #51	; 0x33
 8000ce2:	f244 1022 	movw	r0, #16674	; 0x4122
 8000ce6:	f7ff ff4b 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR3, MAC3);
 8000cea:	21aa      	movs	r1, #170	; 0xaa
 8000cec:	f244 1023 	movw	r0, #16675	; 0x4123
 8000cf0:	f7ff ff46 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR4, MAC4);
 8000cf4:	21bb      	movs	r1, #187	; 0xbb
 8000cf6:	f244 1024 	movw	r0, #16676	; 0x4124
 8000cfa:	f7ff ff41 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR5, MAC5);
 8000cfe:	21cc      	movs	r1, #204	; 0xcc
 8000d00:	f244 1025 	movw	r0, #16677	; 0x4125
 8000d04:	f7ff ff3c 	bl	8000b80 <SPI_W6100_WCR>

	SPI_W6100_WCR(GAR0, GIP0);	// GAR[0:3]		Gateway IP address 192.168.0.1
 8000d08:	21c0      	movs	r1, #192	; 0xc0
 8000d0a:	f244 1030 	movw	r0, #16688	; 0x4130
 8000d0e:	f7ff ff37 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR1, GIP1);
 8000d12:	21a8      	movs	r1, #168	; 0xa8
 8000d14:	f244 1031 	movw	r0, #16689	; 0x4131
 8000d18:	f7ff ff32 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR2, GIP2);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	f244 1032 	movw	r0, #16690	; 0x4132
 8000d22:	f7ff ff2d 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR3, GIP3);
 8000d26:	2101      	movs	r1, #1
 8000d28:	f244 1033 	movw	r0, #16691	; 0x4133
 8000d2c:	f7ff ff28 	bl	8000b80 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUBR0, SBM0);	// SUBR[0:3]	Subnet mask address 255:255:255:0
 8000d30:	21ff      	movs	r1, #255	; 0xff
 8000d32:	f244 1034 	movw	r0, #16692	; 0x4134
 8000d36:	f7ff ff23 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR1, SBM1);
 8000d3a:	21ff      	movs	r1, #255	; 0xff
 8000d3c:	f244 1035 	movw	r0, #16693	; 0x4135
 8000d40:	f7ff ff1e 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR2, SBM2);
 8000d44:	21ff      	movs	r1, #255	; 0xff
 8000d46:	f244 1036 	movw	r0, #16694	; 0x4136
 8000d4a:	f7ff ff19 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR3, SBM3);
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f244 1037 	movw	r0, #16695	; 0x4137
 8000d54:	f7ff ff14 	bl	8000b80 <SPI_W6100_WCR>

	SPI_W6100_WCR(SIPR0, IPV0);	// SIPR[0:3]	IPv4 Source IP Address 192.168.0.27
 8000d58:	21c0      	movs	r1, #192	; 0xc0
 8000d5a:	f244 1038 	movw	r0, #16696	; 0x4138
 8000d5e:	f7ff ff0f 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR1, IPV1);
 8000d62:	21a8      	movs	r1, #168	; 0xa8
 8000d64:	f244 1039 	movw	r0, #16697	; 0x4139
 8000d68:	f7ff ff0a 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR2, IPV2);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f244 103a 	movw	r0, #16698	; 0x413a
 8000d72:	f7ff ff05 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR3, IPV3);
 8000d76:	211b      	movs	r1, #27
 8000d78:	f244 103b 	movw	r0, #16699	; 0x413b
 8000d7c:	f7ff ff00 	bl	8000b80 <SPI_W6100_WCR>

	SPI_W6100_WCR(LLAR0, 0xfe);	// Link Local Address, FE80::1322:33FF:FEAA:BBCC
 8000d80:	21fe      	movs	r1, #254	; 0xfe
 8000d82:	f244 1040 	movw	r0, #16704	; 0x4140
 8000d86:	f7ff fefb 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR1, 0x80);
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	f244 1041 	movw	r0, #16705	; 0x4141
 8000d90:	f7ff fef6 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR2, 0x00);
 8000d94:	2100      	movs	r1, #0
 8000d96:	f244 1042 	movw	r0, #16706	; 0x4142
 8000d9a:	f7ff fef1 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR3, 0x01);
 8000d9e:	2101      	movs	r1, #1
 8000da0:	f244 1043 	movw	r0, #16707	; 0x4143
 8000da4:	f7ff feec 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR4, 0x00);
 8000da8:	2100      	movs	r1, #0
 8000daa:	f244 1044 	movw	r0, #16708	; 0x4144
 8000dae:	f7ff fee7 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR5, 0x00);
 8000db2:	2100      	movs	r1, #0
 8000db4:	f244 1045 	movw	r0, #16709	; 0x4145
 8000db8:	f7ff fee2 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR6, 0x00);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	f244 1046 	movw	r0, #16710	; 0x4146
 8000dc2:	f7ff fedd 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR7, 0x00);
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	f244 1047 	movw	r0, #16711	; 0x4147
 8000dcc:	f7ff fed8 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR8, 0x13);
 8000dd0:	2113      	movs	r1, #19
 8000dd2:	f244 1048 	movw	r0, #16712	; 0x4148
 8000dd6:	f7ff fed3 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR9, 0x22);
 8000dda:	2122      	movs	r1, #34	; 0x22
 8000ddc:	f244 1049 	movw	r0, #16713	; 0x4149
 8000de0:	f7ff fece 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR10, 0x33);
 8000de4:	2133      	movs	r1, #51	; 0x33
 8000de6:	f244 104a 	movw	r0, #16714	; 0x414a
 8000dea:	f7ff fec9 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR11, 0xff);
 8000dee:	21ff      	movs	r1, #255	; 0xff
 8000df0:	f244 104b 	movw	r0, #16715	; 0x414b
 8000df4:	f7ff fec4 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR12, 0xfe);
 8000df8:	21fe      	movs	r1, #254	; 0xfe
 8000dfa:	f244 104c 	movw	r0, #16716	; 0x414c
 8000dfe:	f7ff febf 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR13, 0xaa);
 8000e02:	21aa      	movs	r1, #170	; 0xaa
 8000e04:	f244 104d 	movw	r0, #16717	; 0x414d
 8000e08:	f7ff feba 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR14, 0xbb);
 8000e0c:	21bb      	movs	r1, #187	; 0xbb
 8000e0e:	f244 104e 	movw	r0, #16718	; 0x414e
 8000e12:	f7ff feb5 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR15, 0xcc);
 8000e16:	21cc      	movs	r1, #204	; 0xcc
 8000e18:	f244 104f 	movw	r0, #16719	; 0x414f
 8000e1c:	f7ff feb0 	bl	8000b80 <SPI_W6100_WCR>

	SPI_W6100_WCR(GUAR0, 0x20);	// Global Unicast Address, 2001:0DB8:E001::1222:33FF:FEAA:BBCC
 8000e20:	2120      	movs	r1, #32
 8000e22:	f244 1050 	movw	r0, #16720	; 0x4150
 8000e26:	f7ff feab 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR1, 0x01);
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	f244 1051 	movw	r0, #16721	; 0x4151
 8000e30:	f7ff fea6 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR2, 0x0d);
 8000e34:	210d      	movs	r1, #13
 8000e36:	f244 1052 	movw	r0, #16722	; 0x4152
 8000e3a:	f7ff fea1 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR3, 0xb8);
 8000e3e:	21b8      	movs	r1, #184	; 0xb8
 8000e40:	f244 1053 	movw	r0, #16723	; 0x4153
 8000e44:	f7ff fe9c 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR4, 0xe0);
 8000e48:	21e0      	movs	r1, #224	; 0xe0
 8000e4a:	f244 1054 	movw	r0, #16724	; 0x4154
 8000e4e:	f7ff fe97 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR5, 0x01);
 8000e52:	2101      	movs	r1, #1
 8000e54:	f244 1055 	movw	r0, #16725	; 0x4155
 8000e58:	f7ff fe92 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR6, 0x00);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	f244 1056 	movw	r0, #16726	; 0x4156
 8000e62:	f7ff fe8d 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR7, 0x00);
 8000e66:	2100      	movs	r1, #0
 8000e68:	f244 1057 	movw	r0, #16727	; 0x4157
 8000e6c:	f7ff fe88 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR8, 0x13);
 8000e70:	2113      	movs	r1, #19
 8000e72:	f244 1058 	movw	r0, #16728	; 0x4158
 8000e76:	f7ff fe83 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR9, 0x22);
 8000e7a:	2122      	movs	r1, #34	; 0x22
 8000e7c:	f244 1059 	movw	r0, #16729	; 0x4159
 8000e80:	f7ff fe7e 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR10, 0x33);
 8000e84:	2133      	movs	r1, #51	; 0x33
 8000e86:	f244 105a 	movw	r0, #16730	; 0x415a
 8000e8a:	f7ff fe79 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR11, 0xff);
 8000e8e:	21ff      	movs	r1, #255	; 0xff
 8000e90:	f244 105b 	movw	r0, #16731	; 0x415b
 8000e94:	f7ff fe74 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR12, 0xfe);
 8000e98:	21fe      	movs	r1, #254	; 0xfe
 8000e9a:	f244 105c 	movw	r0, #16732	; 0x415c
 8000e9e:	f7ff fe6f 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR13, 0xaa);
 8000ea2:	21aa      	movs	r1, #170	; 0xaa
 8000ea4:	f244 105d 	movw	r0, #16733	; 0x415d
 8000ea8:	f7ff fe6a 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR14, 0xbb);
 8000eac:	21bb      	movs	r1, #187	; 0xbb
 8000eae:	f244 105e 	movw	r0, #16734	; 0x415e
 8000eb2:	f7ff fe65 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR15, 0xcc);
 8000eb6:	21cc      	movs	r1, #204	; 0xcc
 8000eb8:	f244 105f 	movw	r0, #16735	; 0x415f
 8000ebc:	f7ff fe60 	bl	8000b80 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUB6R0, 0xff);	// IPv6 Subnet Prefix, FFFF:FFFF::
 8000ec0:	21ff      	movs	r1, #255	; 0xff
 8000ec2:	f244 1060 	movw	r0, #16736	; 0x4160
 8000ec6:	f7ff fe5b 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R1, 0xff);
 8000eca:	21ff      	movs	r1, #255	; 0xff
 8000ecc:	f244 1061 	movw	r0, #16737	; 0x4161
 8000ed0:	f7ff fe56 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R2, 0xff);
 8000ed4:	21ff      	movs	r1, #255	; 0xff
 8000ed6:	f244 1062 	movw	r0, #16738	; 0x4162
 8000eda:	f7ff fe51 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R3, 0xff);
 8000ede:	21ff      	movs	r1, #255	; 0xff
 8000ee0:	f244 1063 	movw	r0, #16739	; 0x4163
 8000ee4:	f7ff fe4c 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R4, 0xff);
 8000ee8:	21ff      	movs	r1, #255	; 0xff
 8000eea:	f244 1064 	movw	r0, #16740	; 0x4164
 8000eee:	f7ff fe47 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R5, 0xff);
 8000ef2:	21ff      	movs	r1, #255	; 0xff
 8000ef4:	f244 1065 	movw	r0, #16741	; 0x4165
 8000ef8:	f7ff fe42 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R6, 0xff);
 8000efc:	21ff      	movs	r1, #255	; 0xff
 8000efe:	f244 1066 	movw	r0, #16742	; 0x4166
 8000f02:	f7ff fe3d 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R7, 0xff);
 8000f06:	21ff      	movs	r1, #255	; 0xff
 8000f08:	f244 1067 	movw	r0, #16743	; 0x4167
 8000f0c:	f7ff fe38 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R8, 0x00);
 8000f10:	2100      	movs	r1, #0
 8000f12:	f244 1068 	movw	r0, #16744	; 0x4168
 8000f16:	f7ff fe33 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R9, 0x00);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f244 1069 	movw	r0, #16745	; 0x4169
 8000f20:	f7ff fe2e 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R10, 0x00);
 8000f24:	2100      	movs	r1, #0
 8000f26:	f244 106a 	movw	r0, #16746	; 0x416a
 8000f2a:	f7ff fe29 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R11, 0x00);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f244 106b 	movw	r0, #16747	; 0x416b
 8000f34:	f7ff fe24 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R12, 0x00);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	f244 106c 	movw	r0, #16748	; 0x416c
 8000f3e:	f7ff fe1f 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R13, 0x00);
 8000f42:	2100      	movs	r1, #0
 8000f44:	f244 106d 	movw	r0, #16749	; 0x416d
 8000f48:	f7ff fe1a 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R14, 0x00);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	f244 106e 	movw	r0, #16750	; 0x416e
 8000f52:	f7ff fe15 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R15, 0x00);
 8000f56:	2100      	movs	r1, #0
 8000f58:	f244 106f 	movw	r0, #16751	; 0x416f
 8000f5c:	f7ff fe10 	bl	8000b80 <SPI_W6100_WCR>

	SPI_W6100_WCR(GA6R0, 0xfe);	// IPv6 Gateway Address, FFFF:FFFF::
 8000f60:	21fe      	movs	r1, #254	; 0xfe
 8000f62:	f244 1070 	movw	r0, #16752	; 0x4170
 8000f66:	f7ff fe0b 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R1, 0x80);
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	f244 1071 	movw	r0, #16753	; 0x4171
 8000f70:	f7ff fe06 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R2, 0x00);
 8000f74:	2100      	movs	r1, #0
 8000f76:	f244 1072 	movw	r0, #16754	; 0x4172
 8000f7a:	f7ff fe01 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R3, 0x00);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f244 1073 	movw	r0, #16755	; 0x4173
 8000f84:	f7ff fdfc 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R4, 0x00);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f244 1074 	movw	r0, #16756	; 0x4174
 8000f8e:	f7ff fdf7 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R5, 0x00);
 8000f92:	2100      	movs	r1, #0
 8000f94:	f244 1075 	movw	r0, #16757	; 0x4175
 8000f98:	f7ff fdf2 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R6, 0x00);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f244 1076 	movw	r0, #16758	; 0x4176
 8000fa2:	f7ff fded 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R7, 0x00);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f244 1077 	movw	r0, #16759	; 0x4177
 8000fac:	f7ff fde8 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R8, 0x13);
 8000fb0:	2113      	movs	r1, #19
 8000fb2:	f244 1078 	movw	r0, #16760	; 0x4178
 8000fb6:	f7ff fde3 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R9, 0x22);
 8000fba:	2122      	movs	r1, #34	; 0x22
 8000fbc:	f244 1079 	movw	r0, #16761	; 0x4179
 8000fc0:	f7ff fdde 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R10, 0x33);
 8000fc4:	2133      	movs	r1, #51	; 0x33
 8000fc6:	f244 107a 	movw	r0, #16762	; 0x417a
 8000fca:	f7ff fdd9 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R11, 0xff);
 8000fce:	21ff      	movs	r1, #255	; 0xff
 8000fd0:	f244 107b 	movw	r0, #16763	; 0x417b
 8000fd4:	f7ff fdd4 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R12, 0xfe);
 8000fd8:	21fe      	movs	r1, #254	; 0xfe
 8000fda:	f244 107c 	movw	r0, #16764	; 0x417c
 8000fde:	f7ff fdcf 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R13, 0x44);
 8000fe2:	2144      	movs	r1, #68	; 0x44
 8000fe4:	f244 107d 	movw	r0, #16765	; 0x417d
 8000fe8:	f7ff fdca 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R14, 0x55);
 8000fec:	2155      	movs	r1, #85	; 0x55
 8000fee:	f244 107e 	movw	r0, #16766	; 0x417e
 8000ff2:	f7ff fdc5 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R15, 0x66);
 8000ff6:	2166      	movs	r1, #102	; 0x66
 8000ff8:	f244 107f 	movw	r0, #16767	; 0x417f
 8000ffc:	f7ff fdc0 	bl	8000b80 <SPI_W6100_WCR>

	SPI_W6100_WCR(NETLCKR, 0x00);	// NETLCKR		Network settings lock
 8001000:	2100      	movs	r1, #0
 8001002:	f244 10f5 	movw	r0, #16885	; 0x41f5
 8001006:	f7ff fdbb 	bl	8000b80 <SPI_W6100_WCR>

	// W6100 Packet Received Interrupt setup (for Socket 0)
	// *** Modify this code to fire interrupts for other sockets if in use ***
	SPI_W6100_WCR(SYCR1, 0x80);				// Interrupt enabled (by default after reset)
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	f242 0005 	movw	r0, #8197	; 0x2005
 8001010:	f7ff fdb6 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIMR, 0x01);				// enable SIMR[S0_INT] – enable SOCKET 0 Interrupt
 8001014:	2101      	movs	r1, #1
 8001016:	f242 1014 	movw	r0, #8468	; 0x2114
 800101a:	f7ff fdb1 	bl	8000b80 <SPI_W6100_WCR>
	SPI_W6100_WSOCK(Sn_IMR, 0x04, 0, REG);	// Enable RECV Interrupt Mask Bit for Socket 0
 800101e:	2301      	movs	r3, #1
 8001020:	2200      	movs	r2, #0
 8001022:	2104      	movs	r1, #4
 8001024:	2024      	movs	r0, #36	; 0x24
 8001026:	f7ff fe0b 	bl	8000c40 <SPI_W6100_WSOCK>
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <W6100_OpenTCPSocket>:




uint32_t W6100_OpenTCPSocket (uint8_t sck_nbr, uint16_t port) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	80bb      	strh	r3, [r7, #4]
	uint32_t dest_adr;
	/* *** Open Socket as TCP4 *** */
	SPI_W6100_WSOCK(Sn_MR, 0x01, sck_nbr, REG);				// Set TCP4 mode
 8001040:	79fa      	ldrb	r2, [r7, #7]
 8001042:	2301      	movs	r3, #1
 8001044:	2101      	movs	r1, #1
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff fdfa 	bl	8000c40 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR0, (port >> 8), sck_nbr, REG);	// Set PORT number
 800104c:	88bb      	ldrh	r3, [r7, #4]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	b29b      	uxth	r3, r3
 8001052:	b2d9      	uxtb	r1, r3
 8001054:	79fa      	ldrb	r2, [r7, #7]
 8001056:	2301      	movs	r3, #1
 8001058:	f44f 708a 	mov.w	r0, #276	; 0x114
 800105c:	f7ff fdf0 	bl	8000c40 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR1, (port & 0xff), sck_nbr, REG);
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	b2d9      	uxtb	r1, r3
 8001064:	79fa      	ldrb	r2, [r7, #7]
 8001066:	2301      	movs	r3, #1
 8001068:	f240 1015 	movw	r0, #277	; 0x115
 800106c:	f7ff fde8 	bl	8000c40 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_CR, 0x01, sck_nbr, REG);				// Set OPEN command
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	2301      	movs	r3, #1
 8001074:	2101      	movs	r1, #1
 8001076:	2010      	movs	r0, #16
 8001078:	f7ff fde2 	bl	8000c40 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until OPEN command is cleared
 800107c:	bf00      	nop
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2201      	movs	r2, #1
 8001082:	4619      	mov	r1, r3
 8001084:	2010      	movs	r0, #16
 8001086:	f7ff fda0 	bl	8000bca <SPI_W6100_RSOCK>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1f6      	bne.n	800107e <W6100_OpenTCPSocket+0x4e>


	SPI_W6100_WSOCK(Sn_CR, 0x02, sck_nbr, REG);				// Set LISTEN command
 8001090:	79fa      	ldrb	r2, [r7, #7]
 8001092:	2301      	movs	r3, #1
 8001094:	2102      	movs	r1, #2
 8001096:	2010      	movs	r0, #16
 8001098:	f7ff fdd2 	bl	8000c40 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until LISTEN command is cleared
 800109c:	bf00      	nop
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2201      	movs	r2, #1
 80010a2:	4619      	mov	r1, r3
 80010a4:	2010      	movs	r0, #16
 80010a6:	f7ff fd90 	bl	8000bca <SPI_W6100_RSOCK>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f6      	bne.n	800109e <W6100_OpenTCPSocket+0x6e>

	// CONNECT NOW
	while ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x17);	// Wait until SOCKET ESTABLISHED
 80010b0:	bf00      	nop
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	2030      	movs	r0, #48	; 0x30
 80010ba:	f7ff fd86 	bl	8000bca <SPI_W6100_RSOCK>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b17      	cmp	r3, #23
 80010c2:	d1f6      	bne.n	80010b2 <W6100_OpenTCPSocket+0x82>

	/* HARDWARE RESPONSE ON THE SOCKET OPEN */
	if(socketOpenCallback) socketOpenCallback(sck_nbr);
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <W6100_OpenTCPSocket+0x11c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <W6100_OpenTCPSocket+0xa6>
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <W6100_OpenTCPSocket+0x11c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	4610      	mov	r0, r2
 80010d4:	4798      	blx	r3
	/* END OF HARDWARE RESPONSE */							// Socket established

	SPI_W6100_WSOCK(Sn_IRCLR, 0x01, sck_nbr, REG);			// Interrupt clear
 80010d6:	79fa      	ldrb	r2, [r7, #7]
 80010d8:	2301      	movs	r3, #1
 80010da:	2101      	movs	r1, #1
 80010dc:	2028      	movs	r0, #40	; 0x28
 80010de:	f7ff fdaf 	bl	8000c40 <SPI_W6100_WSOCK>

	// Read destination address
	dest_adr = (SPI_W6100_RSOCK(Sn_DIPR0, sck_nbr, REG) << 24);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2201      	movs	r2, #1
 80010e6:	4619      	mov	r1, r3
 80010e8:	f44f 7090 	mov.w	r0, #288	; 0x120
 80010ec:	f7ff fd6d 	bl	8000bca <SPI_W6100_RSOCK>
 80010f0:	4603      	mov	r3, r0
 80010f2:	061b      	lsls	r3, r3, #24
 80010f4:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR1, sck_nbr, REG) << 16);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2201      	movs	r2, #1
 80010fa:	4619      	mov	r1, r3
 80010fc:	f240 1021 	movw	r0, #289	; 0x121
 8001100:	f7ff fd63 	bl	8000bca <SPI_W6100_RSOCK>
 8001104:	4603      	mov	r3, r0
 8001106:	041b      	lsls	r3, r3, #16
 8001108:	461a      	mov	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR2, sck_nbr, REG) << 8);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2201      	movs	r2, #1
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 7091 	mov.w	r0, #290	; 0x122
 800111a:	f7ff fd56 	bl	8000bca <SPI_W6100_RSOCK>
 800111e:	4603      	mov	r3, r0
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
	dest_adr |= SPI_W6100_RSOCK(Sn_DIPR3, sck_nbr, REG);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	f240 1023 	movw	r0, #291	; 0x123
 8001134:	f7ff fd49 	bl	8000bca <SPI_W6100_RSOCK>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4313      	orrs	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]

	return dest_adr;	// Return destination address
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000004c 	.word	0x2000004c

08001150 <W6100_ReceiveData>:




uint8_t W6100_ReceiveData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab, uint8_t size) {
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b08b      	sub	sp, #44	; 0x2c
 8001154:	af00      	add	r7, sp, #0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	461a      	mov	r2, r3
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	4613      	mov	r3, r2
 8001162:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	uint32_t get_size, gSn_RX_MAX, get_start_address, Sn_RX_RD_temp;

	if ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) == 0x1c) {								// Check if socket close request pending
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	2201      	movs	r2, #1
 8001168:	4619      	mov	r1, r3
 800116a:	2030      	movs	r0, #48	; 0x30
 800116c:	f7ff fd2d 	bl	8000bca <SPI_W6100_RSOCK>
 8001170:	4603      	mov	r3, r0
 8001172:	2b1c      	cmp	r3, #28
 8001174:	d103      	bne.n	800117e <W6100_ReceiveData+0x2e>
		W6100_PassiveCloseSocket(sck_nbr);
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f9c1 	bl	8001500 <W6100_PassiveCloseSocket>
	}

	if ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0b00000100) == 0x04) {					// Check if data received
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2201      	movs	r2, #1
 8001182:	4619      	mov	r1, r3
 8001184:	2020      	movs	r0, #32
 8001186:	f7ff fd20 	bl	8000bca <SPI_W6100_RSOCK>
 800118a:	4603      	mov	r3, r0
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b04      	cmp	r3, #4
 8001192:	f040 80a1 	bne.w	80012d8 <W6100_ReceiveData+0x188>


			// Read data from the buffer
			get_size = (SPI_W6100_RSOCK(Sn_RX_RSR0, sck_nbr, REG) << 8);
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2201      	movs	r2, #1
 800119a:	4619      	mov	r1, r3
 800119c:	f44f 7009 	mov.w	r0, #548	; 0x224
 80011a0:	f7ff fd13 	bl	8000bca <SPI_W6100_RSOCK>
 80011a4:	4603      	mov	r3, r0
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	623b      	str	r3, [r7, #32]
			get_size |= SPI_W6100_RSOCK(Sn_RX_RSR1, sck_nbr, REG);
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	2201      	movs	r2, #1
 80011ae:	4619      	mov	r1, r3
 80011b0:	f240 2025 	movw	r0, #549	; 0x225
 80011b4:	f7ff fd09 	bl	8000bca <SPI_W6100_RSOCK>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	4313      	orrs	r3, r2
 80011c0:	623b      	str	r3, [r7, #32]
			gSn_RX_MAX = (SPI_W6100_RSOCK(Sn_RX_BSR, sck_nbr, REG) * 1024);
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	f44f 7008 	mov.w	r0, #544	; 0x220
 80011cc:	f7ff fcfd 	bl	8000bca <SPI_W6100_RSOCK>
 80011d0:	4603      	mov	r3, r0
 80011d2:	029b      	lsls	r3, r3, #10
 80011d4:	61fb      	str	r3, [r7, #28]
			get_start_address = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	2201      	movs	r2, #1
 80011da:	4619      	mov	r1, r3
 80011dc:	f44f 700a 	mov.w	r0, #552	; 0x228
 80011e0:	f7ff fcf3 	bl	8000bca <SPI_W6100_RSOCK>
 80011e4:	4603      	mov	r3, r0
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	617b      	str	r3, [r7, #20]
			get_start_address |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f240 2029 	movw	r0, #553	; 0x229
 80011f4:	f7ff fce9 	bl	8000bca <SPI_W6100_RSOCK>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	4313      	orrs	r3, r2
 8001200:	617b      	str	r3, [r7, #20]

			// Move data to the array
			memset(tab, '\0', size);
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	461a      	mov	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 fa5e 	bl	80016ca <memset>
			for (i=0; i<get_size; i++) {
 800120e:	2300      	movs	r3, #0
 8001210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001214:	e016      	b.n	8001244 <W6100_ReceiveData+0xf4>
				tab[i] = SPI_W6100_RSOCK((get_start_address+i), sck_nbr, RX_BUF);
 8001216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800121a:	b29a      	uxth	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	b29b      	uxth	r3, r3
 8001220:	4413      	add	r3, r2
 8001222:	b298      	uxth	r0, r3
 8001224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	18d4      	adds	r4, r2, r3
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2203      	movs	r2, #3
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fcca 	bl	8000bca <SPI_W6100_RSOCK>
 8001236:	4603      	mov	r3, r0
 8001238:	7023      	strb	r3, [r4, #0]
			for (i=0; i<get_size; i++) {
 800123a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800123e:	3301      	adds	r3, #1
 8001240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001248:	6a3a      	ldr	r2, [r7, #32]
 800124a:	429a      	cmp	r2, r3
 800124c:	d8e3      	bhi.n	8001216 <W6100_ReceiveData+0xc6>
			}

			memcpy(&get_start_address, &dest_adr, get_size);
 800124e:	f107 0108 	add.w	r1, r7, #8
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	6a3a      	ldr	r2, [r7, #32]
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fa2b 	bl	80016b4 <memcpy>

			Sn_RX_RD_temp = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	2201      	movs	r2, #1
 8001262:	4619      	mov	r1, r3
 8001264:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001268:	f7ff fcaf 	bl	8000bca <SPI_W6100_RSOCK>
 800126c:	4603      	mov	r3, r0
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2201      	movs	r2, #1
 8001276:	4619      	mov	r1, r3
 8001278:	f240 2029 	movw	r0, #553	; 0x229
 800127c:	f7ff fca5 	bl	8000bca <SPI_W6100_RSOCK>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp += get_size;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	4413      	add	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
			SPI_W6100_WSOCK(Sn_RX_RD0, (Sn_RX_RD_temp>>8), sck_nbr, REG);
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	b2d9      	uxtb	r1, r3
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	2301      	movs	r3, #1
 800129c:	f44f 700a 	mov.w	r0, #552	; 0x228
 80012a0:	f7ff fcce 	bl	8000c40 <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_RX_RD1, (Sn_RX_RD_temp), sck_nbr, REG);
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	b2d9      	uxtb	r1, r3
 80012a8:	7bfa      	ldrb	r2, [r7, #15]
 80012aa:	2301      	movs	r3, #1
 80012ac:	f240 2029 	movw	r0, #553	; 0x229
 80012b0:	f7ff fcc6 	bl	8000c40 <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_CR, 0x40, sck_nbr, REG);
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	2301      	movs	r3, #1
 80012b8:	2140      	movs	r1, #64	; 0x40
 80012ba:	2010      	movs	r0, #16
 80012bc:	f7ff fcc0 	bl	8000c40 <SPI_W6100_WSOCK>
			while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);
 80012c0:	bf00      	nop
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2201      	movs	r2, #1
 80012c6:	4619      	mov	r1, r3
 80012c8:	2010      	movs	r0, #16
 80012ca:	f7ff fc7e 	bl	8000bca <SPI_W6100_RSOCK>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f6      	bne.n	80012c2 <W6100_ReceiveData+0x172>

			return 1;	// Return 1 if data was received
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <W6100_ReceiveData+0x18a>
	}
	else 	return 0;	// Return 0 of no data was received
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	372c      	adds	r7, #44	; 0x2c
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd90      	pop	{r4, r7, pc}

080012e2 <W6100_TransmitData>:

void W6100_TransmitData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab, uint8_t size) {
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b08a      	sub	sp, #40	; 0x28
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	4613      	mov	r3, r2
 80012f4:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	uint8_t send_size = size;
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t gSn_TX_MAX, get_start_address, Sn_TX_WR_temp, Sn_TX_FSR_temp;

	gSn_TX_MAX = (SPI_W6100_RSOCK(Sn_TX_BSR, sck_nbr, REG) * 1024);						// Socket TX buffer size
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2201      	movs	r2, #1
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001306:	f7ff fc60 	bl	8000bca <SPI_W6100_RSOCK>
 800130a:	4603      	mov	r3, r0
 800130c:	029b      	lsls	r3, r3, #10
 800130e:	61fb      	str	r3, [r7, #28]

	if(send_size > gSn_TX_MAX) send_size = gSn_TX_MAX;
 8001310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	429a      	cmp	r2, r3
 8001318:	d219      	bcs.n	800134e <W6100_TransmitData+0x6c>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	while(send_size > Sn_TX_FSR_temp) {													// wait until Socket Tx buffer is free
 8001320:	e015      	b.n	800134e <W6100_TransmitData+0x6c>
		Sn_TX_FSR_temp = (SPI_W6100_RSOCK(Sn_TX_FSR0, sck_nbr, REG) << 8);
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	f44f 7001 	mov.w	r0, #516	; 0x204
 800132c:	f7ff fc4d 	bl	8000bca <SPI_W6100_RSOCK>
 8001330:	4603      	mov	r3, r0
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	623b      	str	r3, [r7, #32]
		Sn_TX_FSR_temp |= SPI_W6100_RSOCK(Sn_TX_FSR1, sck_nbr, REG);
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2201      	movs	r2, #1
 800133a:	4619      	mov	r1, r3
 800133c:	f240 2005 	movw	r0, #517	; 0x205
 8001340:	f7ff fc43 	bl	8000bca <SPI_W6100_RSOCK>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	4313      	orrs	r3, r2
 800134c:	623b      	str	r3, [r7, #32]
	while(send_size > Sn_TX_FSR_temp) {													// wait until Socket Tx buffer is free
 800134e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001352:	6a3a      	ldr	r2, [r7, #32]
 8001354:	429a      	cmp	r2, r3
 8001356:	d3e4      	bcc.n	8001322 <W6100_TransmitData+0x40>
	}

	get_start_address = (SPI_W6100_RSOCK(Sn_TX_WR0, sck_nbr, REG) << 8);
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2201      	movs	r2, #1
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8001362:	f7ff fc32 	bl	8000bca <SPI_W6100_RSOCK>
 8001366:	4603      	mov	r3, r0
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	617b      	str	r3, [r7, #20]
	get_start_address |= SPI_W6100_RSOCK(Sn_TX_WR1, sck_nbr, REG);
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2201      	movs	r2, #1
 8001370:	4619      	mov	r1, r3
 8001372:	f240 200d 	movw	r0, #525	; 0x20d
 8001376:	f7ff fc28 	bl	8000bca <SPI_W6100_RSOCK>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	4313      	orrs	r3, r2
 8001382:	617b      	str	r3, [r7, #20]


	Sn_TX_WR_temp = (SPI_W6100_RSOCK(Sn_TX_WR0, sck_nbr, REG) << 8);
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2201      	movs	r2, #1
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800138e:	f7ff fc1c 	bl	8000bca <SPI_W6100_RSOCK>
 8001392:	4603      	mov	r3, r0
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	61bb      	str	r3, [r7, #24]
	Sn_TX_WR_temp |= SPI_W6100_RSOCK(Sn_TX_WR1, sck_nbr, REG);
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	2201      	movs	r2, #1
 800139c:	4619      	mov	r1, r3
 800139e:	f240 200d 	movw	r0, #525	; 0x20d
 80013a2:	f7ff fc12 	bl	8000bca <SPI_W6100_RSOCK>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
	Sn_TX_WR_temp += size;
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4413      	add	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
	SPI_W6100_WSOCK(Sn_TX_WR0, (Sn_TX_WR_temp>>8), sck_nbr, REG);
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b2d9      	uxtb	r1, r3
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	2301      	movs	r3, #1
 80013c2:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80013c6:	f7ff fc3b 	bl	8000c40 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_TX_WR1, (Sn_TX_WR_temp), sck_nbr, REG);
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	b2d9      	uxtb	r1, r3
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	2301      	movs	r3, #1
 80013d2:	f240 200d 	movw	r0, #525	; 0x20d
 80013d6:	f7ff fc33 	bl	8000c40 <SPI_W6100_WSOCK>

	// Move data to the array
	for (i=0; i<size; i++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013e0:	e014      	b.n	800140c <W6100_TransmitData+0x12a>
		SPI_W6100_WSOCK((get_start_address+i), tab[i], sck_nbr, TX_BUF);
 80013e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	b298      	uxth	r0, r3
 80013f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	7819      	ldrb	r1, [r3, #0]
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	2302      	movs	r3, #2
 80013fe:	f7ff fc1f 	bl	8000c40 <SPI_W6100_WSOCK>
	for (i=0; i<size; i++) {
 8001402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001406:	3301      	adds	r3, #1
 8001408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800140c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001410:	7bbb      	ldrb	r3, [r7, #14]
 8001412:	429a      	cmp	r2, r3
 8001414:	d3e5      	bcc.n	80013e2 <W6100_TransmitData+0x100>
	}

	memcpy(&get_start_address, &dest_adr, send_size);
 8001416:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800141a:	f107 0108 	add.w	r1, r7, #8
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f946 	bl	80016b4 <memcpy>

	SPI_W6100_WSOCK(Sn_CR, 0x20, sck_nbr, REG);											// SEND command sent to TCP/TCP6 mode
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	2301      	movs	r3, #1
 800142c:	2120      	movs	r1, #32
 800142e:	2010      	movs	r0, #16
 8001430:	f7ff fc06 	bl	8000c40 <SPI_W6100_WSOCK>
	while(SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG) != 0x00);								// Wait for SEND command clear
 8001434:	bf00      	nop
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2201      	movs	r2, #1
 800143a:	4619      	mov	r1, r3
 800143c:	2010      	movs	r0, #16
 800143e:	f7ff fbc4 	bl	8000bca <SPI_W6100_RSOCK>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f6      	bne.n	8001436 <W6100_TransmitData+0x154>

	while(((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x10) == 0) && ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x08) == 0));
 8001448:	bf00      	nop
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	2201      	movs	r2, #1
 800144e:	4619      	mov	r1, r3
 8001450:	2020      	movs	r0, #32
 8001452:	f7ff fbba 	bl	8000bca <SPI_W6100_RSOCK>
 8001456:	4603      	mov	r3, r0
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10a      	bne.n	8001476 <W6100_TransmitData+0x194>
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2201      	movs	r2, #1
 8001464:	4619      	mov	r1, r3
 8001466:	2020      	movs	r0, #32
 8001468:	f7ff fbaf 	bl	8000bca <SPI_W6100_RSOCK>
 800146c:	4603      	mov	r3, r0
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0e9      	beq.n	800144a <W6100_TransmitData+0x168>

	if((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x10) == 0x10) SPI_W6100_WSOCK(Sn_IRCLR, 0x10, sck_nbr, REG);	// Clear SENDOK interrupt
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	2201      	movs	r2, #1
 800147a:	4619      	mov	r1, r3
 800147c:	2020      	movs	r0, #32
 800147e:	f7ff fba4 	bl	8000bca <SPI_W6100_RSOCK>
 8001482:	4603      	mov	r3, r0
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	2b10      	cmp	r3, #16
 800148a:	d105      	bne.n	8001498 <W6100_TransmitData+0x1b6>
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	2301      	movs	r3, #1
 8001490:	2110      	movs	r1, #16
 8001492:	2028      	movs	r0, #40	; 0x28
 8001494:	f7ff fbd4 	bl	8000c40 <SPI_W6100_WSOCK>

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <registerDataReceivedCallback>:

void registerDataReceivedCallback(void (*callback)(void)) {
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	dataReceivedCallback = callback;
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <registerDataReceivedCallback+0x1c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000050 	.word	0x20000050

080014c0 <registerSocketOpenCallback>:


void registerSocketOpenCallback(void (*callback)(uint8_t sck_nbr)) {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	socketOpenCallback = callback;
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <registerSocketOpenCallback+0x1c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2000004c 	.word	0x2000004c

080014e0 <registerSocketCloseCallback>:

void registerSocketCloseCallback(void (*callback)(uint8_t sck_nbr)) {
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	socketCloseCallback = callback;
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <registerSocketCloseCallback+0x1c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000048 	.word	0x20000048

08001500 <W6100_PassiveCloseSocket>:


void W6100_PassiveCloseSocket(uint8_t sck_nbr) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	SPI_W6100_WSOCK(Sn_CR, 0x08, sck_nbr, REG);						// Send FIN packet (DISCON command)
 800150a:	79fa      	ldrb	r2, [r7, #7]
 800150c:	2301      	movs	r3, #1
 800150e:	2108      	movs	r1, #8
 8001510:	2010      	movs	r0, #16
 8001512:	f7ff fb95 	bl	8000c40 <SPI_W6100_WSOCK>
	while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);			// Wait for DISCON command clear
 8001516:	bf00      	nop
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	2010      	movs	r0, #16
 8001520:	f7ff fb53 	bl	8000bca <SPI_W6100_RSOCK>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f6      	bne.n	8001518 <W6100_PassiveCloseSocket+0x18>
	// Wait for ACK packet
	while((((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b10) == 0) && (((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b1000) == 0));
 800152a:	bf00      	nop
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2201      	movs	r2, #1
 8001530:	4619      	mov	r1, r3
 8001532:	2020      	movs	r0, #32
 8001534:	f7ff fb49 	bl	8000bca <SPI_W6100_RSOCK>
 8001538:	4603      	mov	r3, r0
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10a      	bne.n	8001558 <W6100_PassiveCloseSocket+0x58>
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2201      	movs	r2, #1
 8001546:	4619      	mov	r1, r3
 8001548:	2020      	movs	r0, #32
 800154a:	f7ff fb3e 	bl	8000bca <SPI_W6100_RSOCK>
 800154e:	4603      	mov	r3, r0
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0e9      	beq.n	800152c <W6100_PassiveCloseSocket+0x2c>

	if ((((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b10) == 0b10)) {
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	2020      	movs	r0, #32
 8001560:	f7ff fb33 	bl	8000bca <SPI_W6100_RSOCK>
 8001564:	4603      	mov	r3, r0
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b02      	cmp	r3, #2
 800156c:	d10f      	bne.n	800158e <W6100_PassiveCloseSocket+0x8e>
		SPI_W6100_WSOCK(Sn_IRCLR, 0x02, sck_nbr, REG);				// Clear DISCON interrupt
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	2301      	movs	r3, #1
 8001572:	2102      	movs	r1, #2
 8001574:	2028      	movs	r0, #40	; 0x28
 8001576:	f7ff fb63 	bl	8000c40 <SPI_W6100_WSOCK>
		while((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x00);		// Wait until socket is CLOSED
 800157a:	bf00      	nop
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	2201      	movs	r2, #1
 8001580:	4619      	mov	r1, r3
 8001582:	2030      	movs	r0, #48	; 0x30
 8001584:	f7ff fb21 	bl	8000bca <SPI_W6100_RSOCK>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f6      	bne.n	800157c <W6100_PassiveCloseSocket+0x7c>
	}

	if(socketCloseCallback) socketCloseCallback(sck_nbr);			// Response for a socket close
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <W6100_PassiveCloseSocket+0xa8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <W6100_PassiveCloseSocket+0xa0>
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <W6100_PassiveCloseSocket+0xa8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	79fa      	ldrb	r2, [r7, #7]
 800159c:	4610      	mov	r0, r2
 800159e:	4798      	blx	r3
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000048 	.word	0x20000048

080015ac <EXTI9_5_IRQHandler>:


// W6100 external interrupt handler (line PC5)
__attribute__((interrupt)) void EXTI9_5_IRQHandler(void) {
 80015ac:	4668      	mov	r0, sp
 80015ae:	f020 0107 	bic.w	r1, r0, #7
 80015b2:	468d      	mov	sp, r1
 80015b4:	b589      	push	{r0, r3, r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5) {
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <EXTI9_5_IRQHandler+0x64>)
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	f003 0320 	and.w	r3, r3, #32
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d01e      	beq.n	8001602 <EXTI9_5_IRQHandler+0x56>
		EXTI->PR = EXTI_PR_PR5;		// Clear ISR flag
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <EXTI9_5_IRQHandler+0x64>)
 80015c6:	2220      	movs	r2, #32
 80015c8:	615a      	str	r2, [r3, #20]

		// W6100: Interrupt fired
		// Check if RECEIVE ISR was fired
		if(SPI_W6100_RCR(SIR) && 0x01){
 80015ca:	f242 1001 	movw	r0, #8449	; 0x2101
 80015ce:	f7ff fab3 	bl	8000b38 <SPI_W6100_RCR>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d014      	beq.n	8001602 <EXTI9_5_IRQHandler+0x56>
			// Check if SOCKET 1 data was received
			if(SPI_W6100_RSOCK(Sn_IR, 0, REG) && 0x04) {
 80015d8:	2201      	movs	r2, #1
 80015da:	2100      	movs	r1, #0
 80015dc:	2020      	movs	r0, #32
 80015de:	f7ff faf4 	bl	8000bca <SPI_W6100_RSOCK>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00c      	beq.n	8001602 <EXTI9_5_IRQHandler+0x56>
				if(dataReceivedCallback) dataReceivedCallback();	// Callback function
 80015e8:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <EXTI9_5_IRQHandler+0x68>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <EXTI9_5_IRQHandler+0x4a>
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <EXTI9_5_IRQHandler+0x68>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4798      	blx	r3
				SPI_W6100_WSOCK(Sn_IRCLR, 0x04, 0, REG);			// Clear data interrupt after reaction
 80015f6:	2301      	movs	r3, #1
 80015f8:	2200      	movs	r2, #0
 80015fa:	2104      	movs	r1, #4
 80015fc:	2028      	movs	r0, #40	; 0x28
 80015fe:	f7ff fb1f 	bl	8000c40 <SPI_W6100_WSOCK>
			}

		}
	}
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 800160a:	4685      	mov	sp, r0
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40013c00 	.word	0x40013c00
 8001614:	20000050 	.word	0x20000050

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800161c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800161e:	e003      	b.n	8001628 <LoopCopyDataInit>

08001620 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001622:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001624:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001626:	3104      	adds	r1, #4

08001628 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800162c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800162e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001630:	d3f6      	bcc.n	8001620 <CopyDataInit>
  ldr  r2, =_sbss
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001634:	e002      	b.n	800163c <LoopFillZerobss>

08001636 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001636:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001638:	f842 3b04 	str.w	r3, [r2], #4

0800163c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800163c:	4b09      	ldr	r3, [pc, #36]	; (8001664 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800163e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001640:	d3f9      	bcc.n	8001636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001642:	f7ff fa21 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001646:	f000 f811 	bl	800166c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff f94b 	bl	80008e4 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001650:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001654:	08001718 	.word	0x08001718
  ldr  r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800165c:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8001660:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8001664:	200000b4 	.word	0x200000b4

08001668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC_IRQHandler>
	...

0800166c <__libc_init_array>:
 800166c:	b570      	push	{r4, r5, r6, lr}
 800166e:	4e0d      	ldr	r6, [pc, #52]	; (80016a4 <__libc_init_array+0x38>)
 8001670:	4c0d      	ldr	r4, [pc, #52]	; (80016a8 <__libc_init_array+0x3c>)
 8001672:	1ba4      	subs	r4, r4, r6
 8001674:	10a4      	asrs	r4, r4, #2
 8001676:	2500      	movs	r5, #0
 8001678:	42a5      	cmp	r5, r4
 800167a:	d109      	bne.n	8001690 <__libc_init_array+0x24>
 800167c:	4e0b      	ldr	r6, [pc, #44]	; (80016ac <__libc_init_array+0x40>)
 800167e:	4c0c      	ldr	r4, [pc, #48]	; (80016b0 <__libc_init_array+0x44>)
 8001680:	f000 f82c 	bl	80016dc <_init>
 8001684:	1ba4      	subs	r4, r4, r6
 8001686:	10a4      	asrs	r4, r4, #2
 8001688:	2500      	movs	r5, #0
 800168a:	42a5      	cmp	r5, r4
 800168c:	d105      	bne.n	800169a <__libc_init_array+0x2e>
 800168e:	bd70      	pop	{r4, r5, r6, pc}
 8001690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001694:	4798      	blx	r3
 8001696:	3501      	adds	r5, #1
 8001698:	e7ee      	b.n	8001678 <__libc_init_array+0xc>
 800169a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800169e:	4798      	blx	r3
 80016a0:	3501      	adds	r5, #1
 80016a2:	e7f2      	b.n	800168a <__libc_init_array+0x1e>
 80016a4:	08001710 	.word	0x08001710
 80016a8:	08001710 	.word	0x08001710
 80016ac:	08001710 	.word	0x08001710
 80016b0:	08001714 	.word	0x08001714

080016b4 <memcpy>:
 80016b4:	b510      	push	{r4, lr}
 80016b6:	1e43      	subs	r3, r0, #1
 80016b8:	440a      	add	r2, r1
 80016ba:	4291      	cmp	r1, r2
 80016bc:	d100      	bne.n	80016c0 <memcpy+0xc>
 80016be:	bd10      	pop	{r4, pc}
 80016c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80016c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80016c8:	e7f7      	b.n	80016ba <memcpy+0x6>

080016ca <memset>:
 80016ca:	4402      	add	r2, r0
 80016cc:	4603      	mov	r3, r0
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d100      	bne.n	80016d4 <memset+0xa>
 80016d2:	4770      	bx	lr
 80016d4:	f803 1b01 	strb.w	r1, [r3], #1
 80016d8:	e7f9      	b.n	80016ce <memset+0x4>
	...

080016dc <_init>:
 80016dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016de:	bf00      	nop
 80016e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e2:	bc08      	pop	{r3}
 80016e4:	469e      	mov	lr, r3
 80016e6:	4770      	bx	lr

080016e8 <_fini>:
 80016e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ea:	bf00      	nop
 80016ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ee:	bc08      	pop	{r3}
 80016f0:	469e      	mov	lr, r3
 80016f2:	4770      	bx	lr
