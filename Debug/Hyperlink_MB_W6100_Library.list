
Hyperlink_MB_W6100_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001324  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080014ac  080014ac  000114ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014e4  080014e4  000114ec  2**0
                  CONTENTS
  4 .ARM          00000000  080014e4  080014e4  000114ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014e4  080014ec  000114ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014e4  080014e4  000114e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014e8  080014e8  000114e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000114ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  080014ec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080014ec  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000114ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000041c0  00000000  00000000  0001151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a29  00000000  00000000  000156dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000168  00000000  00000000  00016108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000110  00000000  00000000  00016270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c68  00000000  00000000  00016380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002255  00000000  00000000  0002efe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000839ab  00000000  00000000  0003123d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b4be8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000464  00000000  00000000  000b4c64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001494 	.word	0x08001494

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08001494 	.word	0x08001494

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <CanInit>:
 */

#include "can.h"


void CanInit(void) {
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	// *** Pin configuration and remap assignment *** //
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;		// Enable CAN 1 CLK
 8000208:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <CanInit+0x7c>)
 800020a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800020c:	4a1c      	ldr	r2, [pc, #112]	; (8000280 <CanInit+0x7c>)
 800020e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000212:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOB->MODER |= GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1;	// PB8 and PB9 Alternative Function
 8000214:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <CanInit+0x80>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a1a      	ldr	r2, [pc, #104]	; (8000284 <CanInit+0x80>)
 800021a:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800021e:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_3 | GPIO_AFRH_AFRH0_0 | GPIO_AFRH_AFRH1_0 | GPIO_AFRH_AFRH1_3;		// Alternative function mapped to CAN1_Tx and CAN1_Rx
 8000220:	4b18      	ldr	r3, [pc, #96]	; (8000284 <CanInit+0x80>)
 8000222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000224:	4a17      	ldr	r2, [pc, #92]	; (8000284 <CanInit+0x80>)
 8000226:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 800022a:	6253      	str	r3, [r2, #36]	; 0x24

	CAN1->MCR |= CAN_MCR_INRQ;			// Initialisation mode on
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <CanInit+0x84>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a15      	ldr	r2, [pc, #84]	; (8000288 <CanInit+0x84>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	6013      	str	r3, [r2, #0]

	// *** CAN Test Mode *** //
//	CAN1->BTR |= CAN_BTR_LBKM;			// Loopback mode enabled (For Debug purposes)
	// ********************* //

	NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000238:	2013      	movs	r0, #19
 800023a:	f7ff ffc5 	bl	80001c8 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800023e:	2014      	movs	r0, #20
 8000240:	f7ff ffc2 	bl	80001c8 <__NVIC_EnableIRQ>

	CAN1->IER |= CAN_IER_FMPIE0;		// Interrupt generated when state of FMP[1:0] bits are not 00b
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <CanInit+0x84>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4a0f      	ldr	r2, [pc, #60]	; (8000288 <CanInit+0x84>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6153      	str	r3, [r2, #20]

	CAN1->BTR = 0x00080004;				// CAN Bitrate: 500k
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <CanInit+0x84>)
 8000252:	4a0e      	ldr	r2, [pc, #56]	; (800028c <CanInit+0x88>)
 8000254:	61da      	str	r2, [r3, #28]


	CAN1->MCR &= ~CAN_MCR_INRQ;			// Initialisation mode off
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <CanInit+0x84>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <CanInit+0x84>)
 800025c:	f023 0301 	bic.w	r3, r3, #1
 8000260:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MCR_INRQ);
 8000262:	bf00      	nop
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <CanInit+0x84>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d1f9      	bne.n	8000264 <CanInit+0x60>


	CAN1->MCR &= ~CAN_MCR_SLEEP;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <CanInit+0x84>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a04      	ldr	r2, [pc, #16]	; (8000288 <CanInit+0x84>)
 8000276:	f023 0302 	bic.w	r3, r3, #2
 800027a:	6013      	str	r3, [r2, #0]


}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40023800 	.word	0x40023800
 8000284:	40020400 	.word	0x40020400
 8000288:	40006400 	.word	0x40006400
 800028c:	00080004 	.word	0x00080004

08000290 <Can_Tx_Msg>:


void Can_Tx_Msg(CAN_MESSAGE * msg) {
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

	CAN1->sTxMailBox[0].TIR = 0;		// Empty TIR register
 8000298:	4b3c      	ldr	r3, [pc, #240]	; (800038c <Can_Tx_Msg+0xfc>)
 800029a:	2200      	movs	r2, #0
 800029c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	if(msg->format == STANDARD_FORMAT)	{
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	691b      	ldr	r3, [r3, #16]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d10a      	bne.n	80002be <Can_Tx_Msg+0x2e>
		CAN1->sTxMailBox[0].TIR |= (u_int) (msg->id << 21) | CAN_ID_STD;
 80002a8:	4b38      	ldr	r3, [pc, #224]	; (800038c <Can_Tx_Msg+0xfc>)
 80002aa:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	055b      	lsls	r3, r3, #21
 80002b4:	4935      	ldr	r1, [pc, #212]	; (800038c <Can_Tx_Msg+0xfc>)
 80002b6:	4313      	orrs	r3, r2
 80002b8:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
 80002bc:	e009      	b.n	80002d2 <Can_Tx_Msg+0x42>
	} else {
		CAN1->sTxMailBox[0].TIR |= (u_int) (msg->id << 3) | CAN_ID_EXT;
 80002be:	4b33      	ldr	r3, [pc, #204]	; (800038c <Can_Tx_Msg+0xfc>)
 80002c0:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	00db      	lsls	r3, r3, #3
 80002ca:	4930      	ldr	r1, [pc, #192]	; (800038c <Can_Tx_Msg+0xfc>)
 80002cc:	4313      	orrs	r3, r2
 80002ce:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
	}

	if (msg->type == DATA_FRAME)  {                 // DATA FRAME
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d106      	bne.n	80002e8 <Can_Tx_Msg+0x58>
	    CAN1->sTxMailBox[0].TIR |= CAN_RTR_DATA;
 80002da:	4b2c      	ldr	r3, [pc, #176]	; (800038c <Can_Tx_Msg+0xfc>)
 80002dc:	4a2b      	ldr	r2, [pc, #172]	; (800038c <Can_Tx_Msg+0xfc>)
 80002de:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80002e2:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 80002e6:	e005      	b.n	80002f4 <Can_Tx_Msg+0x64>
	} else {                                        // REMOTE FRAME
	    CAN1->sTxMailBox[0].TIR |= CAN_RTR_REMOTE;
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <Can_Tx_Msg+0xfc>)
 80002ea:	4a28      	ldr	r2, [pc, #160]	; (800038c <Can_Tx_Msg+0xfc>)
 80002ec:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80002f0:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	}

	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	79db      	ldrb	r3, [r3, #7]
 80002f8:	061a      	lsls	r2, r3, #24
	                          ((u_int)msg->data[2] << 16) |
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	799b      	ldrb	r3, [r3, #6]
 80002fe:	041b      	lsls	r3, r3, #16
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 8000300:	431a      	orrs	r2, r3
	                          ((u_int)msg->data[1] <<  8) |
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	795b      	ldrb	r3, [r3, #5]
 8000306:	021b      	lsls	r3, r3, #8
	                          ((u_int)msg->data[2] << 16) |
 8000308:	4313      	orrs	r3, r2
	                          ((u_int)msg->data[0]));
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	7912      	ldrb	r2, [r2, #4]
 800030e:	4611      	mov	r1, r2
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 8000310:	4a1e      	ldr	r2, [pc, #120]	; (800038c <Can_Tx_Msg+0xfc>)
	                          ((u_int)msg->data[1] <<  8) |
 8000312:	430b      	orrs	r3, r1
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 8000314:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	7adb      	ldrb	r3, [r3, #11]
 800031c:	061a      	lsls	r2, r3, #24
	                          ((u_int)msg->data[6] << 16) |
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	7a9b      	ldrb	r3, [r3, #10]
 8000322:	041b      	lsls	r3, r3, #16
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 8000324:	431a      	orrs	r2, r3
	                          ((u_int)msg->data[5] <<  8) |
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	7a5b      	ldrb	r3, [r3, #9]
 800032a:	021b      	lsls	r3, r3, #8
	                          ((u_int)msg->data[6] << 16) |
 800032c:	4313      	orrs	r3, r2
	                          ((u_int)msg->data[4]));
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	7a12      	ldrb	r2, [r2, #8]
 8000332:	4611      	mov	r1, r2
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 8000334:	4a15      	ldr	r2, [pc, #84]	; (800038c <Can_Tx_Msg+0xfc>)
	                          ((u_int)msg->data[5] <<  8) |
 8000336:	430b      	orrs	r3, r1
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 8000338:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c

	CAN1->sTxMailBox[0].TDTR &= ~CAN_TDT1R_DLC;
 800033c:	4b13      	ldr	r3, [pc, #76]	; (800038c <Can_Tx_Msg+0xfc>)
 800033e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8000342:	4a12      	ldr	r2, [pc, #72]	; (800038c <Can_Tx_Msg+0xfc>)
 8000344:	f023 030f 	bic.w	r3, r3, #15
 8000348:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	CAN1->sTxMailBox[0].TDTR |=  (msg->len & CAN_TDT0R_DLC);
 800034c:	4b0f      	ldr	r3, [pc, #60]	; (800038c <Can_Tx_Msg+0xfc>)
 800034e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	68db      	ldr	r3, [r3, #12]
 8000356:	f003 030f 	and.w	r3, r3, #15
 800035a:	490c      	ldr	r1, [pc, #48]	; (800038c <Can_Tx_Msg+0xfc>)
 800035c:	4313      	orrs	r3, r2
 800035e:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184

	CAN1->IER |= CAN_IER_TMEIE;                      // enable  TME interrupt
 8000362:	4b0a      	ldr	r3, [pc, #40]	; (800038c <Can_Tx_Msg+0xfc>)
 8000364:	695b      	ldr	r3, [r3, #20]
 8000366:	4a09      	ldr	r2, [pc, #36]	; (800038c <Can_Tx_Msg+0xfc>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6153      	str	r3, [r2, #20]
	CAN1->sTxMailBox[0].TIR |=  CAN_TI0R_TXRQ;       // transmit message
 800036e:	4b07      	ldr	r3, [pc, #28]	; (800038c <Can_Tx_Msg+0xfc>)
 8000370:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000374:	4a05      	ldr	r2, [pc, #20]	; (800038c <Can_Tx_Msg+0xfc>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40006400 	.word	0x40006400

08000390 <Can_Rx_Msg>:


void Can_Rx_Msg(CAN_MESSAGE * msg) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

	if ((CAN1->sFIFOMailBox[0].RIR & CAN_ID_EXT) == 0) { // Standard ID
 8000398:	4b2e      	ldr	r3, [pc, #184]	; (8000454 <Can_Rx_Msg+0xc4>)
 800039a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->format = STANDARD_FORMAT;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
	    msg->id     = (uint32_t)0x000007FF & (CAN1->sFIFOMailBox[0].RIR >> 21);
 80003a4:	4b2b      	ldr	r3, [pc, #172]	; (8000454 <Can_Rx_Msg+0xc4>)
 80003a6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80003aa:	0d5b      	lsrs	r3, r3, #21
 80003ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	601a      	str	r2, [r3, #0]
	  }  else  {                                          // Extended ID
	    msg->format = EXTENDED_FORMAT;
	    msg->id     = (uint32_t)0x0003FFFF & (CAN1->sFIFOMailBox[0].RIR >> 3);
	  }
	                                                  // Read type information
	  if ((CAN1->sFIFOMailBox[0].RIR & CAN_RTR_REMOTE) == 0) {
 80003b4:	4b27      	ldr	r3, [pc, #156]	; (8000454 <Can_Rx_Msg+0xc4>)
 80003b6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->type =   DATA_FRAME;                     // DATA   FRAME
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	615a      	str	r2, [r3, #20]
	  }  else  {
	    msg->type = REMOTE_FRAME;                     // REMOTE FRAME
	  }

	  msg->len = (char)0x0000000F & CAN1->sFIFOMailBox[0].RDTR;
 80003c0:	4b24      	ldr	r3, [pc, #144]	; (8000454 <Can_Rx_Msg+0xc4>)
 80003c2:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80003c6:	f003 020f 	and.w	r2, r3, #15
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	60da      	str	r2, [r3, #12]
	                                                    // Read data
	  msg->data[0] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR);
 80003ce:	4b21      	ldr	r3, [pc, #132]	; (8000454 <Can_Rx_Msg+0xc4>)
 80003d0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	711a      	strb	r2, [r3, #4]
	  msg->data[1] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 8);
 80003da:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <Can_Rx_Msg+0xc4>)
 80003dc:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	715a      	strb	r2, [r3, #5]
	  msg->data[2] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 16);
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <Can_Rx_Msg+0xc4>)
 80003ea:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003ee:	0c1b      	lsrs	r3, r3, #16
 80003f0:	b2da      	uxtb	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	719a      	strb	r2, [r3, #6]
	  msg->data[3] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 24);
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <Can_Rx_Msg+0xc4>)
 80003f8:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003fc:	0e1b      	lsrs	r3, r3, #24
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	71da      	strb	r2, [r3, #7]

	  msg->data[4] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR);
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <Can_Rx_Msg+0xc4>)
 8000406:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800040a:	b2da      	uxtb	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	721a      	strb	r2, [r3, #8]
	  msg->data[5] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 8);
 8000410:	4b10      	ldr	r3, [pc, #64]	; (8000454 <Can_Rx_Msg+0xc4>)
 8000412:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000416:	0a1b      	lsrs	r3, r3, #8
 8000418:	b2da      	uxtb	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	725a      	strb	r2, [r3, #9]
	  msg->data[6] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 16);
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <Can_Rx_Msg+0xc4>)
 8000420:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000424:	0c1b      	lsrs	r3, r3, #16
 8000426:	b2da      	uxtb	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	729a      	strb	r2, [r3, #10]
	  msg->data[7] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 24);
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <Can_Rx_Msg+0xc4>)
 800042e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000432:	0e1b      	lsrs	r3, r3, #24
 8000434:	b2da      	uxtb	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	72da      	strb	r2, [r3, #11]

	  CAN1->RF0R |= CAN_RF0R_RFOM0;                    // Release FIFO 0 output mailbox
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <Can_Rx_Msg+0xc4>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	4a05      	ldr	r2, [pc, #20]	; (8000454 <Can_Rx_Msg+0xc4>)
 8000440:	f043 0320 	orr.w	r3, r3, #32
 8000444:	60d3      	str	r3, [r2, #12]

}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40006400 	.word	0x40006400

08000458 <Can_Set_Filter>:


void Can_Set_Filter(uint id, char format) {
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]

	static unsigned short CAN_filterIdx = 0;
	uint CAN_msgId = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]

	  if (CAN_filterIdx > 13) {                       // check if Filter Memory is full
 8000468:	4b3f      	ldr	r3, [pc, #252]	; (8000568 <Can_Set_Filter+0x110>)
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2b0d      	cmp	r3, #13
 800046e:	d874      	bhi.n	800055a <Can_Set_Filter+0x102>
	    return;
	  }
	                                                  // Setup identifier information
	  if (format == STANDARD_FORMAT)  {               // Standard ID
 8000470:	78fb      	ldrb	r3, [r7, #3]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d105      	bne.n	8000482 <Can_Set_Filter+0x2a>
	      CAN_msgId  |= (unsigned int)(id << 21) | CAN_ID_STD;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	055b      	lsls	r3, r3, #21
 800047a:	68fa      	ldr	r2, [r7, #12]
 800047c:	4313      	orrs	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	e004      	b.n	800048c <Can_Set_Filter+0x34>
	  }  else  {                                      // Extended ID
	      CAN_msgId  |= (unsigned int)(id <<  3) | CAN_ID_EXT;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	00db      	lsls	r3, r3, #3
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	4313      	orrs	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
	  }

	  CAN1->FMR  |=  CAN_FMR_FINIT;                    // set Initialisation mode for filter banks
 800048c:	4b37      	ldr	r3, [pc, #220]	; (800056c <Can_Set_Filter+0x114>)
 800048e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000492:	4a36      	ldr	r2, [pc, #216]	; (800056c <Can_Set_Filter+0x114>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	  CAN1->FA1R &=  ~(unsigned int)(1 << CAN_filterIdx); // deactivate filter
 800049c:	4b33      	ldr	r3, [pc, #204]	; (800056c <Can_Set_Filter+0x114>)
 800049e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80004a2:	4b31      	ldr	r3, [pc, #196]	; (8000568 <Can_Set_Filter+0x110>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	4619      	mov	r1, r3
 80004a8:	2301      	movs	r3, #1
 80004aa:	408b      	lsls	r3, r1
 80004ac:	43db      	mvns	r3, r3
 80004ae:	492f      	ldr	r1, [pc, #188]	; (800056c <Can_Set_Filter+0x114>)
 80004b0:	4013      	ands	r3, r2
 80004b2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	                                                  // initialize filter
	  CAN1->FS1R |= (unsigned int)(1 << CAN_filterIdx);// set 32-bit scale configuration
 80004b6:	4b2d      	ldr	r3, [pc, #180]	; (800056c <Can_Set_Filter+0x114>)
 80004b8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80004bc:	4a2a      	ldr	r2, [pc, #168]	; (8000568 <Can_Set_Filter+0x110>)
 80004be:	8812      	ldrh	r2, [r2, #0]
 80004c0:	4611      	mov	r1, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	408a      	lsls	r2, r1
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a28      	ldr	r2, [pc, #160]	; (800056c <Can_Set_Filter+0x114>)
 80004ca:	430b      	orrs	r3, r1
 80004cc:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	  CAN1->FM1R |= (unsigned int)(1 << CAN_filterIdx);// set 2 32-bit identifier list mode
 80004d0:	4b26      	ldr	r3, [pc, #152]	; (800056c <Can_Set_Filter+0x114>)
 80004d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004d6:	4a24      	ldr	r2, [pc, #144]	; (8000568 <Can_Set_Filter+0x110>)
 80004d8:	8812      	ldrh	r2, [r2, #0]
 80004da:	4611      	mov	r1, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	408a      	lsls	r2, r1
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a22      	ldr	r2, [pc, #136]	; (800056c <Can_Set_Filter+0x114>)
 80004e4:	430b      	orrs	r3, r1
 80004e6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	  CAN1->sFilterRegister[CAN_filterIdx].FR1 = CAN_msgId; //  32-bit identifier
 80004ea:	4920      	ldr	r1, [pc, #128]	; (800056c <Can_Set_Filter+0x114>)
 80004ec:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <Can_Set_Filter+0x110>)
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	3348      	adds	r3, #72	; 0x48
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	  CAN1->sFilterRegister[CAN_filterIdx].FR2 = CAN_msgId; //  32-bit identifier
 80004f8:	4a1c      	ldr	r2, [pc, #112]	; (800056c <Can_Set_Filter+0x114>)
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <Can_Set_Filter+0x110>)
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	3348      	adds	r3, #72	; 0x48
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	4413      	add	r3, r2
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	605a      	str	r2, [r3, #4]

	  CAN1->FFA1R &= ~(unsigned int)(1 << CAN_filterIdx);  // assign filter to FIFO 0
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <Can_Set_Filter+0x114>)
 800050a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <Can_Set_Filter+0x110>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	4619      	mov	r1, r3
 8000514:	2301      	movs	r3, #1
 8000516:	408b      	lsls	r3, r1
 8000518:	43db      	mvns	r3, r3
 800051a:	4914      	ldr	r1, [pc, #80]	; (800056c <Can_Set_Filter+0x114>)
 800051c:	4013      	ands	r3, r2
 800051e:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
	  CAN1->FA1R  |=  (unsigned int)(1 << CAN_filterIdx);  // activate filter
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <Can_Set_Filter+0x114>)
 8000524:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000528:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <Can_Set_Filter+0x110>)
 800052a:	8812      	ldrh	r2, [r2, #0]
 800052c:	4611      	mov	r1, r2
 800052e:	2201      	movs	r2, #1
 8000530:	408a      	lsls	r2, r1
 8000532:	4611      	mov	r1, r2
 8000534:	4a0d      	ldr	r2, [pc, #52]	; (800056c <Can_Set_Filter+0x114>)
 8000536:	430b      	orrs	r3, r1
 8000538:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	  CAN1->FMR &= ~CAN_FMR_FINIT;                     // reset Initialisation mode for filter banks
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <Can_Set_Filter+0x114>)
 800053e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <Can_Set_Filter+0x114>)
 8000544:	f023 0301 	bic.w	r3, r3, #1
 8000548:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	  CAN_filterIdx += 1;                             // increase filter index
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <Can_Set_Filter+0x110>)
 800054e:	881b      	ldrh	r3, [r3, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	b29a      	uxth	r2, r3
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <Can_Set_Filter+0x110>)
 8000556:	801a      	strh	r2, [r3, #0]
 8000558:	e000      	b.n	800055c <Can_Set_Filter+0x104>
	    return;
 800055a:	bf00      	nop

}
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	2000001c 	.word	0x2000001c
 800056c:	40006400 	.word	0x40006400

08000570 <CAN1_TX_IRQHandler>:


__attribute__((interrupt)) void CAN1_TX_IRQHandler (void)  {
 8000570:	4668      	mov	r0, sp
 8000572:	f020 0107 	bic.w	r1, r0, #7
 8000576:	468d      	mov	sp, r1
 8000578:	b481      	push	{r0, r7}
 800057a:	af00      	add	r7, sp, #0
	if (CAN1->TSR & CAN_TSR_RQCP0) {                 // request completed mbx 0
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <CAN1_TX_IRQHandler+0x3c>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <CAN1_TX_IRQHandler+0x30>
	    CAN1->TSR |= CAN_TSR_RQCP0;                  // reset request complete mbx 0
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <CAN1_TX_IRQHandler+0x3c>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <CAN1_TX_IRQHandler+0x3c>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6093      	str	r3, [r2, #8]
	    CAN1->IER &= ~CAN_IER_TMEIE;                 // disable  TME interrupt
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <CAN1_TX_IRQHandler+0x3c>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <CAN1_TX_IRQHandler+0x3c>)
 800059a:	f023 0301 	bic.w	r3, r3, #1
 800059e:	6153      	str	r3, [r2, #20]
	}

// Tx Interrupt Action


}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc81      	pop	{r0, r7}
 80005a6:	4685      	mov	sp, r0
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40006400 	.word	0x40006400

080005b0 <CAN1_RX0_IRQHandler>:



__attribute__((interrupt)) void CAN1_RX0_IRQHandler (void) {
 80005b0:	4668      	mov	r0, sp
 80005b2:	f020 0107 	bic.w	r1, r0, #7
 80005b6:	468d      	mov	sp, r1
 80005b8:	b589      	push	{r0, r3, r7, lr}
 80005ba:	af00      	add	r7, sp, #0

	if (CAN1->RF0R & CAN_RF0R_FMP0) {			      // message pending ?
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <CAN1_RX0_IRQHandler+0x2c>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	f003 0303 	and.w	r3, r3, #3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <CAN1_RX0_IRQHandler+0x1e>
		Can_Rx_Msg(&can_rx_message);                  // read the message
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <CAN1_RX0_IRQHandler+0x30>)
 80005ca:	f7ff fee1 	bl	8000390 <Can_Rx_Msg>
	}

}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 80005d6:	4685      	mov	sp, r0
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40006400 	.word	0x40006400
 80005e0:	20000020 	.word	0x20000020

080005e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	6039      	str	r1, [r7, #0]
 80005ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	db0a      	blt.n	800060e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	490c      	ldr	r1, [pc, #48]	; (8000630 <__NVIC_SetPriority+0x4c>)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	0112      	lsls	r2, r2, #4
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	440b      	add	r3, r1
 8000608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800060c:	e00a      	b.n	8000624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4908      	ldr	r1, [pc, #32]	; (8000634 <__NVIC_SetPriority+0x50>)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	3b04      	subs	r3, #4
 800061c:	0112      	lsls	r2, r2, #4
 800061e:	b2d2      	uxtb	r2, r2
 8000620:	440b      	add	r3, r1
 8000622:	761a      	strb	r2, [r3, #24]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000e100 	.word	0xe000e100
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3b01      	subs	r3, #1
 8000644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000648:	d301      	bcc.n	800064e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800064a:	2301      	movs	r3, #1
 800064c:	e00f      	b.n	800066e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <SysTick_Config+0x40>)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3b01      	subs	r3, #1
 8000654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000656:	210f      	movs	r1, #15
 8000658:	f04f 30ff 	mov.w	r0, #4294967295
 800065c:	f7ff ffc2 	bl	80005e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <SysTick_Config+0x40>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000666:	4b04      	ldr	r3, [pc, #16]	; (8000678 <SysTick_Config+0x40>)
 8000668:	2207      	movs	r2, #7
 800066a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	e000e010 	.word	0xe000e010

0800067c <SystemRegisterCFG>:
 *  https://mmttechnologies.com/
 */
#include "config.h"


void SystemRegisterCFG(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

	// *** Configure System Clock (36MHz for each system BUS) ***
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;		// HSE as an input to the PLL loop
 8000680:	4b4a      	ldr	r3, [pc, #296]	; (80007ac <SystemRegisterCFG+0x130>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4a49      	ldr	r2, [pc, #292]	; (80007ac <SystemRegisterCFG+0x130>)
 8000686:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800068a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP_1;		// PLLP DIV = /2
 800068c:	4b47      	ldr	r3, [pc, #284]	; (80007ac <SystemRegisterCFG+0x130>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4a46      	ldr	r2, [pc, #280]	; (80007ac <SystemRegisterCFG+0x130>)
 8000692:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000696:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP_0;
 8000698:	4b44      	ldr	r3, [pc, #272]	; (80007ac <SystemRegisterCFG+0x130>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	4a43      	ldr	r2, [pc, #268]	; (80007ac <SystemRegisterCFG+0x130>)
 800069e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006a2:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b001001000 << 6);			// Multiplication factor PLLN = 72
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <SystemRegisterCFG+0x130>)
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	4a40      	ldr	r2, [pc, #256]	; (80007ac <SystemRegisterCFG+0x130>)
 80006aa:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 80006ae:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b000100);					// PLLM DIV = /4
 80006b0:	4b3e      	ldr	r3, [pc, #248]	; (80007ac <SystemRegisterCFG+0x130>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	4a3d      	ldr	r2, [pc, #244]	; (80007ac <SystemRegisterCFG+0x130>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;				// System Clock MUX switched to PLL
 80006bc:	4b3b      	ldr	r3, [pc, #236]	; (80007ac <SystemRegisterCFG+0x130>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	4a3a      	ldr	r2, [pc, #232]	; (80007ac <SystemRegisterCFG+0x130>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (RCC_CFGR_HPRE_DIV2 << RCC_CFGR_HPRE_Pos);		// AHB DIV = /2
 80006c8:	4b38      	ldr	r3, [pc, #224]	; (80007ac <SystemRegisterCFG+0x130>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	4a37      	ldr	r2, [pc, #220]	; (80007ac <SystemRegisterCFG+0x130>)
 80006ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006d2:	6093      	str	r3, [r2, #8]
	RCC->CR |= RCC_CR_HSEON;	// HSE ON
 80006d4:	4b35      	ldr	r3, [pc, #212]	; (80007ac <SystemRegisterCFG+0x130>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a34      	ldr	r2, [pc, #208]	; (80007ac <SystemRegisterCFG+0x130>)
 80006da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006de:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); // Wait for HSE ON
 80006e0:	bf00      	nop
 80006e2:	4b32      	ldr	r3, [pc, #200]	; (80007ac <SystemRegisterCFG+0x130>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0f9      	beq.n	80006e2 <SystemRegisterCFG+0x66>
	RCC->CR |= RCC_CR_PLLON;	// PLL ON
 80006ee:	4b2f      	ldr	r3, [pc, #188]	; (80007ac <SystemRegisterCFG+0x130>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a2e      	ldr	r2, [pc, #184]	; (80007ac <SystemRegisterCFG+0x130>)
 80006f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006f8:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLRDY)); // Check if PLL not locked
 80006fa:	bf00      	nop
 80006fc:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <SystemRegisterCFG+0x130>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1f9      	bne.n	80006fc <SystemRegisterCFG+0x80>
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Check for a correct source set
 8000708:	bf00      	nop
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <SystemRegisterCFG+0x130>)
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	f003 030c 	and.w	r3, r3, #12
 8000712:	2b08      	cmp	r3, #8
 8000714:	d1f9      	bne.n	800070a <SystemRegisterCFG+0x8e>
	RCC->CR &= ~RCC_CR_HSION;	// 16MHz HSI OFF
 8000716:	4b25      	ldr	r3, [pc, #148]	; (80007ac <SystemRegisterCFG+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a24      	ldr	r2, [pc, #144]	; (80007ac <SystemRegisterCFG+0x130>)
 800071c:	f023 0301 	bic.w	r3, r3, #1
 8000720:	6013      	str	r3, [r2, #0]


	// RCC Configuration
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;	// GPIO Clock
 8000722:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SystemRegisterCFG+0x130>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemRegisterCFG+0x130>)
 8000728:	f043 0307 	orr.w	r3, r3, #7
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;		// SPI1 clock
 800072e:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemRegisterCFG+0x130>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <SystemRegisterCFG+0x130>)
 8000734:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000738:	6453      	str	r3, [r2, #68]	; 0x44

	// Standard GPIO Config
	GPIOC->MODER |= GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE11_0 | GPIO_MODER_MODE12_0;	// STM LEDs output
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <SystemRegisterCFG+0x134>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a1c      	ldr	r2, [pc, #112]	; (80007b0 <SystemRegisterCFG+0x134>)
 8000740:	f043 73a2 	orr.w	r3, r3, #21233664	; 0x1440000
 8000744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000748:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD8 | GPIO_ODR_OD9 | GPIO_ODR_OD11 | GPIO_ODR_OD12;		// STM LEDs OFF
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <SystemRegisterCFG+0x134>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <SystemRegisterCFG+0x134>)
 8000750:	f443 53d8 	orr.w	r3, r3, #6912	; 0x1b00
 8000754:	6153      	str	r3, [r2, #20]

	// W6100 External Reset config
	GPIOC->MODER |= GPIO_MODER_MODE4_0;		// Output
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <SystemRegisterCFG+0x134>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <SystemRegisterCFG+0x134>)
 800075c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000760:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD4;				// Level high (reset disable)
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemRegisterCFG+0x134>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <SystemRegisterCFG+0x134>)
 8000768:	f043 0310 	orr.w	r3, r3, #16
 800076c:	6153      	str	r3, [r2, #20]

	// SPI GPIO Config
	GPIOA->MODER |= GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1;		// SPI1 AFIO Set (NSS Software)
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemRegisterCFG+0x138>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <SystemRegisterCFG+0x138>)
 8000774:	f443 4329 	orr.w	r3, r3, #43264	; 0xa900
 8000778:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_OD4;		// Slave select HIGH (disable)
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <SystemRegisterCFG+0x138>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <SystemRegisterCFG+0x138>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6153      	str	r3, [r2, #20]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL5_0 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL6_0 |
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <SystemRegisterCFG+0x138>)
 8000788:	6a1b      	ldr	r3, [r3, #32]
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <SystemRegisterCFG+0x138>)
 800078c:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000790:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000794:	6213      	str	r3, [r2, #32]
					 GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL7_0 | GPIO_AFRL_AFRL7_2;			// SPI1 AFIO => SPI1

	// SPI Config
	SPI1->CR1 |= SPI_CR1_SPE | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_MSTR;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <SystemRegisterCFG+0x13c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <SystemRegisterCFG+0x13c>)
 800079c:	f443 7351 	orr.w	r3, r3, #836	; 0x344
 80007a0:	6013      	str	r3, [r2, #0]


	// SysTic Config
	SysTick_Config(16000000);
 80007a2:	4806      	ldr	r0, [pc, #24]	; (80007bc <SystemRegisterCFG+0x140>)
 80007a4:	f7ff ff48 	bl	8000638 <SysTick_Config>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40013000 	.word	0x40013000
 80007bc:	00f42400 	.word	0x00f42400

080007c0 <SysTick_Handler>:





__attribute__((interrupt)) void SysTick_Handler(void){
 80007c0:	4668      	mov	r0, sp
 80007c2:	f020 0107 	bic.w	r1, r0, #7
 80007c6:	468d      	mov	sp, r1
 80007c8:	b481      	push	{r0, r7}
 80007ca:	af00      	add	r7, sp, #0
//	GPIOC->ODR ^= GPIO_ODR_OD11;
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc81      	pop	{r0, r7}
 80007d2:	4685      	mov	sp, r0
 80007d4:	4770      	bx	lr
	...

080007d8 <main>:
#include "can.h"



int main(void)
{
 80007d8:	b5b0      	push	{r4, r5, r7, lr}
 80007da:	b09e      	sub	sp, #120	; 0x78
 80007dc:	af00      	add	r7, sp, #0

	SystemRegisterCFG();
 80007de:	f7ff ff4d 	bl	800067c <SystemRegisterCFG>

	GPIOC->ODR &= ~GPIO_ODR_OD9;						// Server RED LED ON
 80007e2:	4b5c      	ldr	r3, [pc, #368]	; (8000954 <main+0x17c>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	4a5b      	ldr	r2, [pc, #364]	; (8000954 <main+0x17c>)
 80007e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007ec:	6153      	str	r3, [r2, #20]

	uint8_t rx_dat[20];
	uint8_t on_message[20] = {"System Enabled\n"};
 80007ee:	4b5a      	ldr	r3, [pc, #360]	; (8000958 <main+0x180>)
 80007f0:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80007f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80007fa:	2300      	movs	r3, #0
 80007fc:	65bb      	str	r3, [r7, #88]	; 0x58
	uint8_t off_message[20] = {"System Disabled\n"};
 80007fe:	4b57      	ldr	r3, [pc, #348]	; (800095c <main+0x184>)
 8000800:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000804:	461d      	mov	r5, r3
 8000806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080a:	682b      	ldr	r3, [r5, #0]
 800080c:	7023      	strb	r3, [r4, #0]
 800080e:	f107 0345 	add.w	r3, r7, #69	; 0x45
 8000812:	2200      	movs	r2, #0
 8000814:	801a      	strh	r2, [r3, #0]
 8000816:	709a      	strb	r2, [r3, #2]


	uint32_t destination_adr;


	W6100_INIT();										// Initialise W6100 with basic network information
 8000818:	f000 f99d 	bl	8000b56 <W6100_INIT>

	/* Socket Configuration */
	uint8_t txTotalSize = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint8_t rxTotalSize = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	for (uint8_t i=0; i<7; i++) {
 8000828:	2300      	movs	r3, #0
 800082a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 800082e:	e01e      	b.n	800086e <main+0x96>
		SPI_W6100_WSOCK(Sn_TX_BSR, 0x02, i, REG);		// assign 2 Kbytes TX buffer per SOCKET
 8000830:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000834:	2301      	movs	r3, #1
 8000836:	2102      	movs	r1, #2
 8000838:	f44f 7000 	mov.w	r0, #512	; 0x200
 800083c:	f000 f94c 	bl	8000ad8 <SPI_W6100_WSOCK>
		SPI_W6100_WSOCK(Sn_RX_BSR, 0x02, i, REG);		// assign 2 Kbytes RX buffer per SOCKET
 8000840:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8000844:	2301      	movs	r3, #1
 8000846:	2102      	movs	r1, #2
 8000848:	f44f 7008 	mov.w	r0, #544	; 0x220
 800084c:	f000 f944 	bl	8000ad8 <SPI_W6100_WSOCK>
		txTotalSize += 0x02;
 8000850:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000854:	3302      	adds	r3, #2
 8000856:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		rxTotalSize += 0x02;
 800085a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800085e:	3302      	adds	r3, #2
 8000860:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	for (uint8_t i=0; i<7; i++) {
 8000864:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000868:	3301      	adds	r3, #1
 800086a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 800086e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000872:	2b06      	cmp	r3, #6
 8000874:	d9dc      	bls.n	8000830 <main+0x58>
	}

	destination_adr = W6100_OpenTCPSocket(0);			// Open TCP socket 0 and return its destination address
 8000876:	2000      	movs	r0, #0
 8000878:	f000 fb16 	bl	8000ea8 <W6100_OpenTCPSocket>
 800087c:	6738      	str	r0, [r7, #112]	; 0x70


	CAN_MESSAGE can_on_msg;
	strcpy(can_on_msg.data, "mb_0000");
 800087e:	4a38      	ldr	r2, [pc, #224]	; (8000960 <main+0x188>)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000888:	e883 0003 	stmia.w	r3, {r0, r1}
	can_on_msg.format = STANDARD_FORMAT;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
	can_on_msg.type = DATA_FRAME;
 8000890:	2300      	movs	r3, #0
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
	can_on_msg.len = sizeof(can_on_msg);
 8000894:	2318      	movs	r3, #24
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
	can_on_msg.id = 0x01;
 8000898:	2301      	movs	r3, #1
 800089a:	61fb      	str	r3, [r7, #28]

	CAN_MESSAGE can_off_msg;
	strcpy(can_off_msg.data, "mb_0001");
 800089c:	4a31      	ldr	r2, [pc, #196]	; (8000964 <main+0x18c>)
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a6:	e883 0003 	stmia.w	r3, {r0, r1}
	can_off_msg.format = STANDARD_FORMAT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
	can_off_msg.type = DATA_FRAME;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
	can_off_msg.len = sizeof(can_off_msg);
 80008b2:	2318      	movs	r3, #24
 80008b4:	613b      	str	r3, [r7, #16]
	can_off_msg.id = 0x02;
 80008b6:	2302      	movs	r3, #2
 80008b8:	607b      	str	r3, [r7, #4]

	CanInit();
 80008ba:	f7ff fca3 	bl	8000204 <CanInit>

	Can_Set_Filter(0x03, STANDARD_FORMAT);
 80008be:	2100      	movs	r1, #0
 80008c0:	2003      	movs	r0, #3
 80008c2:	f7ff fdc9 	bl	8000458 <Can_Set_Filter>
	Can_Set_Filter(0x04, STANDARD_FORMAT);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2004      	movs	r0, #4
 80008ca:	f7ff fdc5 	bl	8000458 <Can_Set_Filter>


	while (1) {

		// Check Ethernet
		if (W6100_ReceiveData(0, destination_adr, rx_dat, sizeof(rx_dat))) {		// Check if data arrived
 80008ce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80008d2:	2314      	movs	r3, #20
 80008d4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80008d6:	2000      	movs	r0, #0
 80008d8:	f000 fb72 	bl	8000fc0 <W6100_ReceiveData>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f5      	beq.n	80008ce <main+0xf6>
			if (rx_dat[0] == 'o' && rx_dat[1] == 'n') {
 80008e2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80008e6:	2b6f      	cmp	r3, #111	; 0x6f
 80008e8:	d116      	bne.n	8000918 <main+0x140>
 80008ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80008ee:	2b6e      	cmp	r3, #110	; 0x6e
 80008f0:	d112      	bne.n	8000918 <main+0x140>
				GPIOC->ODR &= ~GPIO_ODR_OD12;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <main+0x17c>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <main+0x17c>)
 80008f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008fc:	6153      	str	r3, [r2, #20]
				// Send msg to the client
				W6100_TransmitData(0, destination_adr, on_message, sizeof(on_message));
 80008fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000902:	2314      	movs	r3, #20
 8000904:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000906:	2000      	movs	r0, #0
 8000908:	f000 fc29 	bl	800115e <W6100_TransmitData>
				Can_Tx_Msg(&can_on_msg);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fcbd 	bl	8000290 <Can_Tx_Msg>
 8000916:	e01c      	b.n	8000952 <main+0x17a>

			}
			else if (rx_dat[0] == 'o' && rx_dat[1] == 'f' && rx_dat[2] == 'f')	{
 8000918:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800091c:	2b6f      	cmp	r3, #111	; 0x6f
 800091e:	d1d6      	bne.n	80008ce <main+0xf6>
 8000920:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000924:	2b66      	cmp	r3, #102	; 0x66
 8000926:	d1d2      	bne.n	80008ce <main+0xf6>
 8000928:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800092c:	2b66      	cmp	r3, #102	; 0x66
 800092e:	d1ce      	bne.n	80008ce <main+0xf6>
				GPIOC->ODR |= GPIO_ODR_OD12;
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <main+0x17c>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <main+0x17c>)
 8000936:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800093a:	6153      	str	r3, [r2, #20]
				// Send msg to the client
				W6100_TransmitData(0, destination_adr, off_message, sizeof(off_message));
 800093c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000940:	2314      	movs	r3, #20
 8000942:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000944:	2000      	movs	r0, #0
 8000946:	f000 fc0a 	bl	800115e <W6100_TransmitData>
				// Send CAN frame
				Can_Tx_Msg(&can_off_msg);
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fc9f 	bl	8000290 <Can_Tx_Msg>
		if (W6100_ReceiveData(0, destination_adr, rx_dat, sizeof(rx_dat))) {		// Check if data arrived
 8000952:	e7bc      	b.n	80008ce <main+0xf6>
 8000954:	40020800 	.word	0x40020800
 8000958:	080014bc 	.word	0x080014bc
 800095c:	080014d0 	.word	0x080014d0
 8000960:	080014ac 	.word	0x080014ac
 8000964:	080014b4 	.word	0x080014b4

08000968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <SystemInit+0x28>)
 800096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000972:	4a07      	ldr	r2, [pc, #28]	; (8000990 <SystemInit+0x28>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SystemInit+0x28>)
 800097e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000982:	609a      	str	r2, [r3, #8]
#endif
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <SPI_Eth_SS>:
#include "w6100.h"




void SPI_Eth_SS(uint8_t state) {
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
	if (state) {
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d006      	beq.n	80009b2 <SPI_Eth_SS+0x1e>
		GPIOA->ODR &= ~GPIO_ODR_OD4;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <SPI_Eth_SS+0x3c>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <SPI_Eth_SS+0x3c>)
 80009aa:	f023 0310 	bic.w	r3, r3, #16
 80009ae:	6153      	str	r3, [r2, #20]
	}
	else if (!state) {
		GPIOA->ODR |= GPIO_ODR_OD4;
	}
}
 80009b0:	e008      	b.n	80009c4 <SPI_Eth_SS+0x30>
	else if (!state) {
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d105      	bne.n	80009c4 <SPI_Eth_SS+0x30>
		GPIOA->ODR |= GPIO_ODR_OD4;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SPI_Eth_SS+0x3c>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <SPI_Eth_SS+0x3c>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6153      	str	r3, [r2, #20]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	40020000 	.word	0x40020000

080009d4 <SPI_Eth_RT>:

uint8_t SPI_Eth_RT(uint8_t data) {
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	while(!(SPI1->SR & SPI_SR_TXE));	// Wait for Tx buffer empty
 80009de:	bf00      	nop
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <SPI_Eth_RT+0x40>)
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f003 0302 	and.w	r3, r3, #2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f9      	beq.n	80009e0 <SPI_Eth_RT+0xc>
	SPI1->DR = data;
 80009ec:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <SPI_Eth_RT+0x40>)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_RXNE));	// Wait for Rx buffer not empty
 80009f2:	bf00      	nop
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <SPI_Eth_RT+0x40>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f9      	beq.n	80009f4 <SPI_Eth_RT+0x20>
	data = SPI1->DR;
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <SPI_Eth_RT+0x40>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	71fb      	strb	r3, [r7, #7]
	return data;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	40013000 	.word	0x40013000

08000a18 <SPI_W6100_WCR>:
	dat = SPI_Eth_RT(0x00);	// Send garbage data to read the Common Register
	SPI_Eth_SS(OFF);		// NSS Slave Disable
	return dat;
}

void SPI_W6100_WCR(uint16_t adr, uint8_t val) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	460a      	mov	r2, r1
 8000a22:	80fb      	strh	r3, [r7, #6]
 8000a24:	4613      	mov	r3, r2
 8000a26:	717b      	strb	r3, [r7, #5]
	/* See Page 76 - W6100 datasheet */
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff ffb3 	bl	8000994 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ffcc 	bl	80009d4 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000a3c:	88fb      	ldrh	r3, [r7, #6]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ffc7 	bl	80009d4 <SPI_Eth_RT>
	SPI_Eth_RT(0x04);		// Send Control Byte	[CR, Write, Variable Length Data Mode]
 8000a46:	2004      	movs	r0, #4
 8000a48:	f7ff ffc4 	bl	80009d4 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 8000a4c:	797b      	ldrb	r3, [r7, #5]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ffc0 	bl	80009d4 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff ff9d 	bl	8000994 <SPI_Eth_SS>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <SPI_W6100_RSOCK>:

uint8_t SPI_W6100_RSOCK(uint16_t adr, uint8_t socket_nbr, uint8_t block) {
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	4603      	mov	r3, r0
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	717b      	strb	r3, [r7, #5]
 8000a70:	4613      	mov	r3, r2
 8000a72:	713b      	strb	r3, [r7, #4]
	uint8_t dat;
	uint8_t cb_temp = 0x00;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 8000a78:	797b      	ldrb	r3, [r7, #5]
 8000a7a:	015b      	lsls	r3, r3, #5
 8000a7c:	b25a      	sxtb	r2, r3
 8000a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 8000a88:	793b      	ldrb	r3, [r7, #4]
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	b25a      	sxtb	r2, r3
 8000a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f7ff ff7b 	bl	8000994 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff94 	bl	80009d4 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff8f 	bl	80009d4 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff8b 	bl	80009d4 <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);		// Send garbage data to read the Common Register
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff ff88 	bl	80009d4 <SPI_Eth_RT>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	73bb      	strb	r3, [r7, #14]
	SPI_Eth_SS(OFF);
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f7ff ff63 	bl	8000994 <SPI_Eth_SS>
	return dat;
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SPI_W6100_WSOCK>:

void SPI_W6100_WSOCK(uint16_t adr, uint8_t val, uint8_t socket_nbr, uint8_t block) {
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4604      	mov	r4, r0
 8000ae0:	4608      	mov	r0, r1
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4623      	mov	r3, r4
 8000ae8:	80fb      	strh	r3, [r7, #6]
 8000aea:	4603      	mov	r3, r0
 8000aec:	717b      	strb	r3, [r7, #5]
 8000aee:	460b      	mov	r3, r1
 8000af0:	713b      	strb	r3, [r7, #4]
 8000af2:	4613      	mov	r3, r2
 8000af4:	70fb      	strb	r3, [r7, #3]
	uint8_t cb_temp = 0x04;
 8000af6:	2304      	movs	r3, #4
 8000af8:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 8000afa:	793b      	ldrb	r3, [r7, #4]
 8000afc:	015b      	lsls	r3, r3, #5
 8000afe:	b25a      	sxtb	r2, r3
 8000b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff ff3a 	bl	8000994 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff53 	bl	80009d4 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff4e 	bl	80009d4 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff4a 	bl	80009d4 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 8000b40:	797b      	ldrb	r3, [r7, #5]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff46 	bl	80009d4 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff ff23 	bl	8000994 <SPI_Eth_SS>
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}

08000b56 <W6100_INIT>:

void W6100_INIT(void) {
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
	/* *** W6100 Init *** */
	SPI_W6100_WCR(NETLCKR, 0x3a);	// NETLCKR		Network settings unlock
 8000b5a:	213a      	movs	r1, #58	; 0x3a
 8000b5c:	f244 10f5 	movw	r0, #16885	; 0x41f5
 8000b60:	f7ff ff5a 	bl	8000a18 <SPI_W6100_WCR>

	SPI_W6100_WCR(SHAR0, MAC0);	// SHAR[5:0]	Set hardware MAC address
 8000b64:	2111      	movs	r1, #17
 8000b66:	f244 1020 	movw	r0, #16672	; 0x4120
 8000b6a:	f7ff ff55 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR1, MAC1);
 8000b6e:	2122      	movs	r1, #34	; 0x22
 8000b70:	f244 1021 	movw	r0, #16673	; 0x4121
 8000b74:	f7ff ff50 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR2, MAC2);
 8000b78:	2133      	movs	r1, #51	; 0x33
 8000b7a:	f244 1022 	movw	r0, #16674	; 0x4122
 8000b7e:	f7ff ff4b 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR3, MAC3);
 8000b82:	21aa      	movs	r1, #170	; 0xaa
 8000b84:	f244 1023 	movw	r0, #16675	; 0x4123
 8000b88:	f7ff ff46 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR4, MAC4);
 8000b8c:	21bb      	movs	r1, #187	; 0xbb
 8000b8e:	f244 1024 	movw	r0, #16676	; 0x4124
 8000b92:	f7ff ff41 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR5, MAC5);
 8000b96:	21cc      	movs	r1, #204	; 0xcc
 8000b98:	f244 1025 	movw	r0, #16677	; 0x4125
 8000b9c:	f7ff ff3c 	bl	8000a18 <SPI_W6100_WCR>

	SPI_W6100_WCR(GAR0, GIP0);	// GAR[0:3]		Gateway IP address 192.168.0.1
 8000ba0:	21c0      	movs	r1, #192	; 0xc0
 8000ba2:	f244 1030 	movw	r0, #16688	; 0x4130
 8000ba6:	f7ff ff37 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR1, GIP1);
 8000baa:	21a8      	movs	r1, #168	; 0xa8
 8000bac:	f244 1031 	movw	r0, #16689	; 0x4131
 8000bb0:	f7ff ff32 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR2, GIP2);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f244 1032 	movw	r0, #16690	; 0x4132
 8000bba:	f7ff ff2d 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR3, GIP3);
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	f244 1033 	movw	r0, #16691	; 0x4133
 8000bc4:	f7ff ff28 	bl	8000a18 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUBR0, SBM0);	// SUBR[0:3]	Subnet mask address 255:255:255:0
 8000bc8:	21ff      	movs	r1, #255	; 0xff
 8000bca:	f244 1034 	movw	r0, #16692	; 0x4134
 8000bce:	f7ff ff23 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR1, SBM1);
 8000bd2:	21ff      	movs	r1, #255	; 0xff
 8000bd4:	f244 1035 	movw	r0, #16693	; 0x4135
 8000bd8:	f7ff ff1e 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR2, SBM2);
 8000bdc:	21ff      	movs	r1, #255	; 0xff
 8000bde:	f244 1036 	movw	r0, #16694	; 0x4136
 8000be2:	f7ff ff19 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR3, SBM3);
 8000be6:	2100      	movs	r1, #0
 8000be8:	f244 1037 	movw	r0, #16695	; 0x4137
 8000bec:	f7ff ff14 	bl	8000a18 <SPI_W6100_WCR>

	SPI_W6100_WCR(SIPR0, IPV0);	// SIPR[0:3]	IPv4 Source IP Address 192.168.0.27
 8000bf0:	21c0      	movs	r1, #192	; 0xc0
 8000bf2:	f244 1038 	movw	r0, #16696	; 0x4138
 8000bf6:	f7ff ff0f 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR1, IPV1);
 8000bfa:	21a8      	movs	r1, #168	; 0xa8
 8000bfc:	f244 1039 	movw	r0, #16697	; 0x4139
 8000c00:	f7ff ff0a 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR2, IPV2);
 8000c04:	2100      	movs	r1, #0
 8000c06:	f244 103a 	movw	r0, #16698	; 0x413a
 8000c0a:	f7ff ff05 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR3, IPV3);
 8000c0e:	211b      	movs	r1, #27
 8000c10:	f244 103b 	movw	r0, #16699	; 0x413b
 8000c14:	f7ff ff00 	bl	8000a18 <SPI_W6100_WCR>

	SPI_W6100_WCR(LLAR0, 0xfe);	// Link Local Address, FE80::1322:33FF:FEAA:BBCC
 8000c18:	21fe      	movs	r1, #254	; 0xfe
 8000c1a:	f244 1040 	movw	r0, #16704	; 0x4140
 8000c1e:	f7ff fefb 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR1, 0x80);
 8000c22:	2180      	movs	r1, #128	; 0x80
 8000c24:	f244 1041 	movw	r0, #16705	; 0x4141
 8000c28:	f7ff fef6 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR2, 0x00);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f244 1042 	movw	r0, #16706	; 0x4142
 8000c32:	f7ff fef1 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR3, 0x01);
 8000c36:	2101      	movs	r1, #1
 8000c38:	f244 1043 	movw	r0, #16707	; 0x4143
 8000c3c:	f7ff feec 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR4, 0x00);
 8000c40:	2100      	movs	r1, #0
 8000c42:	f244 1044 	movw	r0, #16708	; 0x4144
 8000c46:	f7ff fee7 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR5, 0x00);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f244 1045 	movw	r0, #16709	; 0x4145
 8000c50:	f7ff fee2 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR6, 0x00);
 8000c54:	2100      	movs	r1, #0
 8000c56:	f244 1046 	movw	r0, #16710	; 0x4146
 8000c5a:	f7ff fedd 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR7, 0x00);
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f244 1047 	movw	r0, #16711	; 0x4147
 8000c64:	f7ff fed8 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR8, 0x13);
 8000c68:	2113      	movs	r1, #19
 8000c6a:	f244 1048 	movw	r0, #16712	; 0x4148
 8000c6e:	f7ff fed3 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR9, 0x22);
 8000c72:	2122      	movs	r1, #34	; 0x22
 8000c74:	f244 1049 	movw	r0, #16713	; 0x4149
 8000c78:	f7ff fece 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR10, 0x33);
 8000c7c:	2133      	movs	r1, #51	; 0x33
 8000c7e:	f244 104a 	movw	r0, #16714	; 0x414a
 8000c82:	f7ff fec9 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR11, 0xff);
 8000c86:	21ff      	movs	r1, #255	; 0xff
 8000c88:	f244 104b 	movw	r0, #16715	; 0x414b
 8000c8c:	f7ff fec4 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR12, 0xfe);
 8000c90:	21fe      	movs	r1, #254	; 0xfe
 8000c92:	f244 104c 	movw	r0, #16716	; 0x414c
 8000c96:	f7ff febf 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR13, 0xaa);
 8000c9a:	21aa      	movs	r1, #170	; 0xaa
 8000c9c:	f244 104d 	movw	r0, #16717	; 0x414d
 8000ca0:	f7ff feba 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR14, 0xbb);
 8000ca4:	21bb      	movs	r1, #187	; 0xbb
 8000ca6:	f244 104e 	movw	r0, #16718	; 0x414e
 8000caa:	f7ff feb5 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR15, 0xcc);
 8000cae:	21cc      	movs	r1, #204	; 0xcc
 8000cb0:	f244 104f 	movw	r0, #16719	; 0x414f
 8000cb4:	f7ff feb0 	bl	8000a18 <SPI_W6100_WCR>

	SPI_W6100_WCR(GUAR0, 0x20);	// Global Unicast Address, 2001:0DB8:E001::1222:33FF:FEAA:BBCC
 8000cb8:	2120      	movs	r1, #32
 8000cba:	f244 1050 	movw	r0, #16720	; 0x4150
 8000cbe:	f7ff feab 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR1, 0x01);
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	f244 1051 	movw	r0, #16721	; 0x4151
 8000cc8:	f7ff fea6 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR2, 0x0d);
 8000ccc:	210d      	movs	r1, #13
 8000cce:	f244 1052 	movw	r0, #16722	; 0x4152
 8000cd2:	f7ff fea1 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR3, 0xb8);
 8000cd6:	21b8      	movs	r1, #184	; 0xb8
 8000cd8:	f244 1053 	movw	r0, #16723	; 0x4153
 8000cdc:	f7ff fe9c 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR4, 0xe0);
 8000ce0:	21e0      	movs	r1, #224	; 0xe0
 8000ce2:	f244 1054 	movw	r0, #16724	; 0x4154
 8000ce6:	f7ff fe97 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR5, 0x01);
 8000cea:	2101      	movs	r1, #1
 8000cec:	f244 1055 	movw	r0, #16725	; 0x4155
 8000cf0:	f7ff fe92 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR6, 0x00);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f244 1056 	movw	r0, #16726	; 0x4156
 8000cfa:	f7ff fe8d 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR7, 0x00);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f244 1057 	movw	r0, #16727	; 0x4157
 8000d04:	f7ff fe88 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR8, 0x13);
 8000d08:	2113      	movs	r1, #19
 8000d0a:	f244 1058 	movw	r0, #16728	; 0x4158
 8000d0e:	f7ff fe83 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR9, 0x22);
 8000d12:	2122      	movs	r1, #34	; 0x22
 8000d14:	f244 1059 	movw	r0, #16729	; 0x4159
 8000d18:	f7ff fe7e 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR10, 0x33);
 8000d1c:	2133      	movs	r1, #51	; 0x33
 8000d1e:	f244 105a 	movw	r0, #16730	; 0x415a
 8000d22:	f7ff fe79 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR11, 0xff);
 8000d26:	21ff      	movs	r1, #255	; 0xff
 8000d28:	f244 105b 	movw	r0, #16731	; 0x415b
 8000d2c:	f7ff fe74 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR12, 0xfe);
 8000d30:	21fe      	movs	r1, #254	; 0xfe
 8000d32:	f244 105c 	movw	r0, #16732	; 0x415c
 8000d36:	f7ff fe6f 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR13, 0xaa);
 8000d3a:	21aa      	movs	r1, #170	; 0xaa
 8000d3c:	f244 105d 	movw	r0, #16733	; 0x415d
 8000d40:	f7ff fe6a 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR14, 0xbb);
 8000d44:	21bb      	movs	r1, #187	; 0xbb
 8000d46:	f244 105e 	movw	r0, #16734	; 0x415e
 8000d4a:	f7ff fe65 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR15, 0xcc);
 8000d4e:	21cc      	movs	r1, #204	; 0xcc
 8000d50:	f244 105f 	movw	r0, #16735	; 0x415f
 8000d54:	f7ff fe60 	bl	8000a18 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUB6R0, 0xff);	// IPv6 Subnet Prefix, FFFF:FFFF::
 8000d58:	21ff      	movs	r1, #255	; 0xff
 8000d5a:	f244 1060 	movw	r0, #16736	; 0x4160
 8000d5e:	f7ff fe5b 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R1, 0xff);
 8000d62:	21ff      	movs	r1, #255	; 0xff
 8000d64:	f244 1061 	movw	r0, #16737	; 0x4161
 8000d68:	f7ff fe56 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R2, 0xff);
 8000d6c:	21ff      	movs	r1, #255	; 0xff
 8000d6e:	f244 1062 	movw	r0, #16738	; 0x4162
 8000d72:	f7ff fe51 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R3, 0xff);
 8000d76:	21ff      	movs	r1, #255	; 0xff
 8000d78:	f244 1063 	movw	r0, #16739	; 0x4163
 8000d7c:	f7ff fe4c 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R4, 0xff);
 8000d80:	21ff      	movs	r1, #255	; 0xff
 8000d82:	f244 1064 	movw	r0, #16740	; 0x4164
 8000d86:	f7ff fe47 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R5, 0xff);
 8000d8a:	21ff      	movs	r1, #255	; 0xff
 8000d8c:	f244 1065 	movw	r0, #16741	; 0x4165
 8000d90:	f7ff fe42 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R6, 0xff);
 8000d94:	21ff      	movs	r1, #255	; 0xff
 8000d96:	f244 1066 	movw	r0, #16742	; 0x4166
 8000d9a:	f7ff fe3d 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R7, 0xff);
 8000d9e:	21ff      	movs	r1, #255	; 0xff
 8000da0:	f244 1067 	movw	r0, #16743	; 0x4167
 8000da4:	f7ff fe38 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R8, 0x00);
 8000da8:	2100      	movs	r1, #0
 8000daa:	f244 1068 	movw	r0, #16744	; 0x4168
 8000dae:	f7ff fe33 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R9, 0x00);
 8000db2:	2100      	movs	r1, #0
 8000db4:	f244 1069 	movw	r0, #16745	; 0x4169
 8000db8:	f7ff fe2e 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R10, 0x00);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	f244 106a 	movw	r0, #16746	; 0x416a
 8000dc2:	f7ff fe29 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R11, 0x00);
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	f244 106b 	movw	r0, #16747	; 0x416b
 8000dcc:	f7ff fe24 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R12, 0x00);
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	f244 106c 	movw	r0, #16748	; 0x416c
 8000dd6:	f7ff fe1f 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R13, 0x00);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	f244 106d 	movw	r0, #16749	; 0x416d
 8000de0:	f7ff fe1a 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R14, 0x00);
 8000de4:	2100      	movs	r1, #0
 8000de6:	f244 106e 	movw	r0, #16750	; 0x416e
 8000dea:	f7ff fe15 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R15, 0x00);
 8000dee:	2100      	movs	r1, #0
 8000df0:	f244 106f 	movw	r0, #16751	; 0x416f
 8000df4:	f7ff fe10 	bl	8000a18 <SPI_W6100_WCR>

	SPI_W6100_WCR(GA6R0, 0xfe);	// IPv6 Gateway Address, FFFF:FFFF::
 8000df8:	21fe      	movs	r1, #254	; 0xfe
 8000dfa:	f244 1070 	movw	r0, #16752	; 0x4170
 8000dfe:	f7ff fe0b 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R1, 0x80);
 8000e02:	2180      	movs	r1, #128	; 0x80
 8000e04:	f244 1071 	movw	r0, #16753	; 0x4171
 8000e08:	f7ff fe06 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R2, 0x00);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f244 1072 	movw	r0, #16754	; 0x4172
 8000e12:	f7ff fe01 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R3, 0x00);
 8000e16:	2100      	movs	r1, #0
 8000e18:	f244 1073 	movw	r0, #16755	; 0x4173
 8000e1c:	f7ff fdfc 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R4, 0x00);
 8000e20:	2100      	movs	r1, #0
 8000e22:	f244 1074 	movw	r0, #16756	; 0x4174
 8000e26:	f7ff fdf7 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R5, 0x00);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f244 1075 	movw	r0, #16757	; 0x4175
 8000e30:	f7ff fdf2 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R6, 0x00);
 8000e34:	2100      	movs	r1, #0
 8000e36:	f244 1076 	movw	r0, #16758	; 0x4176
 8000e3a:	f7ff fded 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R7, 0x00);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	f244 1077 	movw	r0, #16759	; 0x4177
 8000e44:	f7ff fde8 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R8, 0x13);
 8000e48:	2113      	movs	r1, #19
 8000e4a:	f244 1078 	movw	r0, #16760	; 0x4178
 8000e4e:	f7ff fde3 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R9, 0x22);
 8000e52:	2122      	movs	r1, #34	; 0x22
 8000e54:	f244 1079 	movw	r0, #16761	; 0x4179
 8000e58:	f7ff fdde 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R10, 0x33);
 8000e5c:	2133      	movs	r1, #51	; 0x33
 8000e5e:	f244 107a 	movw	r0, #16762	; 0x417a
 8000e62:	f7ff fdd9 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R11, 0xff);
 8000e66:	21ff      	movs	r1, #255	; 0xff
 8000e68:	f244 107b 	movw	r0, #16763	; 0x417b
 8000e6c:	f7ff fdd4 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R12, 0xfe);
 8000e70:	21fe      	movs	r1, #254	; 0xfe
 8000e72:	f244 107c 	movw	r0, #16764	; 0x417c
 8000e76:	f7ff fdcf 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R13, 0x44);
 8000e7a:	2144      	movs	r1, #68	; 0x44
 8000e7c:	f244 107d 	movw	r0, #16765	; 0x417d
 8000e80:	f7ff fdca 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R14, 0x55);
 8000e84:	2155      	movs	r1, #85	; 0x55
 8000e86:	f244 107e 	movw	r0, #16766	; 0x417e
 8000e8a:	f7ff fdc5 	bl	8000a18 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R15, 0x66);
 8000e8e:	2166      	movs	r1, #102	; 0x66
 8000e90:	f244 107f 	movw	r0, #16767	; 0x417f
 8000e94:	f7ff fdc0 	bl	8000a18 <SPI_W6100_WCR>

	SPI_W6100_WCR(NETLCKR, 0x00);	// NETLCKR		Network settings lock
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f244 10f5 	movw	r0, #16885	; 0x41f5
 8000e9e:	f7ff fdbb 	bl	8000a18 <SPI_W6100_WCR>
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <W6100_OpenTCPSocket>:




uint32_t W6100_OpenTCPSocket (uint8_t sck_nbr) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	uint32_t dest_adr;
	/* *** Open Socket as TCP4 *** */
	SPI_W6100_WSOCK(Sn_MR, 0x01, sck_nbr, REG);				// Set TCP4 mode
 8000eb2:	79fa      	ldrb	r2, [r7, #7]
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff fe0d 	bl	8000ad8 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR0, 0x13, sck_nbr, REG);			// Set PORT 5000
 8000ebe:	79fa      	ldrb	r2, [r7, #7]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	2113      	movs	r1, #19
 8000ec4:	f44f 708a 	mov.w	r0, #276	; 0x114
 8000ec8:	f7ff fe06 	bl	8000ad8 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR1, 0x88, sck_nbr, REG);
 8000ecc:	79fa      	ldrb	r2, [r7, #7]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	2188      	movs	r1, #136	; 0x88
 8000ed2:	f240 1015 	movw	r0, #277	; 0x115
 8000ed6:	f7ff fdff 	bl	8000ad8 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_CR, 0x01, sck_nbr, REG);				// Set OPEN command
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	2301      	movs	r3, #1
 8000ede:	2101      	movs	r1, #1
 8000ee0:	2010      	movs	r0, #16
 8000ee2:	f7ff fdf9 	bl	8000ad8 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until OPEN command is cleared
 8000ee6:	bf00      	nop
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2201      	movs	r2, #1
 8000eec:	4619      	mov	r1, r3
 8000eee:	2010      	movs	r0, #16
 8000ef0:	f7ff fdb7 	bl	8000a62 <SPI_W6100_RSOCK>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f6      	bne.n	8000ee8 <W6100_OpenTCPSocket+0x40>


	SPI_W6100_WSOCK(Sn_CR, 0x02, sck_nbr, REG);				// Set LISTEN command
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	2301      	movs	r3, #1
 8000efe:	2102      	movs	r1, #2
 8000f00:	2010      	movs	r0, #16
 8000f02:	f7ff fde9 	bl	8000ad8 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until LISTEN command is cleared
 8000f06:	bf00      	nop
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2010      	movs	r0, #16
 8000f10:	f7ff fda7 	bl	8000a62 <SPI_W6100_RSOCK>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f6      	bne.n	8000f08 <W6100_OpenTCPSocket+0x60>

	// CONNECT NOW
	while ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x17);	// Wait until SOCKET ESTABLISHED
 8000f1a:	bf00      	nop
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4619      	mov	r1, r3
 8000f22:	2030      	movs	r0, #48	; 0x30
 8000f24:	f7ff fd9d 	bl	8000a62 <SPI_W6100_RSOCK>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b17      	cmp	r3, #23
 8000f2c:	d1f6      	bne.n	8000f1c <W6100_OpenTCPSocket+0x74>

	/* HARDWARE RESPONSE ON THE SOCKET OPEN */
	GPIOC->ODR &= ~GPIO_ODR_OD8;
 8000f2e:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <W6100_OpenTCPSocket+0x114>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a22      	ldr	r2, [pc, #136]	; (8000fbc <W6100_OpenTCPSocket+0x114>)
 8000f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f38:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= GPIO_ODR_OD9;
 8000f3a:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <W6100_OpenTCPSocket+0x114>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <W6100_OpenTCPSocket+0x114>)
 8000f40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f44:	6153      	str	r3, [r2, #20]
	/* END OF HARDWARE RESPONSE */							// Socket established

	SPI_W6100_WSOCK(Sn_IRCLR, 0x01, sck_nbr, REG);			// Interrupt clear
 8000f46:	79fa      	ldrb	r2, [r7, #7]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2028      	movs	r0, #40	; 0x28
 8000f4e:	f7ff fdc3 	bl	8000ad8 <SPI_W6100_WSOCK>

	// Read destination address
	dest_adr = (SPI_W6100_RSOCK(Sn_DIPR0, sck_nbr, REG) << 24);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2201      	movs	r2, #1
 8000f56:	4619      	mov	r1, r3
 8000f58:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000f5c:	f7ff fd81 	bl	8000a62 <SPI_W6100_RSOCK>
 8000f60:	4603      	mov	r3, r0
 8000f62:	061b      	lsls	r3, r3, #24
 8000f64:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR1, sck_nbr, REG) << 16);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f240 1021 	movw	r0, #289	; 0x121
 8000f70:	f7ff fd77 	bl	8000a62 <SPI_W6100_RSOCK>
 8000f74:	4603      	mov	r3, r0
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR2, sck_nbr, REG) << 8);
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2201      	movs	r2, #1
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 7091 	mov.w	r0, #290	; 0x122
 8000f8a:	f7ff fd6a 	bl	8000a62 <SPI_W6100_RSOCK>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
	dest_adr |= SPI_W6100_RSOCK(Sn_DIPR3, sck_nbr, REG);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f240 1023 	movw	r0, #291	; 0x123
 8000fa4:	f7ff fd5d 	bl	8000a62 <SPI_W6100_RSOCK>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]

	return dest_adr;	// Return destination address
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020800 	.word	0x40020800

08000fc0 <W6100_ReceiveData>:




uint8_t W6100_ReceiveData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab, uint8_t size) {
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b08b      	sub	sp, #44	; 0x2c
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	uint32_t get_size, gSn_RX_MAX, get_start_address, Sn_RX_RD_temp;

	if ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) == 0x1c) {								// Check if socket close request pending
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2030      	movs	r0, #48	; 0x30
 8000fdc:	f7ff fd41 	bl	8000a62 <SPI_W6100_RSOCK>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b1c      	cmp	r3, #28
 8000fe4:	d103      	bne.n	8000fee <W6100_ReceiveData+0x2e>
		W6100_PassiveCloseSocket(sck_nbr);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f997 	bl	800131c <W6100_PassiveCloseSocket>
	}

	if ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0b00000100) == 0x04) {					// Check if data received
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	2020      	movs	r0, #32
 8000ff6:	f7ff fd34 	bl	8000a62 <SPI_W6100_RSOCK>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	2b04      	cmp	r3, #4
 8001002:	f040 80a7 	bne.w	8001154 <W6100_ReceiveData+0x194>

			// Clear data interrupt
			SPI_W6100_WSOCK(Sn_IRCLR, 0x04, sck_nbr, REG);
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	2301      	movs	r3, #1
 800100a:	2104      	movs	r1, #4
 800100c:	2028      	movs	r0, #40	; 0x28
 800100e:	f7ff fd63 	bl	8000ad8 <SPI_W6100_WSOCK>

			// Read data from the buffer
			get_size = (SPI_W6100_RSOCK(Sn_RX_RSR0, sck_nbr, REG) << 8);
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	2201      	movs	r2, #1
 8001016:	4619      	mov	r1, r3
 8001018:	f44f 7009 	mov.w	r0, #548	; 0x224
 800101c:	f7ff fd21 	bl	8000a62 <SPI_W6100_RSOCK>
 8001020:	4603      	mov	r3, r0
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	623b      	str	r3, [r7, #32]
			get_size |= SPI_W6100_RSOCK(Sn_RX_RSR1, sck_nbr, REG);
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	2201      	movs	r2, #1
 800102a:	4619      	mov	r1, r3
 800102c:	f240 2025 	movw	r0, #549	; 0x225
 8001030:	f7ff fd17 	bl	8000a62 <SPI_W6100_RSOCK>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	4313      	orrs	r3, r2
 800103c:	623b      	str	r3, [r7, #32]
			gSn_RX_MAX = (SPI_W6100_RSOCK(Sn_RX_BSR, sck_nbr, REG) * 1024);
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	2201      	movs	r2, #1
 8001042:	4619      	mov	r1, r3
 8001044:	f44f 7008 	mov.w	r0, #544	; 0x220
 8001048:	f7ff fd0b 	bl	8000a62 <SPI_W6100_RSOCK>
 800104c:	4603      	mov	r3, r0
 800104e:	029b      	lsls	r3, r3, #10
 8001050:	61fb      	str	r3, [r7, #28]
			get_start_address = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2201      	movs	r2, #1
 8001056:	4619      	mov	r1, r3
 8001058:	f44f 700a 	mov.w	r0, #552	; 0x228
 800105c:	f7ff fd01 	bl	8000a62 <SPI_W6100_RSOCK>
 8001060:	4603      	mov	r3, r0
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	617b      	str	r3, [r7, #20]
			get_start_address |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	2201      	movs	r2, #1
 800106a:	4619      	mov	r1, r3
 800106c:	f240 2029 	movw	r0, #553	; 0x229
 8001070:	f7ff fcf7 	bl	8000a62 <SPI_W6100_RSOCK>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	4313      	orrs	r3, r2
 800107c:	617b      	str	r3, [r7, #20]

			// Move data to the array
			memset(tab, '\0', size);
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	461a      	mov	r2, r3
 8001082:	2100      	movs	r1, #0
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f9fc 	bl	8001482 <memset>
			for (i=0; i<get_size; i++) {
 800108a:	2300      	movs	r3, #0
 800108c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001090:	e016      	b.n	80010c0 <W6100_ReceiveData+0x100>
				tab[i] = SPI_W6100_RSOCK((get_start_address+i), sck_nbr, RX_BUF);
 8001092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001096:	b29a      	uxth	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	b29b      	uxth	r3, r3
 800109c:	4413      	add	r3, r2
 800109e:	b298      	uxth	r0, r3
 80010a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	18d4      	adds	r4, r2, r3
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	2203      	movs	r2, #3
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fcd8 	bl	8000a62 <SPI_W6100_RSOCK>
 80010b2:	4603      	mov	r3, r0
 80010b4:	7023      	strb	r3, [r4, #0]
			for (i=0; i<get_size; i++) {
 80010b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010ba:	3301      	adds	r3, #1
 80010bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010c4:	6a3a      	ldr	r2, [r7, #32]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d8e3      	bhi.n	8001092 <W6100_ReceiveData+0xd2>
			}

			memcpy(&get_start_address, &dest_adr, get_size);
 80010ca:	f107 0108 	add.w	r1, r7, #8
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	6a3a      	ldr	r2, [r7, #32]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 f9c9 	bl	800146c <memcpy>

			Sn_RX_RD_temp = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	2201      	movs	r2, #1
 80010de:	4619      	mov	r1, r3
 80010e0:	f44f 700a 	mov.w	r0, #552	; 0x228
 80010e4:	f7ff fcbd 	bl	8000a62 <SPI_W6100_RSOCK>
 80010e8:	4603      	mov	r3, r0
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2201      	movs	r2, #1
 80010f2:	4619      	mov	r1, r3
 80010f4:	f240 2029 	movw	r0, #553	; 0x229
 80010f8:	f7ff fcb3 	bl	8000a62 <SPI_W6100_RSOCK>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp += get_size;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	6a3b      	ldr	r3, [r7, #32]
 800110a:	4413      	add	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
			SPI_W6100_WSOCK(Sn_RX_RD0, (Sn_RX_RD_temp>>8), sck_nbr, REG);
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	b2d9      	uxtb	r1, r3
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	2301      	movs	r3, #1
 8001118:	f44f 700a 	mov.w	r0, #552	; 0x228
 800111c:	f7ff fcdc 	bl	8000ad8 <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_RX_RD1, (Sn_RX_RD_temp), sck_nbr, REG);
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	b2d9      	uxtb	r1, r3
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	2301      	movs	r3, #1
 8001128:	f240 2029 	movw	r0, #553	; 0x229
 800112c:	f7ff fcd4 	bl	8000ad8 <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_CR, 0x40, sck_nbr, REG);
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	2301      	movs	r3, #1
 8001134:	2140      	movs	r1, #64	; 0x40
 8001136:	2010      	movs	r0, #16
 8001138:	f7ff fcce 	bl	8000ad8 <SPI_W6100_WSOCK>
			while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);
 800113c:	bf00      	nop
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2201      	movs	r2, #1
 8001142:	4619      	mov	r1, r3
 8001144:	2010      	movs	r0, #16
 8001146:	f7ff fc8c 	bl	8000a62 <SPI_W6100_RSOCK>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1f6      	bne.n	800113e <W6100_ReceiveData+0x17e>

			return 1;	// Return 1 if data was received
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <W6100_ReceiveData+0x196>
	}
	else 	return 0;	// Return 0 of no data was received
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	372c      	adds	r7, #44	; 0x2c
 800115a:	46bd      	mov	sp, r7
 800115c:	bd90      	pop	{r4, r7, pc}

0800115e <W6100_TransmitData>:

void W6100_TransmitData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab, uint8_t size) {
 800115e:	b580      	push	{r7, lr}
 8001160:	b08a      	sub	sp, #40	; 0x28
 8001162:	af00      	add	r7, sp, #0
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	4613      	mov	r3, r2
 8001170:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	uint8_t send_size = size;
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t gSn_TX_MAX, get_start_address, Sn_TX_WR_temp, Sn_TX_FSR_temp;

	gSn_TX_MAX = (SPI_W6100_RSOCK(Sn_TX_BSR, sck_nbr, REG) * 1024);						// Socket TX buffer size
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001182:	f7ff fc6e 	bl	8000a62 <SPI_W6100_RSOCK>
 8001186:	4603      	mov	r3, r0
 8001188:	029b      	lsls	r3, r3, #10
 800118a:	61fb      	str	r3, [r7, #28]

	if(send_size > gSn_TX_MAX) send_size = gSn_TX_MAX;
 800118c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	429a      	cmp	r2, r3
 8001194:	d219      	bcs.n	80011ca <W6100_TransmitData+0x6c>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	while(send_size > Sn_TX_FSR_temp) {													// wait until Socket Tx buffer is free
 800119c:	e015      	b.n	80011ca <W6100_TransmitData+0x6c>
		Sn_TX_FSR_temp = (SPI_W6100_RSOCK(Sn_TX_FSR0, sck_nbr, REG) << 8);
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	2201      	movs	r2, #1
 80011a2:	4619      	mov	r1, r3
 80011a4:	f44f 7001 	mov.w	r0, #516	; 0x204
 80011a8:	f7ff fc5b 	bl	8000a62 <SPI_W6100_RSOCK>
 80011ac:	4603      	mov	r3, r0
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	623b      	str	r3, [r7, #32]
		Sn_TX_FSR_temp |= SPI_W6100_RSOCK(Sn_TX_FSR1, sck_nbr, REG);
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	2201      	movs	r2, #1
 80011b6:	4619      	mov	r1, r3
 80011b8:	f240 2005 	movw	r0, #517	; 0x205
 80011bc:	f7ff fc51 	bl	8000a62 <SPI_W6100_RSOCK>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	623b      	str	r3, [r7, #32]
	while(send_size > Sn_TX_FSR_temp) {													// wait until Socket Tx buffer is free
 80011ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011ce:	6a3a      	ldr	r2, [r7, #32]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d3e4      	bcc.n	800119e <W6100_TransmitData+0x40>
	}

	get_start_address = (SPI_W6100_RSOCK(Sn_TX_WR0, sck_nbr, REG) << 8);
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	2201      	movs	r2, #1
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80011de:	f7ff fc40 	bl	8000a62 <SPI_W6100_RSOCK>
 80011e2:	4603      	mov	r3, r0
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	617b      	str	r3, [r7, #20]
	get_start_address |= SPI_W6100_RSOCK(Sn_TX_WR1, sck_nbr, REG);
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2201      	movs	r2, #1
 80011ec:	4619      	mov	r1, r3
 80011ee:	f240 200d 	movw	r0, #525	; 0x20d
 80011f2:	f7ff fc36 	bl	8000a62 <SPI_W6100_RSOCK>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]


	Sn_TX_WR_temp = (SPI_W6100_RSOCK(Sn_TX_WR0, sck_nbr, REG) << 8);
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2201      	movs	r2, #1
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800120a:	f7ff fc2a 	bl	8000a62 <SPI_W6100_RSOCK>
 800120e:	4603      	mov	r3, r0
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	61bb      	str	r3, [r7, #24]
	Sn_TX_WR_temp |= SPI_W6100_RSOCK(Sn_TX_WR1, sck_nbr, REG);
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	2201      	movs	r2, #1
 8001218:	4619      	mov	r1, r3
 800121a:	f240 200d 	movw	r0, #525	; 0x20d
 800121e:	f7ff fc20 	bl	8000a62 <SPI_W6100_RSOCK>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
	Sn_TX_WR_temp += size;
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4413      	add	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
	SPI_W6100_WSOCK(Sn_TX_WR0, (Sn_TX_WR_temp>>8), sck_nbr, REG);
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	0a1b      	lsrs	r3, r3, #8
 8001238:	b2d9      	uxtb	r1, r3
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	2301      	movs	r3, #1
 800123e:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8001242:	f7ff fc49 	bl	8000ad8 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_TX_WR1, (Sn_TX_WR_temp), sck_nbr, REG);
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	b2d9      	uxtb	r1, r3
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	2301      	movs	r3, #1
 800124e:	f240 200d 	movw	r0, #525	; 0x20d
 8001252:	f7ff fc41 	bl	8000ad8 <SPI_W6100_WSOCK>

	// Move data to the array
	for (i=0; i<size; i++) {
 8001256:	2300      	movs	r3, #0
 8001258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800125c:	e014      	b.n	8001288 <W6100_TransmitData+0x12a>
		SPI_W6100_WSOCK((get_start_address+i), tab[i], sck_nbr, TX_BUF);
 800125e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001262:	b29a      	uxth	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	b29b      	uxth	r3, r3
 8001268:	4413      	add	r3, r2
 800126a:	b298      	uxth	r0, r3
 800126c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	7819      	ldrb	r1, [r3, #0]
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	2302      	movs	r3, #2
 800127a:	f7ff fc2d 	bl	8000ad8 <SPI_W6100_WSOCK>
	for (i=0; i<size; i++) {
 800127e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001282:	3301      	adds	r3, #1
 8001284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001288:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	429a      	cmp	r2, r3
 8001290:	d3e5      	bcc.n	800125e <W6100_TransmitData+0x100>
	}

	memcpy(&get_start_address, &dest_adr, send_size);
 8001292:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001296:	f107 0108 	add.w	r1, r7, #8
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f8e4 	bl	800146c <memcpy>

	SPI_W6100_WSOCK(Sn_CR, 0x20, sck_nbr, REG);											// SEND command sent to TCP/TCP6 mode
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	2301      	movs	r3, #1
 80012a8:	2120      	movs	r1, #32
 80012aa:	2010      	movs	r0, #16
 80012ac:	f7ff fc14 	bl	8000ad8 <SPI_W6100_WSOCK>
	while(SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG) != 0x00);								// Wait for SEND command clear
 80012b0:	bf00      	nop
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4619      	mov	r1, r3
 80012b8:	2010      	movs	r0, #16
 80012ba:	f7ff fbd2 	bl	8000a62 <SPI_W6100_RSOCK>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f6      	bne.n	80012b2 <W6100_TransmitData+0x154>

	while(((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x10) == 0) && ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x08) == 0));
 80012c4:	bf00      	nop
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	2201      	movs	r2, #1
 80012ca:	4619      	mov	r1, r3
 80012cc:	2020      	movs	r0, #32
 80012ce:	f7ff fbc8 	bl	8000a62 <SPI_W6100_RSOCK>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10a      	bne.n	80012f2 <W6100_TransmitData+0x194>
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2201      	movs	r2, #1
 80012e0:	4619      	mov	r1, r3
 80012e2:	2020      	movs	r0, #32
 80012e4:	f7ff fbbd 	bl	8000a62 <SPI_W6100_RSOCK>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0e9      	beq.n	80012c6 <W6100_TransmitData+0x168>

	if((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x10) == 0x10) SPI_W6100_WSOCK(Sn_IRCLR, 0x10, sck_nbr, REG);	// Clear SENDOK interrupt
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2201      	movs	r2, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	2020      	movs	r0, #32
 80012fa:	f7ff fbb2 	bl	8000a62 <SPI_W6100_RSOCK>
 80012fe:	4603      	mov	r3, r0
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	2b10      	cmp	r3, #16
 8001306:	d105      	bne.n	8001314 <W6100_TransmitData+0x1b6>
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	2301      	movs	r3, #1
 800130c:	2110      	movs	r1, #16
 800130e:	2028      	movs	r0, #40	; 0x28
 8001310:	f7ff fbe2 	bl	8000ad8 <SPI_W6100_WSOCK>

}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <W6100_PassiveCloseSocket>:



void W6100_PassiveCloseSocket(uint8_t sck_nbr) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	SPI_W6100_WSOCK(Sn_CR, 0x08, sck_nbr, REG);						// Send FIN packet (DISCON command)
 8001326:	79fa      	ldrb	r2, [r7, #7]
 8001328:	2301      	movs	r3, #1
 800132a:	2108      	movs	r1, #8
 800132c:	2010      	movs	r0, #16
 800132e:	f7ff fbd3 	bl	8000ad8 <SPI_W6100_WSOCK>
	while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);			// Wait for DISCON command clear
 8001332:	bf00      	nop
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2201      	movs	r2, #1
 8001338:	4619      	mov	r1, r3
 800133a:	2010      	movs	r0, #16
 800133c:	f7ff fb91 	bl	8000a62 <SPI_W6100_RSOCK>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f6      	bne.n	8001334 <W6100_PassiveCloseSocket+0x18>
	// Wait for ACK packet
	while((((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b10) == 0) && (((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b1000) == 0));
 8001346:	bf00      	nop
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2201      	movs	r2, #1
 800134c:	4619      	mov	r1, r3
 800134e:	2020      	movs	r0, #32
 8001350:	f7ff fb87 	bl	8000a62 <SPI_W6100_RSOCK>
 8001354:	4603      	mov	r3, r0
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10a      	bne.n	8001374 <W6100_PassiveCloseSocket+0x58>
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2201      	movs	r2, #1
 8001362:	4619      	mov	r1, r3
 8001364:	2020      	movs	r0, #32
 8001366:	f7ff fb7c 	bl	8000a62 <SPI_W6100_RSOCK>
 800136a:	4603      	mov	r3, r0
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0e9      	beq.n	8001348 <W6100_PassiveCloseSocket+0x2c>

	if ((((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b10) == 0b10)) {
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2201      	movs	r2, #1
 8001378:	4619      	mov	r1, r3
 800137a:	2020      	movs	r0, #32
 800137c:	f7ff fb71 	bl	8000a62 <SPI_W6100_RSOCK>
 8001380:	4603      	mov	r3, r0
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b02      	cmp	r3, #2
 8001388:	d10f      	bne.n	80013aa <W6100_PassiveCloseSocket+0x8e>
		SPI_W6100_WSOCK(Sn_IRCLR, 0x02, sck_nbr, REG);				// Clear DISCON interrupt
 800138a:	79fa      	ldrb	r2, [r7, #7]
 800138c:	2301      	movs	r3, #1
 800138e:	2102      	movs	r1, #2
 8001390:	2028      	movs	r0, #40	; 0x28
 8001392:	f7ff fba1 	bl	8000ad8 <SPI_W6100_WSOCK>
		while((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x00);		// Wait until socket is CLOSED
 8001396:	bf00      	nop
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2201      	movs	r2, #1
 800139c:	4619      	mov	r1, r3
 800139e:	2030      	movs	r0, #48	; 0x30
 80013a0:	f7ff fb5f 	bl	8000a62 <SPI_W6100_RSOCK>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f6      	bne.n	8001398 <W6100_PassiveCloseSocket+0x7c>
	}
	/* HARDWARE RESPONSE ON THE SOCKET CLOSE */
	GPIOC->ODR |= GPIO_ODR_OD8;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <W6100_PassiveCloseSocket+0xb0>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4a07      	ldr	r2, [pc, #28]	; (80013cc <W6100_PassiveCloseSocket+0xb0>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b4:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~GPIO_ODR_OD9;
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <W6100_PassiveCloseSocket+0xb0>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <W6100_PassiveCloseSocket+0xb0>)
 80013bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013c0:	6153      	str	r3, [r2, #20]
	/* END OF HARDWARE RESPONSE */
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020800 	.word	0x40020800

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001408 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013d6:	e003      	b.n	80013e0 <LoopCopyDataInit>

080013d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013de:	3104      	adds	r1, #4

080013e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013e8:	d3f6      	bcc.n	80013d8 <CopyDataInit>
  ldr  r2, =_sbss
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013ec:	e002      	b.n	80013f4 <LoopFillZerobss>

080013ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013f0:	f842 3b04 	str.w	r3, [r2], #4

080013f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013f8:	d3f9      	bcc.n	80013ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013fa:	f7ff fab5 	bl	8000968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f000 f811 	bl	8001424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff f9e9 	bl	80007d8 <main>
  bx  lr    
 8001406:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001408:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800140c:	080014ec 	.word	0x080014ec
  ldr  r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001414:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8001418:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 800141c:	20000038 	.word	0x20000038

08001420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC_IRQHandler>
	...

08001424 <__libc_init_array>:
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	4e0d      	ldr	r6, [pc, #52]	; (800145c <__libc_init_array+0x38>)
 8001428:	4c0d      	ldr	r4, [pc, #52]	; (8001460 <__libc_init_array+0x3c>)
 800142a:	1ba4      	subs	r4, r4, r6
 800142c:	10a4      	asrs	r4, r4, #2
 800142e:	2500      	movs	r5, #0
 8001430:	42a5      	cmp	r5, r4
 8001432:	d109      	bne.n	8001448 <__libc_init_array+0x24>
 8001434:	4e0b      	ldr	r6, [pc, #44]	; (8001464 <__libc_init_array+0x40>)
 8001436:	4c0c      	ldr	r4, [pc, #48]	; (8001468 <__libc_init_array+0x44>)
 8001438:	f000 f82c 	bl	8001494 <_init>
 800143c:	1ba4      	subs	r4, r4, r6
 800143e:	10a4      	asrs	r4, r4, #2
 8001440:	2500      	movs	r5, #0
 8001442:	42a5      	cmp	r5, r4
 8001444:	d105      	bne.n	8001452 <__libc_init_array+0x2e>
 8001446:	bd70      	pop	{r4, r5, r6, pc}
 8001448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800144c:	4798      	blx	r3
 800144e:	3501      	adds	r5, #1
 8001450:	e7ee      	b.n	8001430 <__libc_init_array+0xc>
 8001452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001456:	4798      	blx	r3
 8001458:	3501      	adds	r5, #1
 800145a:	e7f2      	b.n	8001442 <__libc_init_array+0x1e>
 800145c:	080014e4 	.word	0x080014e4
 8001460:	080014e4 	.word	0x080014e4
 8001464:	080014e4 	.word	0x080014e4
 8001468:	080014e8 	.word	0x080014e8

0800146c <memcpy>:
 800146c:	b510      	push	{r4, lr}
 800146e:	1e43      	subs	r3, r0, #1
 8001470:	440a      	add	r2, r1
 8001472:	4291      	cmp	r1, r2
 8001474:	d100      	bne.n	8001478 <memcpy+0xc>
 8001476:	bd10      	pop	{r4, pc}
 8001478:	f811 4b01 	ldrb.w	r4, [r1], #1
 800147c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001480:	e7f7      	b.n	8001472 <memcpy+0x6>

08001482 <memset>:
 8001482:	4402      	add	r2, r0
 8001484:	4603      	mov	r3, r0
 8001486:	4293      	cmp	r3, r2
 8001488:	d100      	bne.n	800148c <memset+0xa>
 800148a:	4770      	bx	lr
 800148c:	f803 1b01 	strb.w	r1, [r3], #1
 8001490:	e7f9      	b.n	8001486 <memset+0x4>
	...

08001494 <_init>:
 8001494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001496:	bf00      	nop
 8001498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800149a:	bc08      	pop	{r3}
 800149c:	469e      	mov	lr, r3
 800149e:	4770      	bx	lr

080014a0 <_fini>:
 80014a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a2:	bf00      	nop
 80014a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014a6:	bc08      	pop	{r3}
 80014a8:	469e      	mov	lr, r3
 80014aa:	4770      	bx	lr
