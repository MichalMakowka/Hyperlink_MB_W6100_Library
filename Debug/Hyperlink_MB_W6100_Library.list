
Hyperlink_MB_W6100_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000213c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080022cc  080022cc  000122cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002414  08002414  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002414  08002414  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002414  08002414  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800241c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000064  08002480  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002480  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b87  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e7a  00000000  00000000  00025c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000208  00000000  00000000  00026a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000190  00000000  00000000  00026ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001931e  00000000  00000000  00026e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002f5f  00000000  00000000  0004014e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000841ce  00000000  00000000  000430ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c727b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009f8  00000000  00000000  000c72f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080022b4 	.word	0x080022b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080022b4 	.word	0x080022b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4907      	ldr	r1, [pc, #28]	; (80002c8 <__NVIC_EnableIRQ+0x38>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000e100 	.word	0xe000e100

080002cc <CanInit>:
 */

#include "can.h"


void CanInit(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0

	// *** Pin configuration and remap assignment *** //
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;		// Enable CAN 1 CLK
 80002d0:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <CanInit+0x7c>)
 80002d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d4:	4a1c      	ldr	r2, [pc, #112]	; (8000348 <CanInit+0x7c>)
 80002d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002da:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOB->MODER |= GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1;	// PB8 and PB9 Alternative Function
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <CanInit+0x80>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1a      	ldr	r2, [pc, #104]	; (800034c <CanInit+0x80>)
 80002e2:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 80002e6:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_3 | GPIO_AFRH_AFRH0_0 | GPIO_AFRH_AFRH1_0 | GPIO_AFRH_AFRH1_3;		// Alternative function mapped to CAN1_Tx and CAN1_Rx
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <CanInit+0x80>)
 80002ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ec:	4a17      	ldr	r2, [pc, #92]	; (800034c <CanInit+0x80>)
 80002ee:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 80002f2:	6253      	str	r3, [r2, #36]	; 0x24

	CAN1->MCR |= CAN_MCR_INRQ;			// Initialisation mode on
 80002f4:	4b16      	ldr	r3, [pc, #88]	; (8000350 <CanInit+0x84>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a15      	ldr	r2, [pc, #84]	; (8000350 <CanInit+0x84>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6013      	str	r3, [r2, #0]

	// *** CAN Test Mode *** //
//	CAN1->BTR |= CAN_BTR_LBKM;			// Loopback mode enabled (For Debug purposes)
	// ********************* //

	NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000300:	2013      	movs	r0, #19
 8000302:	f7ff ffc5 	bl	8000290 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000306:	2014      	movs	r0, #20
 8000308:	f7ff ffc2 	bl	8000290 <__NVIC_EnableIRQ>

	CAN1->IER |= CAN_IER_FMPIE0;		// Interrupt generated when state of FMP[1:0] bits are not 00b
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <CanInit+0x84>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a0f      	ldr	r2, [pc, #60]	; (8000350 <CanInit+0x84>)
 8000312:	f043 0302 	orr.w	r3, r3, #2
 8000316:	6153      	str	r3, [r2, #20]

	CAN1->BTR = 0x00080004;				// CAN Bitrate: 500k
 8000318:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <CanInit+0x84>)
 800031a:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <CanInit+0x88>)
 800031c:	61da      	str	r2, [r3, #28]


	CAN1->MCR &= ~CAN_MCR_INRQ;			// Initialisation mode off
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <CanInit+0x84>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <CanInit+0x84>)
 8000324:	f023 0301 	bic.w	r3, r3, #1
 8000328:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MCR_INRQ);
 800032a:	bf00      	nop
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <CanInit+0x84>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1f9      	bne.n	800032c <CanInit+0x60>


	CAN1->MCR &= ~CAN_MCR_SLEEP;
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <CanInit+0x84>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a04      	ldr	r2, [pc, #16]	; (8000350 <CanInit+0x84>)
 800033e:	f023 0302 	bic.w	r3, r3, #2
 8000342:	6013      	str	r3, [r2, #0]


}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40023800 	.word	0x40023800
 800034c:	40020400 	.word	0x40020400
 8000350:	40006400 	.word	0x40006400
 8000354:	00080004 	.word	0x00080004

08000358 <Can_Tx_Msg>:


void Can_Tx_Msg(CAN_MESSAGE * msg) {
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

	CAN1->sTxMailBox[0].TIR = 0;		// Empty TIR register
 8000360:	4b3c      	ldr	r3, [pc, #240]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000362:	2200      	movs	r2, #0
 8000364:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	if(msg->format == STANDARD_FORMAT)	{
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	691b      	ldr	r3, [r3, #16]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d10a      	bne.n	8000386 <Can_Tx_Msg+0x2e>
		CAN1->sTxMailBox[0].TIR |= (u_int) (msg->id << 21) | CAN_ID_STD;
 8000370:	4b38      	ldr	r3, [pc, #224]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000372:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	055b      	lsls	r3, r3, #21
 800037c:	4935      	ldr	r1, [pc, #212]	; (8000454 <Can_Tx_Msg+0xfc>)
 800037e:	4313      	orrs	r3, r2
 8000380:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
 8000384:	e009      	b.n	800039a <Can_Tx_Msg+0x42>
	} else {
		CAN1->sTxMailBox[0].TIR |= (u_int) (msg->id << 3) | CAN_ID_EXT;
 8000386:	4b33      	ldr	r3, [pc, #204]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000388:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	00db      	lsls	r3, r3, #3
 8000392:	4930      	ldr	r1, [pc, #192]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000394:	4313      	orrs	r3, r2
 8000396:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
	}

	if (msg->type == DATA_FRAME)  {                 // DATA FRAME
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d106      	bne.n	80003b0 <Can_Tx_Msg+0x58>
	    CAN1->sTxMailBox[0].TIR |= CAN_RTR_DATA;
 80003a2:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <Can_Tx_Msg+0xfc>)
 80003a4:	4a2b      	ldr	r2, [pc, #172]	; (8000454 <Can_Tx_Msg+0xfc>)
 80003a6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80003aa:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 80003ae:	e005      	b.n	80003bc <Can_Tx_Msg+0x64>
	} else {                                        // REMOTE FRAME
	    CAN1->sTxMailBox[0].TIR |= CAN_RTR_REMOTE;
 80003b0:	4b28      	ldr	r3, [pc, #160]	; (8000454 <Can_Tx_Msg+0xfc>)
 80003b2:	4a28      	ldr	r2, [pc, #160]	; (8000454 <Can_Tx_Msg+0xfc>)
 80003b4:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80003b8:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	}

	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	79db      	ldrb	r3, [r3, #7]
 80003c0:	061a      	lsls	r2, r3, #24
	                          ((u_int)msg->data[2] << 16) |
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	799b      	ldrb	r3, [r3, #6]
 80003c6:	041b      	lsls	r3, r3, #16
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80003c8:	431a      	orrs	r2, r3
	                          ((u_int)msg->data[1] <<  8) |
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	021b      	lsls	r3, r3, #8
	                          ((u_int)msg->data[2] << 16) |
 80003d0:	4313      	orrs	r3, r2
	                          ((u_int)msg->data[0]));
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	7912      	ldrb	r2, [r2, #4]
 80003d6:	4611      	mov	r1, r2
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80003d8:	4a1e      	ldr	r2, [pc, #120]	; (8000454 <Can_Tx_Msg+0xfc>)
	                          ((u_int)msg->data[1] <<  8) |
 80003da:	430b      	orrs	r3, r1
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 80003dc:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	7adb      	ldrb	r3, [r3, #11]
 80003e4:	061a      	lsls	r2, r3, #24
	                          ((u_int)msg->data[6] << 16) |
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	7a9b      	ldrb	r3, [r3, #10]
 80003ea:	041b      	lsls	r3, r3, #16
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 80003ec:	431a      	orrs	r2, r3
	                          ((u_int)msg->data[5] <<  8) |
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	7a5b      	ldrb	r3, [r3, #9]
 80003f2:	021b      	lsls	r3, r3, #8
	                          ((u_int)msg->data[6] << 16) |
 80003f4:	4313      	orrs	r3, r2
	                          ((u_int)msg->data[4]));
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	7a12      	ldrb	r2, [r2, #8]
 80003fa:	4611      	mov	r1, r2
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 80003fc:	4a15      	ldr	r2, [pc, #84]	; (8000454 <Can_Tx_Msg+0xfc>)
	                          ((u_int)msg->data[5] <<  8) |
 80003fe:	430b      	orrs	r3, r1
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 8000400:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c

	CAN1->sTxMailBox[0].TDTR &= ~CAN_TDT1R_DLC;
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000406:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800040a:	4a12      	ldr	r2, [pc, #72]	; (8000454 <Can_Tx_Msg+0xfc>)
 800040c:	f023 030f 	bic.w	r3, r3, #15
 8000410:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	CAN1->sTxMailBox[0].TDTR |=  (msg->len & CAN_TDT0R_DLC);
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000416:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	f003 030f 	and.w	r3, r3, #15
 8000422:	490c      	ldr	r1, [pc, #48]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000424:	4313      	orrs	r3, r2
 8000426:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184

	CAN1->IER |= CAN_IER_TMEIE;                      // enable  TME interrupt
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <Can_Tx_Msg+0xfc>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a09      	ldr	r2, [pc, #36]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6153      	str	r3, [r2, #20]
	CAN1->sTxMailBox[0].TIR |=  CAN_TI0R_TXRQ;       // transmit message
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <Can_Tx_Msg+0xfc>)
 8000438:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800043c:	4a05      	ldr	r2, [pc, #20]	; (8000454 <Can_Tx_Msg+0xfc>)
 800043e:	f043 0301 	orr.w	r3, r3, #1
 8000442:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40006400 	.word	0x40006400

08000458 <Can_Rx_Msg>:


void Can_Rx_Msg(CAN_MESSAGE * msg) {
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]

	if ((CAN1->sFIFOMailBox[0].RIR & CAN_ID_EXT) == 0) { // Standard ID
 8000460:	4b2e      	ldr	r3, [pc, #184]	; (800051c <Can_Rx_Msg+0xc4>)
 8000462:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->format = STANDARD_FORMAT;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
	    msg->id     = (uint32_t)0x000007FF & (CAN1->sFIFOMailBox[0].RIR >> 21);
 800046c:	4b2b      	ldr	r3, [pc, #172]	; (800051c <Can_Rx_Msg+0xc4>)
 800046e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000472:	0d5b      	lsrs	r3, r3, #21
 8000474:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	601a      	str	r2, [r3, #0]
	  }  else  {                                          // Extended ID
	    msg->format = EXTENDED_FORMAT;
	    msg->id     = (uint32_t)0x0003FFFF & (CAN1->sFIFOMailBox[0].RIR >> 3);
	  }
	                                                  // Read type information
	  if ((CAN1->sFIFOMailBox[0].RIR & CAN_RTR_REMOTE) == 0) {
 800047c:	4b27      	ldr	r3, [pc, #156]	; (800051c <Can_Rx_Msg+0xc4>)
 800047e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->type =   DATA_FRAME;                     // DATA   FRAME
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
	  }  else  {
	    msg->type = REMOTE_FRAME;                     // REMOTE FRAME
	  }

	  msg->len = (char)0x0000000F & CAN1->sFIFOMailBox[0].RDTR;
 8000488:	4b24      	ldr	r3, [pc, #144]	; (800051c <Can_Rx_Msg+0xc4>)
 800048a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800048e:	f003 020f 	and.w	r2, r3, #15
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	60da      	str	r2, [r3, #12]
	                                                    // Read data
	  msg->data[0] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR);
 8000496:	4b21      	ldr	r3, [pc, #132]	; (800051c <Can_Rx_Msg+0xc4>)
 8000498:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800049c:	b2da      	uxtb	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	711a      	strb	r2, [r3, #4]
	  msg->data[1] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 8);
 80004a2:	4b1e      	ldr	r3, [pc, #120]	; (800051c <Can_Rx_Msg+0xc4>)
 80004a4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80004a8:	0a1b      	lsrs	r3, r3, #8
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	715a      	strb	r2, [r3, #5]
	  msg->data[2] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 16);
 80004b0:	4b1a      	ldr	r3, [pc, #104]	; (800051c <Can_Rx_Msg+0xc4>)
 80004b2:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80004b6:	0c1b      	lsrs	r3, r3, #16
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	719a      	strb	r2, [r3, #6]
	  msg->data[3] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 24);
 80004be:	4b17      	ldr	r3, [pc, #92]	; (800051c <Can_Rx_Msg+0xc4>)
 80004c0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80004c4:	0e1b      	lsrs	r3, r3, #24
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	71da      	strb	r2, [r3, #7]

	  msg->data[4] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR);
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <Can_Rx_Msg+0xc4>)
 80004ce:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	721a      	strb	r2, [r3, #8]
	  msg->data[5] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 8);
 80004d8:	4b10      	ldr	r3, [pc, #64]	; (800051c <Can_Rx_Msg+0xc4>)
 80004da:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80004de:	0a1b      	lsrs	r3, r3, #8
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	725a      	strb	r2, [r3, #9]
	  msg->data[6] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 16);
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <Can_Rx_Msg+0xc4>)
 80004e8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80004ec:	0c1b      	lsrs	r3, r3, #16
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	729a      	strb	r2, [r3, #10]
	  msg->data[7] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 24);
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <Can_Rx_Msg+0xc4>)
 80004f6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 80004fa:	0e1b      	lsrs	r3, r3, #24
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	72da      	strb	r2, [r3, #11]

	  CAN1->RF0R |= CAN_RF0R_RFOM0;                    // Release FIFO 0 output mailbox
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <Can_Rx_Msg+0xc4>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <Can_Rx_Msg+0xc4>)
 8000508:	f043 0320 	orr.w	r3, r3, #32
 800050c:	60d3      	str	r3, [r2, #12]

}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40006400 	.word	0x40006400

08000520 <Can_Set_Filter>:


void Can_Set_Filter(uint id, char format) {
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	70fb      	strb	r3, [r7, #3]

	static unsigned short CAN_filterIdx = 0;
	uint CAN_msgId = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]

	  if (CAN_filterIdx > 13) {                       // check if Filter Memory is full
 8000530:	4b3f      	ldr	r3, [pc, #252]	; (8000630 <Can_Set_Filter+0x110>)
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	2b0d      	cmp	r3, #13
 8000536:	d874      	bhi.n	8000622 <Can_Set_Filter+0x102>
	    return;
	  }
	                                                  // Setup identifier information
	  if (format == STANDARD_FORMAT)  {               // Standard ID
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d105      	bne.n	800054a <Can_Set_Filter+0x2a>
	      CAN_msgId  |= (unsigned int)(id << 21) | CAN_ID_STD;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	055b      	lsls	r3, r3, #21
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	4313      	orrs	r3, r2
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	e004      	b.n	8000554 <Can_Set_Filter+0x34>
	  }  else  {                                      // Extended ID
	      CAN_msgId  |= (unsigned int)(id <<  3) | CAN_ID_EXT;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	4313      	orrs	r3, r2
 8000552:	60fb      	str	r3, [r7, #12]
	  }

	  CAN1->FMR  |=  CAN_FMR_FINIT;                    // set Initialisation mode for filter banks
 8000554:	4b37      	ldr	r3, [pc, #220]	; (8000634 <Can_Set_Filter+0x114>)
 8000556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800055a:	4a36      	ldr	r2, [pc, #216]	; (8000634 <Can_Set_Filter+0x114>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	  CAN1->FA1R &=  ~(unsigned int)(1 << CAN_filterIdx); // deactivate filter
 8000564:	4b33      	ldr	r3, [pc, #204]	; (8000634 <Can_Set_Filter+0x114>)
 8000566:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800056a:	4b31      	ldr	r3, [pc, #196]	; (8000630 <Can_Set_Filter+0x110>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	4619      	mov	r1, r3
 8000570:	2301      	movs	r3, #1
 8000572:	408b      	lsls	r3, r1
 8000574:	43db      	mvns	r3, r3
 8000576:	492f      	ldr	r1, [pc, #188]	; (8000634 <Can_Set_Filter+0x114>)
 8000578:	4013      	ands	r3, r2
 800057a:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	                                                  // initialize filter
	  CAN1->FS1R |= (unsigned int)(1 << CAN_filterIdx);// set 32-bit scale configuration
 800057e:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <Can_Set_Filter+0x114>)
 8000580:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000584:	4a2a      	ldr	r2, [pc, #168]	; (8000630 <Can_Set_Filter+0x110>)
 8000586:	8812      	ldrh	r2, [r2, #0]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	4a28      	ldr	r2, [pc, #160]	; (8000634 <Can_Set_Filter+0x114>)
 8000592:	430b      	orrs	r3, r1
 8000594:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	  CAN1->FM1R |= (unsigned int)(1 << CAN_filterIdx);// set 2 32-bit identifier list mode
 8000598:	4b26      	ldr	r3, [pc, #152]	; (8000634 <Can_Set_Filter+0x114>)
 800059a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800059e:	4a24      	ldr	r2, [pc, #144]	; (8000630 <Can_Set_Filter+0x110>)
 80005a0:	8812      	ldrh	r2, [r2, #0]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a22      	ldr	r2, [pc, #136]	; (8000634 <Can_Set_Filter+0x114>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	  CAN1->sFilterRegister[CAN_filterIdx].FR1 = CAN_msgId; //  32-bit identifier
 80005b2:	4920      	ldr	r1, [pc, #128]	; (8000634 <Can_Set_Filter+0x114>)
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <Can_Set_Filter+0x110>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	3348      	adds	r3, #72	; 0x48
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	  CAN1->sFilterRegister[CAN_filterIdx].FR2 = CAN_msgId; //  32-bit identifier
 80005c0:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <Can_Set_Filter+0x114>)
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <Can_Set_Filter+0x110>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	3348      	adds	r3, #72	; 0x48
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	4413      	add	r3, r2
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	605a      	str	r2, [r3, #4]

	  CAN1->FFA1R &= ~(unsigned int)(1 << CAN_filterIdx);  // assign filter to FIFO 0
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <Can_Set_Filter+0x114>)
 80005d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <Can_Set_Filter+0x110>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	2301      	movs	r3, #1
 80005de:	408b      	lsls	r3, r1
 80005e0:	43db      	mvns	r3, r3
 80005e2:	4914      	ldr	r1, [pc, #80]	; (8000634 <Can_Set_Filter+0x114>)
 80005e4:	4013      	ands	r3, r2
 80005e6:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
	  CAN1->FA1R  |=  (unsigned int)(1 << CAN_filterIdx);  // activate filter
 80005ea:	4b12      	ldr	r3, [pc, #72]	; (8000634 <Can_Set_Filter+0x114>)
 80005ec:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80005f0:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <Can_Set_Filter+0x110>)
 80005f2:	8812      	ldrh	r2, [r2, #0]
 80005f4:	4611      	mov	r1, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	408a      	lsls	r2, r1
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <Can_Set_Filter+0x114>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	  CAN1->FMR &= ~CAN_FMR_FINIT;                     // reset Initialisation mode for filter banks
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <Can_Set_Filter+0x114>)
 8000606:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <Can_Set_Filter+0x114>)
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	  CAN_filterIdx += 1;                             // increase filter index
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <Can_Set_Filter+0x110>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	3301      	adds	r3, #1
 800061a:	b29a      	uxth	r2, r3
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <Can_Set_Filter+0x110>)
 800061e:	801a      	strh	r2, [r3, #0]
 8000620:	e000      	b.n	8000624 <Can_Set_Filter+0x104>
	    return;
 8000622:	bf00      	nop

}
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000088 	.word	0x20000088
 8000634:	40006400 	.word	0x40006400

08000638 <registerCanMsgRxCallback>:


void registerCanMsgRxCallback(void (*callback)(CAN_MESSAGE msg)) {
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	canMsgReceivedCallback = callback;
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <registerCanMsgRxCallback+0x1c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000080 	.word	0x20000080

08000658 <CAN1_TX_IRQHandler>:
void registerCanMsgTxCallback(void (*callback)(void)) {
	canMsgTransmitCallback = callback;
}


__attribute__((interrupt)) void CAN1_TX_IRQHandler (void)  {
 8000658:	4668      	mov	r0, sp
 800065a:	f020 0107 	bic.w	r1, r0, #7
 800065e:	468d      	mov	sp, r1
 8000660:	b589      	push	{r0, r3, r7, lr}
 8000662:	af00      	add	r7, sp, #0
	if (CAN1->TSR & CAN_TSR_RQCP0) {                 // request completed mbx 0
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <CAN1_TX_IRQHandler+0x4c>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00b      	beq.n	8000688 <CAN1_TX_IRQHandler+0x30>
	    CAN1->TSR |= CAN_TSR_RQCP0;                  // reset request complete mbx 0
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <CAN1_TX_IRQHandler+0x4c>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <CAN1_TX_IRQHandler+0x4c>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6093      	str	r3, [r2, #8]
	    CAN1->IER &= ~CAN_IER_TMEIE;                 // disable  TME interrupt
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <CAN1_TX_IRQHandler+0x4c>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <CAN1_TX_IRQHandler+0x4c>)
 8000682:	f023 0301 	bic.w	r3, r3, #1
 8000686:	6153      	str	r3, [r2, #20]
	}
	// Tx Interrupt Action
	if(canMsgTransmitCallback) canMsgTransmitCallback();
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <CAN1_TX_IRQHandler+0x50>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <CAN1_TX_IRQHandler+0x3e>
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <CAN1_TX_IRQHandler+0x50>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4798      	blx	r3
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 800069e:	4685      	mov	sp, r0
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40006400 	.word	0x40006400
 80006a8:	20000084 	.word	0x20000084

080006ac <CAN1_RX0_IRQHandler>:



__attribute__((interrupt)) void CAN1_RX0_IRQHandler (void) {
 80006ac:	4668      	mov	r0, sp
 80006ae:	f020 0107 	bic.w	r1, r0, #7
 80006b2:	468d      	mov	sp, r1
 80006b4:	b591      	push	{r0, r4, r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af02      	add	r7, sp, #8

	CAN_MESSAGE can_rx_message;

	if (CAN1->RF0R & CAN_RF0R_FMP0) {			      // message pending?
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <CAN1_RX0_IRQHandler+0x50>)
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	f003 0303 	and.w	r3, r3, #3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d013      	beq.n	80006ee <CAN1_RX0_IRQHandler+0x42>
		Can_Rx_Msg(&can_rx_message);                  // read the message
 80006c6:	463b      	mov	r3, r7
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fec5 	bl	8000458 <Can_Rx_Msg>
		// Rx Interrupt Action
		if (canMsgReceivedCallback) canMsgReceivedCallback(can_rx_message);
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <CAN1_RX0_IRQHandler+0x54>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00b      	beq.n	80006ee <CAN1_RX0_IRQHandler+0x42>
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <CAN1_RX0_IRQHandler+0x54>)
 80006d8:	681c      	ldr	r4, [r3, #0]
 80006da:	466a      	mov	r2, sp
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80006e8:	463b      	mov	r3, r7
 80006ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ec:	47a0      	blx	r4
	}

}
 80006ee:	bf00      	nop
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	e8bd 4091 	ldmia.w	sp!, {r0, r4, r7, lr}
 80006f8:	4685      	mov	sp, r0
 80006fa:	4770      	bx	lr
 80006fc:	40006400 	.word	0x40006400
 8000700:	20000080 	.word	0x20000080

08000704 <__NVIC_EnableIRQ>:
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	2b00      	cmp	r3, #0
 8000714:	db0b      	blt.n	800072e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	f003 021f 	and.w	r2, r3, #31
 800071c:	4907      	ldr	r1, [pc, #28]	; (800073c <__NVIC_EnableIRQ+0x38>)
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	095b      	lsrs	r3, r3, #5
 8000724:	2001      	movs	r0, #1
 8000726:	fa00 f202 	lsl.w	r2, r0, r2
 800072a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000e100 	.word	0xe000e100

08000740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db0a      	blt.n	800076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	490c      	ldr	r1, [pc, #48]	; (800078c <__NVIC_SetPriority+0x4c>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000768:	e00a      	b.n	8000780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <__NVIC_SetPriority+0x50>)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	3b04      	subs	r3, #4
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	440b      	add	r3, r1
 800077e:	761a      	strb	r2, [r3, #24]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a4:	d301      	bcc.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00f      	b.n	80007ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <SysTick_Config+0x40>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	210f      	movs	r1, #15
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f7ff ffc2 	bl	8000740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SysTick_Config+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <SysTick_Config+0x40>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <SystemRegisterCFG>:
 */
#include "config.h"



void SystemRegisterCFG(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

	// *** Configure System Clock (36MHz for each system BUS) ***
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;		// HSE as an input to the PLL loop
 80007dc:	4b62      	ldr	r3, [pc, #392]	; (8000968 <SystemRegisterCFG+0x190>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4a61      	ldr	r2, [pc, #388]	; (8000968 <SystemRegisterCFG+0x190>)
 80007e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007e6:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP_1;		// PLLP DIV = /2
 80007e8:	4b5f      	ldr	r3, [pc, #380]	; (8000968 <SystemRegisterCFG+0x190>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	4a5e      	ldr	r2, [pc, #376]	; (8000968 <SystemRegisterCFG+0x190>)
 80007ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80007f2:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP_0;
 80007f4:	4b5c      	ldr	r3, [pc, #368]	; (8000968 <SystemRegisterCFG+0x190>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	4a5b      	ldr	r2, [pc, #364]	; (8000968 <SystemRegisterCFG+0x190>)
 80007fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007fe:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b001001000 << 6);			// Multiplication factor PLLN = 72
 8000800:	4b59      	ldr	r3, [pc, #356]	; (8000968 <SystemRegisterCFG+0x190>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	4a58      	ldr	r2, [pc, #352]	; (8000968 <SystemRegisterCFG+0x190>)
 8000806:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 800080a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b000100);					// PLLM DIV = /4
 800080c:	4b56      	ldr	r3, [pc, #344]	; (8000968 <SystemRegisterCFG+0x190>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	4a55      	ldr	r2, [pc, #340]	; (8000968 <SystemRegisterCFG+0x190>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;				// System Clock MUX switched to PLL
 8000818:	4b53      	ldr	r3, [pc, #332]	; (8000968 <SystemRegisterCFG+0x190>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	4a52      	ldr	r2, [pc, #328]	; (8000968 <SystemRegisterCFG+0x190>)
 800081e:	f043 0302 	orr.w	r3, r3, #2
 8000822:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (RCC_CFGR_HPRE_DIV2 << RCC_CFGR_HPRE_Pos);		// AHB DIV = /2
 8000824:	4b50      	ldr	r3, [pc, #320]	; (8000968 <SystemRegisterCFG+0x190>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	4a4f      	ldr	r2, [pc, #316]	; (8000968 <SystemRegisterCFG+0x190>)
 800082a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800082e:	6093      	str	r3, [r2, #8]
	RCC->CR |= RCC_CR_HSEON;	// HSE ON
 8000830:	4b4d      	ldr	r3, [pc, #308]	; (8000968 <SystemRegisterCFG+0x190>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a4c      	ldr	r2, [pc, #304]	; (8000968 <SystemRegisterCFG+0x190>)
 8000836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800083a:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); // Wait for HSE ON
 800083c:	bf00      	nop
 800083e:	4b4a      	ldr	r3, [pc, #296]	; (8000968 <SystemRegisterCFG+0x190>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f9      	beq.n	800083e <SystemRegisterCFG+0x66>
	RCC->CR |= RCC_CR_PLLON;	// PLL ON
 800084a:	4b47      	ldr	r3, [pc, #284]	; (8000968 <SystemRegisterCFG+0x190>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a46      	ldr	r2, [pc, #280]	; (8000968 <SystemRegisterCFG+0x190>)
 8000850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000854:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLRDY)); // Check if PLL not locked
 8000856:	bf00      	nop
 8000858:	4b43      	ldr	r3, [pc, #268]	; (8000968 <SystemRegisterCFG+0x190>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f9      	bne.n	8000858 <SystemRegisterCFG+0x80>
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Check for a correct source set
 8000864:	bf00      	nop
 8000866:	4b40      	ldr	r3, [pc, #256]	; (8000968 <SystemRegisterCFG+0x190>)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	f003 030c 	and.w	r3, r3, #12
 800086e:	2b08      	cmp	r3, #8
 8000870:	d1f9      	bne.n	8000866 <SystemRegisterCFG+0x8e>
	RCC->CR &= ~RCC_CR_HSION;	// 16MHz HSI OFF
 8000872:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <SystemRegisterCFG+0x190>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a3c      	ldr	r2, [pc, #240]	; (8000968 <SystemRegisterCFG+0x190>)
 8000878:	f023 0301 	bic.w	r3, r3, #1
 800087c:	6013      	str	r3, [r2, #0]


	// RCC Configuration
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;	// GPIO Clock
 800087e:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <SystemRegisterCFG+0x190>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a39      	ldr	r2, [pc, #228]	; (8000968 <SystemRegisterCFG+0x190>)
 8000884:	f043 0307 	orr.w	r3, r3, #7
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;		// SPI1 clock
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <SystemRegisterCFG+0x190>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	4a36      	ldr	r2, [pc, #216]	; (8000968 <SystemRegisterCFG+0x190>)
 8000890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000894:	6453      	str	r3, [r2, #68]	; 0x44

	// Standard GPIO Config (LEDs)
	GPIOC->MODER |= GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE11_0 | GPIO_MODER_MODE12_0;	// STM LEDs output
 8000896:	4b35      	ldr	r3, [pc, #212]	; (800096c <SystemRegisterCFG+0x194>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a34      	ldr	r2, [pc, #208]	; (800096c <SystemRegisterCFG+0x194>)
 800089c:	f043 73a2 	orr.w	r3, r3, #21233664	; 0x1440000
 80008a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a4:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD8 | GPIO_ODR_OD9 | GPIO_ODR_OD11 | GPIO_ODR_OD12;		// STM LEDs OFF
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <SystemRegisterCFG+0x194>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a30      	ldr	r2, [pc, #192]	; (800096c <SystemRegisterCFG+0x194>)
 80008ac:	f443 53d8 	orr.w	r3, r3, #6912	; 0x1b00
 80008b0:	6153      	str	r3, [r2, #20]

	// W6100 External Reset config
	GPIOC->MODER |= GPIO_MODER_MODE4_0;		// Output
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <SystemRegisterCFG+0x194>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a2d      	ldr	r2, [pc, #180]	; (800096c <SystemRegisterCFG+0x194>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008bc:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD4;				// Level high (reset disable)
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <SystemRegisterCFG+0x194>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a2a      	ldr	r2, [pc, #168]	; (800096c <SystemRegisterCFG+0x194>)
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	6153      	str	r3, [r2, #20]

	// W6100 External Interrupt pin configuration
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;	// Enable clock for SYSCFG (Used for EXTI ISR)
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <SystemRegisterCFG+0x190>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a26      	ldr	r2, [pc, #152]	; (8000968 <SystemRegisterCFG+0x190>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008d6:	f3bf 8f4f 	dsb	sy
	__DSB();
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PC;	// PC5 pin selected
 80008da:	4b25      	ldr	r3, [pc, #148]	; (8000970 <SystemRegisterCFG+0x198>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	4a24      	ldr	r2, [pc, #144]	; (8000970 <SystemRegisterCFG+0x198>)
 80008e0:	f043 0320 	orr.w	r3, r3, #32
 80008e4:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_IM5;						// Interrupt masked for line Px5
 80008e6:	4b23      	ldr	r3, [pc, #140]	; (8000974 <SystemRegisterCFG+0x19c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a22      	ldr	r2, [pc, #136]	; (8000974 <SystemRegisterCFG+0x19c>)
 80008ec:	f043 0320 	orr.w	r3, r3, #32
 80008f0:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR5;					// Falling edge for line Px5
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <SystemRegisterCFG+0x19c>)
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	4a1f      	ldr	r2, [pc, #124]	; (8000974 <SystemRegisterCFG+0x19c>)
 80008f8:	f043 0320 	orr.w	r3, r3, #32
 80008fc:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008fe:	2017      	movs	r0, #23
 8000900:	f7ff ff00 	bl	8000704 <__NVIC_EnableIRQ>


	// SPI GPIO Config
	GPIOA->MODER |= GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1;		// SPI1 AFIO Set (NSS Software)
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <SystemRegisterCFG+0x1a0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a1b      	ldr	r2, [pc, #108]	; (8000978 <SystemRegisterCFG+0x1a0>)
 800090a:	f443 4329 	orr.w	r3, r3, #43264	; 0xa900
 800090e:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_OD4;		// Slave select HIGH (disable)
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <SystemRegisterCFG+0x1a0>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	4a18      	ldr	r2, [pc, #96]	; (8000978 <SystemRegisterCFG+0x1a0>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	6153      	str	r3, [r2, #20]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL5_0 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL6_0 |
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <SystemRegisterCFG+0x1a0>)
 800091e:	6a1b      	ldr	r3, [r3, #32]
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <SystemRegisterCFG+0x1a0>)
 8000922:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000926:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800092a:	6213      	str	r3, [r2, #32]
					 GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL7_0 | GPIO_AFRL_AFRL7_2;			// SPI1 AFIO => SPI1

	// SPI Config
	SPI1->CR1 |= SPI_CR1_SPE | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_MSTR;
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <SystemRegisterCFG+0x1a4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a12      	ldr	r2, [pc, #72]	; (800097c <SystemRegisterCFG+0x1a4>)
 8000932:	f443 7351 	orr.w	r3, r3, #836	; 0x344
 8000936:	6013      	str	r3, [r2, #0]

	// IO-Link Config
	GPIOB->MODER |= GPIO_MODER_MODER14_0;		// EN_L+ pin: output
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <SystemRegisterCFG+0x1a8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a10      	ldr	r2, [pc, #64]	; (8000980 <SystemRegisterCFG+0x1a8>)
 800093e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000942:	6013      	str	r3, [r2, #0]
	GPIOB->PUPDR |= GPIO_PUPDR_PUPD14_1;		// EN_L+ pin: pull down
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <SystemRegisterCFG+0x1a8>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <SystemRegisterCFG+0x1a8>)
 800094a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800094e:	60d3      	str	r3, [r2, #12]

	SysTick_Config(32000000 / 1000);
 8000950:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000954:	f7ff ff1e 	bl	8000794 <SysTick_Config>
	// Reset the SysTick counter value.
	SysTick->VAL = 0UL;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <SystemRegisterCFG+0x1ac>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
	// Set SysTick source and IRQ.
	SysTick->CTRL = (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk);
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <SystemRegisterCFG+0x1ac>)
 8000960:	2206      	movs	r2, #6
 8000962:	601a      	str	r2, [r3, #0]


}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800
 800096c:	40020800 	.word	0x40020800
 8000970:	40013800 	.word	0x40013800
 8000974:	40013c00 	.word	0x40013c00
 8000978:	40020000 	.word	0x40020000
 800097c:	40013000 	.word	0x40013000
 8000980:	40020400 	.word	0x40020400
 8000984:	e000e010 	.word	0xe000e010

08000988 <SysTick_Handler>:
	// Disable the SysTick timer
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}


__attribute__((interrupt)) void SysTick_Handler(void){
 8000988:	4668      	mov	r0, sp
 800098a:	f020 0107 	bic.w	r1, r0, #7
 800098e:	468d      	mov	sp, r1
 8000990:	b481      	push	{r0, r7}
 8000992:	af00      	add	r7, sp, #0
	delay++;
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Handler+0x24>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	b29b      	uxth	r3, r3
 800099a:	3301      	adds	r3, #1
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b03      	ldr	r3, [pc, #12]	; (80009ac <SysTick_Handler+0x24>)
 80009a0:	801a      	strh	r2, [r3, #0]
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc81      	pop	{r0, r7}
 80009a8:	4685      	mov	sp, r0
 80009aa:	4770      	bx	lr
 80009ac:	200000a4 	.word	0x200000a4

080009b0 <canVariables>:

// CAN variables: array enum references
enum can_msg {can_on_msg, can_off_msg, can_brk_eng, can_brk_dsng};

// Define CAN variable structures below
void canVariables(CAN_MESSAGE * cmg) {
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

	strcpy(cmg[can_on_msg].data, "mb_0000");
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3304      	adds	r3, #4
 80009bc:	4931      	ldr	r1, [pc, #196]	; (8000a84 <canVariables+0xd4>)
 80009be:	461a      	mov	r2, r3
 80009c0:	460b      	mov	r3, r1
 80009c2:	cb03      	ldmia	r3!, {r0, r1}
 80009c4:	6010      	str	r0, [r2, #0]
 80009c6:	6051      	str	r1, [r2, #4]
	cmg[can_on_msg].format = STANDARD_FORMAT;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
	cmg[can_on_msg].type = DATA_FRAME;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
	cmg[can_on_msg].len = sizeof(cmg[can_on_msg]);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2218      	movs	r2, #24
 80009d8:	60da      	str	r2, [r3, #12]
	cmg[can_on_msg].id = ALL_NODES;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]

	strcpy(cmg[can_off_msg].data, "mb_0001");
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3318      	adds	r3, #24
 80009e4:	3304      	adds	r3, #4
 80009e6:	4928      	ldr	r1, [pc, #160]	; (8000a88 <canVariables+0xd8>)
 80009e8:	461a      	mov	r2, r3
 80009ea:	460b      	mov	r3, r1
 80009ec:	cb03      	ldmia	r3!, {r0, r1}
 80009ee:	6010      	str	r0, [r2, #0]
 80009f0:	6051      	str	r1, [r2, #4]
	cmg[can_off_msg].format = STANDARD_FORMAT;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3318      	adds	r3, #24
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
	cmg[can_off_msg].type = DATA_FRAME;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3318      	adds	r3, #24
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
	cmg[can_off_msg].len = sizeof(cmg[can_off_msg]);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3318      	adds	r3, #24
 8000a06:	2218      	movs	r2, #24
 8000a08:	60da      	str	r2, [r3, #12]
	cmg[can_off_msg].id = ALL_NODES;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	3318      	adds	r3, #24
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]

	strcpy(cmg[can_brk_eng].data, "mb_b_50");
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3330      	adds	r3, #48	; 0x30
 8000a16:	3304      	adds	r3, #4
 8000a18:	491c      	ldr	r1, [pc, #112]	; (8000a8c <canVariables+0xdc>)
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	cb03      	ldmia	r3!, {r0, r1}
 8000a20:	6010      	str	r0, [r2, #0]
 8000a22:	6051      	str	r1, [r2, #4]
	cmg[can_brk_eng].format = STANDARD_FORMAT;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3330      	adds	r3, #48	; 0x30
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
	cmg[can_brk_eng].type = DATA_FRAME;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3330      	adds	r3, #48	; 0x30
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
	cmg[can_brk_eng].len = sizeof(cmg[can_brk_eng]);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3330      	adds	r3, #48	; 0x30
 8000a38:	2218      	movs	r2, #24
 8000a3a:	60da      	str	r2, [r3, #12]
	cmg[can_brk_eng].id = BRAKING;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3330      	adds	r3, #48	; 0x30
 8000a40:	2202      	movs	r2, #2
 8000a42:	601a      	str	r2, [r3, #0]

	strcpy(cmg[can_brk_dsng].data, "mb_b_00");
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3348      	adds	r3, #72	; 0x48
 8000a48:	3304      	adds	r3, #4
 8000a4a:	4911      	ldr	r1, [pc, #68]	; (8000a90 <canVariables+0xe0>)
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	460b      	mov	r3, r1
 8000a50:	cb03      	ldmia	r3!, {r0, r1}
 8000a52:	6010      	str	r0, [r2, #0]
 8000a54:	6051      	str	r1, [r2, #4]
	cmg[can_brk_dsng].format = STANDARD_FORMAT;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3348      	adds	r3, #72	; 0x48
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
	cmg[can_brk_dsng].type = DATA_FRAME;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3348      	adds	r3, #72	; 0x48
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
	cmg[can_brk_dsng].len = sizeof(cmg[can_brk_dsng]);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3348      	adds	r3, #72	; 0x48
 8000a6a:	2218      	movs	r2, #24
 8000a6c:	60da      	str	r2, [r3, #12]
	cmg[can_brk_dsng].id = BRAKING;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3348      	adds	r3, #72	; 0x48
 8000a72:	2202      	movs	r2, #2
 8000a74:	601a      	str	r2, [r3, #0]

}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	080022cc 	.word	0x080022cc
 8000a88:	080022d4 	.word	0x080022d4
 8000a8c:	080022dc 	.word	0x080022dc
 8000a90:	080022e4 	.word	0x080022e4

08000a94 <dataPacketReceived>:


void dataPacketReceived(char * RxBuf) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	/* Reaction on Data Received */

	// Check Ethernet
		if (!strcmp(RxBuf, "systems_on\n")) {
 8000a9c:	4936      	ldr	r1, [pc, #216]	; (8000b78 <dataPacketReceived+0xe4>)
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff fb96 	bl	80001d0 <strcmp>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d110      	bne.n	8000acc <dataPacketReceived+0x38>
			GPIOB->ODR |= GPIO_ODR_OD14;
 8000aaa:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <dataPacketReceived+0xe8>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a33      	ldr	r2, [pc, #204]	; (8000b7c <dataPacketReceived+0xe8>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6153      	str	r3, [r2, #20]
			// Send msg to the client
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Systems Enabled\n", sizeof("Systems Enabled\n"));
 8000ab6:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <dataPacketReceived+0xec>)
 8000ab8:	6859      	ldr	r1, [r3, #4]
 8000aba:	2311      	movs	r3, #17
 8000abc:	4a31      	ldr	r2, [pc, #196]	; (8000b84 <dataPacketReceived+0xf0>)
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 fde9 	bl	8001696 <W6100_TransmitData>
			Can_Tx_Msg(&canMessages[can_on_msg]);
 8000ac4:	4830      	ldr	r0, [pc, #192]	; (8000b88 <dataPacketReceived+0xf4>)
 8000ac6:	f7ff fc47 	bl	8000358 <Can_Tx_Msg>
			// Send msg to the client
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Command unknown...\n", sizeof("Command unknown...\n"));
		}


}
 8000aca:	e051      	b.n	8000b70 <dataPacketReceived+0xdc>
		else if (!strcmp(RxBuf, "systems_off\n"))	{
 8000acc:	492f      	ldr	r1, [pc, #188]	; (8000b8c <dataPacketReceived+0xf8>)
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff fb7e 	bl	80001d0 <strcmp>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d110      	bne.n	8000afc <dataPacketReceived+0x68>
			GPIOB->ODR &= ~GPIO_ODR_OD14;
 8000ada:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <dataPacketReceived+0xe8>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	4a27      	ldr	r2, [pc, #156]	; (8000b7c <dataPacketReceived+0xe8>)
 8000ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ae4:	6153      	str	r3, [r2, #20]
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Systems Disabled\n", sizeof("Systems Disabled\n"));
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <dataPacketReceived+0xec>)
 8000ae8:	6859      	ldr	r1, [r3, #4]
 8000aea:	2312      	movs	r3, #18
 8000aec:	4a28      	ldr	r2, [pc, #160]	; (8000b90 <dataPacketReceived+0xfc>)
 8000aee:	2001      	movs	r0, #1
 8000af0:	f000 fdd1 	bl	8001696 <W6100_TransmitData>
			Can_Tx_Msg(&canMessages[can_off_msg]);
 8000af4:	4827      	ldr	r0, [pc, #156]	; (8000b94 <dataPacketReceived+0x100>)
 8000af6:	f7ff fc2f 	bl	8000358 <Can_Tx_Msg>
}
 8000afa:	e039      	b.n	8000b70 <dataPacketReceived+0xdc>
		else if (!strcmp(RxBuf, "systems_st\n"))	{
 8000afc:	4926      	ldr	r1, [pc, #152]	; (8000b98 <dataPacketReceived+0x104>)
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fb66 	bl	80001d0 <strcmp>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d107      	bne.n	8000b1a <dataPacketReceived+0x86>
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"System active\n", sizeof("System active\n"));
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <dataPacketReceived+0xec>)
 8000b0c:	6859      	ldr	r1, [r3, #4]
 8000b0e:	230f      	movs	r3, #15
 8000b10:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <dataPacketReceived+0x108>)
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 fdbf 	bl	8001696 <W6100_TransmitData>
}
 8000b18:	e02a      	b.n	8000b70 <dataPacketReceived+0xdc>
		else if (!strcmp(RxBuf, "brake_on\n"))	{
 8000b1a:	4921      	ldr	r1, [pc, #132]	; (8000ba0 <dataPacketReceived+0x10c>)
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fb57 	bl	80001d0 <strcmp>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10a      	bne.n	8000b3e <dataPacketReceived+0xaa>
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Brk on requested\n", sizeof("Brk on requested\n"));
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <dataPacketReceived+0xec>)
 8000b2a:	6859      	ldr	r1, [r3, #4]
 8000b2c:	2312      	movs	r3, #18
 8000b2e:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <dataPacketReceived+0x110>)
 8000b30:	2001      	movs	r0, #1
 8000b32:	f000 fdb0 	bl	8001696 <W6100_TransmitData>
			Can_Tx_Msg(&canMessages[can_brk_eng]);
 8000b36:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <dataPacketReceived+0x114>)
 8000b38:	f7ff fc0e 	bl	8000358 <Can_Tx_Msg>
}
 8000b3c:	e018      	b.n	8000b70 <dataPacketReceived+0xdc>
		else if (!strcmp(RxBuf, "brake_off\n"))	{
 8000b3e:	491b      	ldr	r1, [pc, #108]	; (8000bac <dataPacketReceived+0x118>)
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff fb45 	bl	80001d0 <strcmp>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d10a      	bne.n	8000b62 <dataPacketReceived+0xce>
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Brk off requested\n", sizeof("Brk off requested\n"));
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <dataPacketReceived+0xec>)
 8000b4e:	6859      	ldr	r1, [r3, #4]
 8000b50:	2313      	movs	r3, #19
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <dataPacketReceived+0x11c>)
 8000b54:	2001      	movs	r0, #1
 8000b56:	f000 fd9e 	bl	8001696 <W6100_TransmitData>
			Can_Tx_Msg(&canMessages[can_brk_dsng]);
 8000b5a:	4816      	ldr	r0, [pc, #88]	; (8000bb4 <dataPacketReceived+0x120>)
 8000b5c:	f7ff fbfc 	bl	8000358 <Can_Tx_Msg>
}
 8000b60:	e006      	b.n	8000b70 <dataPacketReceived+0xdc>
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Command unknown...\n", sizeof("Command unknown...\n"));
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <dataPacketReceived+0xec>)
 8000b64:	6859      	ldr	r1, [r3, #4]
 8000b66:	2314      	movs	r3, #20
 8000b68:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <dataPacketReceived+0x124>)
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f000 fd93 	bl	8001696 <W6100_TransmitData>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	080022ec 	.word	0x080022ec
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	20000108 	.word	0x20000108
 8000b84:	080022f8 	.word	0x080022f8
 8000b88:	200000a8 	.word	0x200000a8
 8000b8c:	0800230c 	.word	0x0800230c
 8000b90:	0800231c 	.word	0x0800231c
 8000b94:	200000c0 	.word	0x200000c0
 8000b98:	08002330 	.word	0x08002330
 8000b9c:	0800233c 	.word	0x0800233c
 8000ba0:	0800234c 	.word	0x0800234c
 8000ba4:	08002358 	.word	0x08002358
 8000ba8:	200000d8 	.word	0x200000d8
 8000bac:	0800236c 	.word	0x0800236c
 8000bb0:	08002378 	.word	0x08002378
 8000bb4:	200000f0 	.word	0x200000f0
 8000bb8:	0800238c 	.word	0x0800238c

08000bbc <canMessageReceived>:

void canMessageReceived(CAN_MESSAGE msg) {
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	f107 0c08 	add.w	ip, r7, #8
 8000bc6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	if (!strcmp(msg.data,"br_b_50")) {
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	4912      	ldr	r1, [pc, #72]	; (8000c18 <canMessageReceived+0x5c>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fafd 	bl	80001d0 <strcmp>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d106      	bne.n	8000bea <canMessageReceived+0x2e>
		W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Brk on: success\n", sizeof("Brk on: success\n"));
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <canMessageReceived+0x60>)
 8000bde:	6859      	ldr	r1, [r3, #4]
 8000be0:	2311      	movs	r3, #17
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <canMessageReceived+0x64>)
 8000be4:	2001      	movs	r0, #1
 8000be6:	f000 fd56 	bl	8001696 <W6100_TransmitData>
	}
	if (!strcmp(msg.data,"br_b_00")) {
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	490d      	ldr	r1, [pc, #52]	; (8000c24 <canMessageReceived+0x68>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff faed 	bl	80001d0 <strcmp>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d106      	bne.n	8000c0a <canMessageReceived+0x4e>
		W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)"Brk off: success\n", sizeof("Brk off: success\n"));
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <canMessageReceived+0x60>)
 8000bfe:	6859      	ldr	r1, [r3, #4]
 8000c00:	2312      	movs	r3, #18
 8000c02:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <canMessageReceived+0x6c>)
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fd46 	bl	8001696 <W6100_TransmitData>
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c12:	b004      	add	sp, #16
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	080023a0 	.word	0x080023a0
 8000c1c:	20000108 	.word	0x20000108
 8000c20:	080023a8 	.word	0x080023a8
 8000c24:	080023bc 	.word	0x080023bc
 8000c28:	080023c4 	.word	0x080023c4

08000c2c <serverOffResponse>:

void serverOffResponse(uint8_t sck_nbr) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR |= GPIO_ODR_OD8;
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <serverOffResponse+0x30>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <serverOffResponse+0x30>)
 8000c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c40:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~GPIO_ODR_OD9;
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <serverOffResponse+0x30>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <serverOffResponse+0x30>)
 8000c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c4c:	6153      	str	r3, [r2, #20]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40020800 	.word	0x40020800

08000c60 <serverStartResponse>:

void serverStartResponse(uint8_t sck_nbr) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR &= ~GPIO_ODR_OD8;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <serverStartResponse+0x30>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <serverStartResponse+0x30>)
 8000c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c74:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= GPIO_ODR_OD9;
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <serverStartResponse+0x30>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <serverStartResponse+0x30>)
 8000c7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c80:	6153      	str	r3, [r2, #20]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40020800 	.word	0x40020800

08000c94 <main>:
#include "can.h"
#include "control_sys.h"


int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0

	SystemRegisterCFG();			// Setup basic peripheral registers
 8000c9a:	f7ff fd9d 	bl	80007d8 <SystemRegisterCFG>
	canVariables(canMessages);		// Initialises CAN msg structures for the communication
 8000c9e:	4843      	ldr	r0, [pc, #268]	; (8000dac <main+0x118>)
 8000ca0:	f7ff fe86 	bl	80009b0 <canVariables>

	registerSocketCloseCallback(serverOffResponse);		// Register callback function for server close
 8000ca4:	4842      	ldr	r0, [pc, #264]	; (8000db0 <main+0x11c>)
 8000ca6:	f000 fdf5 	bl	8001894 <registerSocketCloseCallback>
	registerSocketOpenCallback(serverStartResponse);	// Register callback function for server start (socket connected)
 8000caa:	4842      	ldr	r0, [pc, #264]	; (8000db4 <main+0x120>)
 8000cac:	f000 fde2 	bl	8001874 <registerSocketOpenCallback>
	registerDataReceivedCallback(dataPacketReceived);	// Register callback function when data packets received
 8000cb0:	4841      	ldr	r0, [pc, #260]	; (8000db8 <main+0x124>)
 8000cb2:	f000 fdcf 	bl	8001854 <registerDataReceivedCallback>
	registerCanMsgRxCallback(canMessageReceived);
 8000cb6:	4841      	ldr	r0, [pc, #260]	; (8000dbc <main+0x128>)
 8000cb8:	f7ff fcbe 	bl	8000638 <registerCanMsgRxCallback>

	GPIOC->ODR &= ~GPIO_ODR_OD9;						// Server RED LED ON
 8000cbc:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <main+0x12c>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	4a3f      	ldr	r2, [pc, #252]	; (8000dc0 <main+0x12c>)
 8000cc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cc6:	6153      	str	r3, [r2, #20]

	W6100_INIT();										// Initialise W6100 with basic network information
 8000cc8:	f000 f9d3 	bl	8001072 <W6100_INIT>

	/* Socket 0 Configuration */
	uint8_t txTotalSize = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	75fb      	strb	r3, [r7, #23]
	uint8_t rxTotalSize = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	75bb      	strb	r3, [r7, #22]

	for (uint8_t i=0; i<7; i++) {
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	757b      	strb	r3, [r7, #21]
 8000cd8:	e016      	b.n	8000d08 <main+0x74>
		SPI_W6100_WSOCK(Sn_TX_BSR, 0x04, i, REG);		// assign 4 Kbytes TX buffer per SOCKET
 8000cda:	7d7a      	ldrb	r2, [r7, #21]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2104      	movs	r1, #4
 8000ce0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ce4:	f000 f986 	bl	8000ff4 <SPI_W6100_WSOCK>
		SPI_W6100_WSOCK(Sn_RX_BSR, 0x04, i, REG);		// assign 4 Kbytes RX buffer per SOCKET
 8000ce8:	7d7a      	ldrb	r2, [r7, #21]
 8000cea:	2301      	movs	r3, #1
 8000cec:	2104      	movs	r1, #4
 8000cee:	f44f 7008 	mov.w	r0, #544	; 0x220
 8000cf2:	f000 f97f 	bl	8000ff4 <SPI_W6100_WSOCK>
		txTotalSize += 0x04;
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	75fb      	strb	r3, [r7, #23]
		rxTotalSize += 0x04;
 8000cfc:	7dbb      	ldrb	r3, [r7, #22]
 8000cfe:	3304      	adds	r3, #4
 8000d00:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i=0; i<7; i++) {
 8000d02:	7d7b      	ldrb	r3, [r7, #21]
 8000d04:	3301      	adds	r3, #1
 8000d06:	757b      	strb	r3, [r7, #21]
 8000d08:	7d7b      	ldrb	r3, [r7, #21]
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d9e5      	bls.n	8000cda <main+0x46>
	}

	socket_dest_adr[0] = W6100_OpenTCPSocket(0, 5000);		// Open TCP socket 0 on port 5000 and return its destination address
 8000d0e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 fb66 	bl	80013e4 <W6100_OpenTCPSocket>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <main+0x130>)
 8000d1c:	601a      	str	r2, [r3, #0]
	socket_dest_adr[1] = W6100_OpenTCPSocket(1, 5010);		// Open TCP socket 1 on port 5000 and return its destination address
 8000d1e:	f241 3192 	movw	r1, #5010	; 0x1392
 8000d22:	2001      	movs	r0, #1
 8000d24:	f000 fb5e 	bl	80013e4 <W6100_OpenTCPSocket>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <main+0x130>)
 8000d2c:	605a      	str	r2, [r3, #4]


	CanInit();
 8000d2e:	f7ff facd 	bl	80002cc <CanInit>

	Can_Set_Filter(0x00, STANDARD_FORMAT);
 8000d32:	2100      	movs	r1, #0
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fbf3 	bl	8000520 <Can_Set_Filter>
	Can_Set_Filter(0x01, STANDARD_FORMAT);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f7ff fbef 	bl	8000520 <Can_Set_Filter>

	int idxx = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
	char buf[15] = "";
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	f8c3 2007 	str.w	r2, [r3, #7]
	/* MAIN Loop */
	while (1) {

		if (!(GPIOA->IDR & GPIO_IDR_ID3)) {
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <main+0x134>)
 8000d58:	691b      	ldr	r3, [r3, #16]
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d11d      	bne.n	8000d9e <main+0x10a>
			GPIOC->ODR &= ~GPIO_ODR_OD11;
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <main+0x12c>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <main+0x12c>)
 8000d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d6c:	6153      	str	r3, [r2, #20]
			idxx++;
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	3301      	adds	r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
			sprintf(buf, "cnt: %i\n", idxx);
 8000d74:	463b      	mov	r3, r7
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4914      	ldr	r1, [pc, #80]	; (8000dcc <main+0x138>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 fe9e 	bl	8001abc <siprintf>
			W6100_TransmitData(1, socket_dest_adr[1], (uint8_t*)buf, sizeof(buf));
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <main+0x130>)
 8000d82:	6859      	ldr	r1, [r3, #4]
 8000d84:	463a      	mov	r2, r7
 8000d86:	230f      	movs	r3, #15
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 fc84 	bl	8001696 <W6100_TransmitData>
			while(!(GPIOA->IDR & GPIO_IDR_ID3));
 8000d8e:	bf00      	nop
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <main+0x134>)
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0f9      	beq.n	8000d90 <main+0xfc>
 8000d9c:	e7db      	b.n	8000d56 <main+0xc2>

		} else {
			GPIOC->ODR |= GPIO_ODR_OD11;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <main+0x12c>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <main+0x12c>)
 8000da4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000da8:	6153      	str	r3, [r2, #20]
		if (!(GPIOA->IDR & GPIO_IDR_ID3)) {
 8000daa:	e7d4      	b.n	8000d56 <main+0xc2>
 8000dac:	200000a8 	.word	0x200000a8
 8000db0:	08000c2d 	.word	0x08000c2d
 8000db4:	08000c61 	.word	0x08000c61
 8000db8:	08000a95 	.word	0x08000a95
 8000dbc:	08000bbd 	.word	0x08000bbd
 8000dc0:	40020800 	.word	0x40020800
 8000dc4:	20000108 	.word	0x20000108
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	080023d8 	.word	0x080023d8

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f000 fe1e 	bl	8001a40 <__errno>
 8000e04:	4602      	mov	r2, r0
 8000e06:	230c      	movs	r3, #12
 8000e08:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20020000 	.word	0x20020000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	2000008c 	.word	0x2000008c
 8000e38:	20000118 	.word	0x20000118

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <SystemInit+0x28>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <SystemInit+0x28>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SystemInit+0x28>)
 8000e52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e56:	609a      	str	r2, [r3, #8]
#endif
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <SPI_Eth_SS>:
 */
#include "w6100.h"



void SPI_Eth_SS(uint8_t state) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	if (state) {
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <SPI_Eth_SS+0x1e>
		GPIOA->ODR &= ~GPIO_ODR_OD4;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <SPI_Eth_SS+0x3c>)
 8000e7a:	695b      	ldr	r3, [r3, #20]
 8000e7c:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <SPI_Eth_SS+0x3c>)
 8000e7e:	f023 0310 	bic.w	r3, r3, #16
 8000e82:	6153      	str	r3, [r2, #20]
	}
	else if (!state) {
		GPIOA->ODR |= GPIO_ODR_OD4;
	}
}
 8000e84:	e008      	b.n	8000e98 <SPI_Eth_SS+0x30>
	else if (!state) {
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d105      	bne.n	8000e98 <SPI_Eth_SS+0x30>
		GPIOA->ODR |= GPIO_ODR_OD4;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SPI_Eth_SS+0x3c>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <SPI_Eth_SS+0x3c>)
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	6153      	str	r3, [r2, #20]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <SPI_Eth_RT>:

uint8_t SPI_Eth_RT(uint8_t data) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	while(!(SPI1->SR & SPI_SR_TXE));	// Wait for Tx buffer empty
 8000eb2:	bf00      	nop
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <SPI_Eth_RT+0x40>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f9      	beq.n	8000eb4 <SPI_Eth_RT+0xc>
	SPI1->DR = data;
 8000ec0:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <SPI_Eth_RT+0x40>)
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_RXNE));	// Wait for Rx buffer not empty
 8000ec6:	bf00      	nop
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <SPI_Eth_RT+0x40>)
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f9      	beq.n	8000ec8 <SPI_Eth_RT+0x20>
	data = SPI1->DR;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SPI_Eth_RT+0x40>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	71fb      	strb	r3, [r7, #7]
	return data;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	40013000 	.word	0x40013000

08000eec <SPI_W6100_RCR>:

uint8_t SPI_W6100_RCR(uint16_t adr) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	80fb      	strh	r3, [r7, #6]
	/* See Page 76 - W6100 datasheet */
	uint8_t dat;
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff ffb6 	bl	8000e68 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	0a1b      	lsrs	r3, r3, #8
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ffcf 	bl	8000ea8 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ffca 	bl	8000ea8 <SPI_Eth_RT>
	SPI_Eth_RT(0x00);		// Send Control Byte	[CR, Read, Variable Length Data Mode]
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff ffc7 	bl	8000ea8 <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);	// Send garbage data to read the Common Register
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ffc4 	bl	8000ea8 <SPI_Eth_RT>
 8000f20:	4603      	mov	r3, r0
 8000f22:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(OFF);		// NSS Slave Disable
 8000f24:	2000      	movs	r0, #0
 8000f26:	f7ff ff9f 	bl	8000e68 <SPI_Eth_SS>
	return dat;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <SPI_W6100_WCR>:

void SPI_W6100_WCR(uint16_t adr, uint8_t val) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	80fb      	strh	r3, [r7, #6]
 8000f40:	4613      	mov	r3, r2
 8000f42:	717b      	strb	r3, [r7, #5]
	/* See Page 76 - W6100 datasheet */
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff ff8f 	bl	8000e68 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ffa8 	bl	8000ea8 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ffa3 	bl	8000ea8 <SPI_Eth_RT>
	SPI_Eth_RT(0x04);		// Send Control Byte	[CR, Write, Variable Length Data Mode]
 8000f62:	2004      	movs	r0, #4
 8000f64:	f7ff ffa0 	bl	8000ea8 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 8000f68:	797b      	ldrb	r3, [r7, #5]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff9c 	bl	8000ea8 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff ff79 	bl	8000e68 <SPI_Eth_SS>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <SPI_W6100_RSOCK>:

uint8_t SPI_W6100_RSOCK(uint16_t adr, uint8_t socket_nbr, uint8_t block) {
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	80fb      	strh	r3, [r7, #6]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	717b      	strb	r3, [r7, #5]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	713b      	strb	r3, [r7, #4]
	uint8_t dat;
	uint8_t cb_temp = 0x00;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 8000f94:	797b      	ldrb	r3, [r7, #5]
 8000f96:	015b      	lsls	r3, r3, #5
 8000f98:	b25a      	sxtb	r2, r3
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 8000fa4:	793b      	ldrb	r3, [r7, #4]
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	b25a      	sxtb	r2, r3
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff ff57 	bl	8000e68 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	0a1b      	lsrs	r3, r3, #8
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff70 	bl	8000ea8 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff6b 	bl	8000ea8 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff67 	bl	8000ea8 <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);		// Send garbage data to read the Common Register
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff ff64 	bl	8000ea8 <SPI_Eth_RT>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73bb      	strb	r3, [r7, #14]
	SPI_Eth_SS(OFF);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff ff3f 	bl	8000e68 <SPI_Eth_SS>
	return dat;
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <SPI_W6100_WSOCK>:

void SPI_W6100_WSOCK(uint16_t adr, uint8_t val, uint8_t socket_nbr, uint8_t block) {
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	4623      	mov	r3, r4
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	4603      	mov	r3, r0
 8001008:	717b      	strb	r3, [r7, #5]
 800100a:	460b      	mov	r3, r1
 800100c:	713b      	strb	r3, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	70fb      	strb	r3, [r7, #3]
	uint8_t cb_temp = 0x04;
 8001012:	2304      	movs	r3, #4
 8001014:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 8001016:	793b      	ldrb	r3, [r7, #4]
 8001018:	015b      	lsls	r3, r3, #5
 800101a:	b25a      	sxtb	r2, r3
 800101c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001020:	4313      	orrs	r3, r2
 8001022:	b25b      	sxtb	r3, r3
 8001024:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	b25a      	sxtb	r2, r3
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001030:	4313      	orrs	r3, r2
 8001032:	b25b      	sxtb	r3, r3
 8001034:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8001036:	2001      	movs	r0, #1
 8001038:	f7ff ff16 	bl	8000e68 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	0a1b      	lsrs	r3, r3, #8
 8001040:	b29b      	uxth	r3, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff2f 	bl	8000ea8 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff ff2a 	bl	8000ea8 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff26 	bl	8000ea8 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 800105c:	797b      	ldrb	r3, [r7, #5]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff22 	bl	8000ea8 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff feff 	bl	8000e68 <SPI_Eth_SS>
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}

08001072 <W6100_INIT>:

void W6100_INIT(void) {
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
	/* *** W6100 Init *** */
	SPI_W6100_WCR(NETLCKR, 0x3a);	// NETLCKR		Network settings unlock
 8001076:	213a      	movs	r1, #58	; 0x3a
 8001078:	f244 10f5 	movw	r0, #16885	; 0x41f5
 800107c:	f7ff ff5a 	bl	8000f34 <SPI_W6100_WCR>

	SPI_W6100_WCR(SHAR0, MAC0);	// SHAR[5:0]	Set hardware MAC address
 8001080:	2111      	movs	r1, #17
 8001082:	f244 1020 	movw	r0, #16672	; 0x4120
 8001086:	f7ff ff55 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR1, MAC1);
 800108a:	2122      	movs	r1, #34	; 0x22
 800108c:	f244 1021 	movw	r0, #16673	; 0x4121
 8001090:	f7ff ff50 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR2, MAC2);
 8001094:	2133      	movs	r1, #51	; 0x33
 8001096:	f244 1022 	movw	r0, #16674	; 0x4122
 800109a:	f7ff ff4b 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR3, MAC3);
 800109e:	21aa      	movs	r1, #170	; 0xaa
 80010a0:	f244 1023 	movw	r0, #16675	; 0x4123
 80010a4:	f7ff ff46 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR4, MAC4);
 80010a8:	21bb      	movs	r1, #187	; 0xbb
 80010aa:	f244 1024 	movw	r0, #16676	; 0x4124
 80010ae:	f7ff ff41 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR5, MAC5);
 80010b2:	21cc      	movs	r1, #204	; 0xcc
 80010b4:	f244 1025 	movw	r0, #16677	; 0x4125
 80010b8:	f7ff ff3c 	bl	8000f34 <SPI_W6100_WCR>

	SPI_W6100_WCR(GAR0, GIP0);	// GAR[0:3]		Gateway IP address 192.168.0.1
 80010bc:	21c0      	movs	r1, #192	; 0xc0
 80010be:	f244 1030 	movw	r0, #16688	; 0x4130
 80010c2:	f7ff ff37 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR1, GIP1);
 80010c6:	21a8      	movs	r1, #168	; 0xa8
 80010c8:	f244 1031 	movw	r0, #16689	; 0x4131
 80010cc:	f7ff ff32 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR2, GIP2);
 80010d0:	2100      	movs	r1, #0
 80010d2:	f244 1032 	movw	r0, #16690	; 0x4132
 80010d6:	f7ff ff2d 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR3, GIP3);
 80010da:	2101      	movs	r1, #1
 80010dc:	f244 1033 	movw	r0, #16691	; 0x4133
 80010e0:	f7ff ff28 	bl	8000f34 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUBR0, SBM0);	// SUBR[0:3]	Subnet mask address 255:255:255:0
 80010e4:	21ff      	movs	r1, #255	; 0xff
 80010e6:	f244 1034 	movw	r0, #16692	; 0x4134
 80010ea:	f7ff ff23 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR1, SBM1);
 80010ee:	21ff      	movs	r1, #255	; 0xff
 80010f0:	f244 1035 	movw	r0, #16693	; 0x4135
 80010f4:	f7ff ff1e 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR2, SBM2);
 80010f8:	21ff      	movs	r1, #255	; 0xff
 80010fa:	f244 1036 	movw	r0, #16694	; 0x4136
 80010fe:	f7ff ff19 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR3, SBM3);
 8001102:	2100      	movs	r1, #0
 8001104:	f244 1037 	movw	r0, #16695	; 0x4137
 8001108:	f7ff ff14 	bl	8000f34 <SPI_W6100_WCR>

	SPI_W6100_WCR(SIPR0, IPV0);	// SIPR[0:3]	IPv4 Source IP Address 192.168.0.27
 800110c:	21c0      	movs	r1, #192	; 0xc0
 800110e:	f244 1038 	movw	r0, #16696	; 0x4138
 8001112:	f7ff ff0f 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR1, IPV1);
 8001116:	21a8      	movs	r1, #168	; 0xa8
 8001118:	f244 1039 	movw	r0, #16697	; 0x4139
 800111c:	f7ff ff0a 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR2, IPV2);
 8001120:	2100      	movs	r1, #0
 8001122:	f244 103a 	movw	r0, #16698	; 0x413a
 8001126:	f7ff ff05 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR3, IPV3);
 800112a:	211b      	movs	r1, #27
 800112c:	f244 103b 	movw	r0, #16699	; 0x413b
 8001130:	f7ff ff00 	bl	8000f34 <SPI_W6100_WCR>

	SPI_W6100_WCR(LLAR0, 0xfe);	// Link Local Address, FE80::1322:33FF:FEAA:BBCC
 8001134:	21fe      	movs	r1, #254	; 0xfe
 8001136:	f244 1040 	movw	r0, #16704	; 0x4140
 800113a:	f7ff fefb 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR1, 0x80);
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	f244 1041 	movw	r0, #16705	; 0x4141
 8001144:	f7ff fef6 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR2, 0x00);
 8001148:	2100      	movs	r1, #0
 800114a:	f244 1042 	movw	r0, #16706	; 0x4142
 800114e:	f7ff fef1 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR3, 0x01);
 8001152:	2101      	movs	r1, #1
 8001154:	f244 1043 	movw	r0, #16707	; 0x4143
 8001158:	f7ff feec 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR4, 0x00);
 800115c:	2100      	movs	r1, #0
 800115e:	f244 1044 	movw	r0, #16708	; 0x4144
 8001162:	f7ff fee7 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR5, 0x00);
 8001166:	2100      	movs	r1, #0
 8001168:	f244 1045 	movw	r0, #16709	; 0x4145
 800116c:	f7ff fee2 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR6, 0x00);
 8001170:	2100      	movs	r1, #0
 8001172:	f244 1046 	movw	r0, #16710	; 0x4146
 8001176:	f7ff fedd 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR7, 0x00);
 800117a:	2100      	movs	r1, #0
 800117c:	f244 1047 	movw	r0, #16711	; 0x4147
 8001180:	f7ff fed8 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR8, 0x13);
 8001184:	2113      	movs	r1, #19
 8001186:	f244 1048 	movw	r0, #16712	; 0x4148
 800118a:	f7ff fed3 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR9, 0x22);
 800118e:	2122      	movs	r1, #34	; 0x22
 8001190:	f244 1049 	movw	r0, #16713	; 0x4149
 8001194:	f7ff fece 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR10, 0x33);
 8001198:	2133      	movs	r1, #51	; 0x33
 800119a:	f244 104a 	movw	r0, #16714	; 0x414a
 800119e:	f7ff fec9 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR11, 0xff);
 80011a2:	21ff      	movs	r1, #255	; 0xff
 80011a4:	f244 104b 	movw	r0, #16715	; 0x414b
 80011a8:	f7ff fec4 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR12, 0xfe);
 80011ac:	21fe      	movs	r1, #254	; 0xfe
 80011ae:	f244 104c 	movw	r0, #16716	; 0x414c
 80011b2:	f7ff febf 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR13, 0xaa);
 80011b6:	21aa      	movs	r1, #170	; 0xaa
 80011b8:	f244 104d 	movw	r0, #16717	; 0x414d
 80011bc:	f7ff feba 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR14, 0xbb);
 80011c0:	21bb      	movs	r1, #187	; 0xbb
 80011c2:	f244 104e 	movw	r0, #16718	; 0x414e
 80011c6:	f7ff feb5 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR15, 0xcc);
 80011ca:	21cc      	movs	r1, #204	; 0xcc
 80011cc:	f244 104f 	movw	r0, #16719	; 0x414f
 80011d0:	f7ff feb0 	bl	8000f34 <SPI_W6100_WCR>

	SPI_W6100_WCR(GUAR0, 0x20);	// Global Unicast Address, 2001:0DB8:E001::1222:33FF:FEAA:BBCC
 80011d4:	2120      	movs	r1, #32
 80011d6:	f244 1050 	movw	r0, #16720	; 0x4150
 80011da:	f7ff feab 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR1, 0x01);
 80011de:	2101      	movs	r1, #1
 80011e0:	f244 1051 	movw	r0, #16721	; 0x4151
 80011e4:	f7ff fea6 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR2, 0x0d);
 80011e8:	210d      	movs	r1, #13
 80011ea:	f244 1052 	movw	r0, #16722	; 0x4152
 80011ee:	f7ff fea1 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR3, 0xb8);
 80011f2:	21b8      	movs	r1, #184	; 0xb8
 80011f4:	f244 1053 	movw	r0, #16723	; 0x4153
 80011f8:	f7ff fe9c 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR4, 0xe0);
 80011fc:	21e0      	movs	r1, #224	; 0xe0
 80011fe:	f244 1054 	movw	r0, #16724	; 0x4154
 8001202:	f7ff fe97 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR5, 0x01);
 8001206:	2101      	movs	r1, #1
 8001208:	f244 1055 	movw	r0, #16725	; 0x4155
 800120c:	f7ff fe92 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR6, 0x00);
 8001210:	2100      	movs	r1, #0
 8001212:	f244 1056 	movw	r0, #16726	; 0x4156
 8001216:	f7ff fe8d 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR7, 0x00);
 800121a:	2100      	movs	r1, #0
 800121c:	f244 1057 	movw	r0, #16727	; 0x4157
 8001220:	f7ff fe88 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR8, 0x13);
 8001224:	2113      	movs	r1, #19
 8001226:	f244 1058 	movw	r0, #16728	; 0x4158
 800122a:	f7ff fe83 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR9, 0x22);
 800122e:	2122      	movs	r1, #34	; 0x22
 8001230:	f244 1059 	movw	r0, #16729	; 0x4159
 8001234:	f7ff fe7e 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR10, 0x33);
 8001238:	2133      	movs	r1, #51	; 0x33
 800123a:	f244 105a 	movw	r0, #16730	; 0x415a
 800123e:	f7ff fe79 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR11, 0xff);
 8001242:	21ff      	movs	r1, #255	; 0xff
 8001244:	f244 105b 	movw	r0, #16731	; 0x415b
 8001248:	f7ff fe74 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR12, 0xfe);
 800124c:	21fe      	movs	r1, #254	; 0xfe
 800124e:	f244 105c 	movw	r0, #16732	; 0x415c
 8001252:	f7ff fe6f 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR13, 0xaa);
 8001256:	21aa      	movs	r1, #170	; 0xaa
 8001258:	f244 105d 	movw	r0, #16733	; 0x415d
 800125c:	f7ff fe6a 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR14, 0xbb);
 8001260:	21bb      	movs	r1, #187	; 0xbb
 8001262:	f244 105e 	movw	r0, #16734	; 0x415e
 8001266:	f7ff fe65 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR15, 0xcc);
 800126a:	21cc      	movs	r1, #204	; 0xcc
 800126c:	f244 105f 	movw	r0, #16735	; 0x415f
 8001270:	f7ff fe60 	bl	8000f34 <SPI_W6100_WCR>

	SPI_W6100_WCR(SUB6R0, 0xff);	// IPv6 Subnet Prefix, FFFF:FFFF::
 8001274:	21ff      	movs	r1, #255	; 0xff
 8001276:	f244 1060 	movw	r0, #16736	; 0x4160
 800127a:	f7ff fe5b 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R1, 0xff);
 800127e:	21ff      	movs	r1, #255	; 0xff
 8001280:	f244 1061 	movw	r0, #16737	; 0x4161
 8001284:	f7ff fe56 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R2, 0xff);
 8001288:	21ff      	movs	r1, #255	; 0xff
 800128a:	f244 1062 	movw	r0, #16738	; 0x4162
 800128e:	f7ff fe51 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R3, 0xff);
 8001292:	21ff      	movs	r1, #255	; 0xff
 8001294:	f244 1063 	movw	r0, #16739	; 0x4163
 8001298:	f7ff fe4c 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R4, 0xff);
 800129c:	21ff      	movs	r1, #255	; 0xff
 800129e:	f244 1064 	movw	r0, #16740	; 0x4164
 80012a2:	f7ff fe47 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R5, 0xff);
 80012a6:	21ff      	movs	r1, #255	; 0xff
 80012a8:	f244 1065 	movw	r0, #16741	; 0x4165
 80012ac:	f7ff fe42 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R6, 0xff);
 80012b0:	21ff      	movs	r1, #255	; 0xff
 80012b2:	f244 1066 	movw	r0, #16742	; 0x4166
 80012b6:	f7ff fe3d 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R7, 0xff);
 80012ba:	21ff      	movs	r1, #255	; 0xff
 80012bc:	f244 1067 	movw	r0, #16743	; 0x4167
 80012c0:	f7ff fe38 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R8, 0x00);
 80012c4:	2100      	movs	r1, #0
 80012c6:	f244 1068 	movw	r0, #16744	; 0x4168
 80012ca:	f7ff fe33 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R9, 0x00);
 80012ce:	2100      	movs	r1, #0
 80012d0:	f244 1069 	movw	r0, #16745	; 0x4169
 80012d4:	f7ff fe2e 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R10, 0x00);
 80012d8:	2100      	movs	r1, #0
 80012da:	f244 106a 	movw	r0, #16746	; 0x416a
 80012de:	f7ff fe29 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R11, 0x00);
 80012e2:	2100      	movs	r1, #0
 80012e4:	f244 106b 	movw	r0, #16747	; 0x416b
 80012e8:	f7ff fe24 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R12, 0x00);
 80012ec:	2100      	movs	r1, #0
 80012ee:	f244 106c 	movw	r0, #16748	; 0x416c
 80012f2:	f7ff fe1f 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R13, 0x00);
 80012f6:	2100      	movs	r1, #0
 80012f8:	f244 106d 	movw	r0, #16749	; 0x416d
 80012fc:	f7ff fe1a 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R14, 0x00);
 8001300:	2100      	movs	r1, #0
 8001302:	f244 106e 	movw	r0, #16750	; 0x416e
 8001306:	f7ff fe15 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R15, 0x00);
 800130a:	2100      	movs	r1, #0
 800130c:	f244 106f 	movw	r0, #16751	; 0x416f
 8001310:	f7ff fe10 	bl	8000f34 <SPI_W6100_WCR>

	SPI_W6100_WCR(GA6R0, 0xfe);	// IPv6 Gateway Address, FFFF:FFFF::
 8001314:	21fe      	movs	r1, #254	; 0xfe
 8001316:	f244 1070 	movw	r0, #16752	; 0x4170
 800131a:	f7ff fe0b 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R1, 0x80);
 800131e:	2180      	movs	r1, #128	; 0x80
 8001320:	f244 1071 	movw	r0, #16753	; 0x4171
 8001324:	f7ff fe06 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R2, 0x00);
 8001328:	2100      	movs	r1, #0
 800132a:	f244 1072 	movw	r0, #16754	; 0x4172
 800132e:	f7ff fe01 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R3, 0x00);
 8001332:	2100      	movs	r1, #0
 8001334:	f244 1073 	movw	r0, #16755	; 0x4173
 8001338:	f7ff fdfc 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R4, 0x00);
 800133c:	2100      	movs	r1, #0
 800133e:	f244 1074 	movw	r0, #16756	; 0x4174
 8001342:	f7ff fdf7 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R5, 0x00);
 8001346:	2100      	movs	r1, #0
 8001348:	f244 1075 	movw	r0, #16757	; 0x4175
 800134c:	f7ff fdf2 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R6, 0x00);
 8001350:	2100      	movs	r1, #0
 8001352:	f244 1076 	movw	r0, #16758	; 0x4176
 8001356:	f7ff fded 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R7, 0x00);
 800135a:	2100      	movs	r1, #0
 800135c:	f244 1077 	movw	r0, #16759	; 0x4177
 8001360:	f7ff fde8 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R8, 0x13);
 8001364:	2113      	movs	r1, #19
 8001366:	f244 1078 	movw	r0, #16760	; 0x4178
 800136a:	f7ff fde3 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R9, 0x22);
 800136e:	2122      	movs	r1, #34	; 0x22
 8001370:	f244 1079 	movw	r0, #16761	; 0x4179
 8001374:	f7ff fdde 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R10, 0x33);
 8001378:	2133      	movs	r1, #51	; 0x33
 800137a:	f244 107a 	movw	r0, #16762	; 0x417a
 800137e:	f7ff fdd9 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R11, 0xff);
 8001382:	21ff      	movs	r1, #255	; 0xff
 8001384:	f244 107b 	movw	r0, #16763	; 0x417b
 8001388:	f7ff fdd4 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R12, 0xfe);
 800138c:	21fe      	movs	r1, #254	; 0xfe
 800138e:	f244 107c 	movw	r0, #16764	; 0x417c
 8001392:	f7ff fdcf 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R13, 0x44);
 8001396:	2144      	movs	r1, #68	; 0x44
 8001398:	f244 107d 	movw	r0, #16765	; 0x417d
 800139c:	f7ff fdca 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R14, 0x55);
 80013a0:	2155      	movs	r1, #85	; 0x55
 80013a2:	f244 107e 	movw	r0, #16766	; 0x417e
 80013a6:	f7ff fdc5 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R15, 0x66);
 80013aa:	2166      	movs	r1, #102	; 0x66
 80013ac:	f244 107f 	movw	r0, #16767	; 0x417f
 80013b0:	f7ff fdc0 	bl	8000f34 <SPI_W6100_WCR>

	SPI_W6100_WCR(NETLCKR, 0x00);	// NETLCKR		Network settings lock
 80013b4:	2100      	movs	r1, #0
 80013b6:	f244 10f5 	movw	r0, #16885	; 0x41f5
 80013ba:	f7ff fdbb 	bl	8000f34 <SPI_W6100_WCR>

	// W6100 Packet Received Interrupt setup (for Socket 0)
	// *** Modify this code to fire interrupts for other sockets if in use ***
	SPI_W6100_WCR(SYCR1, 0x80);				// Interrupt enabled (by default after reset)
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	f242 0005 	movw	r0, #8197	; 0x2005
 80013c4:	f7ff fdb6 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WCR(SIMR, 0x01);				// enable SIMR[S0_INT] – enable SOCKET 0 Interrupt
 80013c8:	2101      	movs	r1, #1
 80013ca:	f242 1014 	movw	r0, #8468	; 0x2114
 80013ce:	f7ff fdb1 	bl	8000f34 <SPI_W6100_WCR>
	SPI_W6100_WSOCK(Sn_IMR, 0x04, 0, REG);	// Enable RECV Interrupt Mask Bit for Socket 0
 80013d2:	2301      	movs	r3, #1
 80013d4:	2200      	movs	r2, #0
 80013d6:	2104      	movs	r1, #4
 80013d8:	2024      	movs	r0, #36	; 0x24
 80013da:	f7ff fe0b 	bl	8000ff4 <SPI_W6100_WSOCK>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <W6100_OpenTCPSocket>:




uint32_t W6100_OpenTCPSocket (uint8_t sck_nbr, uint16_t port) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	4613      	mov	r3, r2
 80013f2:	80bb      	strh	r3, [r7, #4]
	uint32_t dest_adr;
	/* *** Open Socket as TCP4 *** */
	SPI_W6100_WSOCK(Sn_MR, 0x01, sck_nbr, REG);				// Set TCP4 mode
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	2301      	movs	r3, #1
 80013f8:	2101      	movs	r1, #1
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fdfa 	bl	8000ff4 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR0, (port >> 8), sck_nbr, REG);	// Set PORT number
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	0a1b      	lsrs	r3, r3, #8
 8001404:	b29b      	uxth	r3, r3
 8001406:	b2d9      	uxtb	r1, r3
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	2301      	movs	r3, #1
 800140c:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001410:	f7ff fdf0 	bl	8000ff4 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR1, (port & 0xff), sck_nbr, REG);
 8001414:	88bb      	ldrh	r3, [r7, #4]
 8001416:	b2d9      	uxtb	r1, r3
 8001418:	79fa      	ldrb	r2, [r7, #7]
 800141a:	2301      	movs	r3, #1
 800141c:	f240 1015 	movw	r0, #277	; 0x115
 8001420:	f7ff fde8 	bl	8000ff4 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_CR, 0x01, sck_nbr, REG);				// Set OPEN command
 8001424:	79fa      	ldrb	r2, [r7, #7]
 8001426:	2301      	movs	r3, #1
 8001428:	2101      	movs	r1, #1
 800142a:	2010      	movs	r0, #16
 800142c:	f7ff fde2 	bl	8000ff4 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until OPEN command is cleared
 8001430:	bf00      	nop
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2201      	movs	r2, #1
 8001436:	4619      	mov	r1, r3
 8001438:	2010      	movs	r0, #16
 800143a:	f7ff fda0 	bl	8000f7e <SPI_W6100_RSOCK>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f6      	bne.n	8001432 <W6100_OpenTCPSocket+0x4e>


	SPI_W6100_WSOCK(Sn_CR, 0x02, sck_nbr, REG);				// Set LISTEN command
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	2301      	movs	r3, #1
 8001448:	2102      	movs	r1, #2
 800144a:	2010      	movs	r0, #16
 800144c:	f7ff fdd2 	bl	8000ff4 <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until LISTEN command is cleared
 8001450:	bf00      	nop
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2201      	movs	r2, #1
 8001456:	4619      	mov	r1, r3
 8001458:	2010      	movs	r0, #16
 800145a:	f7ff fd90 	bl	8000f7e <SPI_W6100_RSOCK>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f6      	bne.n	8001452 <W6100_OpenTCPSocket+0x6e>

	// CONNECT NOW
	while ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x17);	// Wait until SOCKET ESTABLISHED
 8001464:	bf00      	nop
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2201      	movs	r2, #1
 800146a:	4619      	mov	r1, r3
 800146c:	2030      	movs	r0, #48	; 0x30
 800146e:	f7ff fd86 	bl	8000f7e <SPI_W6100_RSOCK>
 8001472:	4603      	mov	r3, r0
 8001474:	2b17      	cmp	r3, #23
 8001476:	d1f6      	bne.n	8001466 <W6100_OpenTCPSocket+0x82>

	/* HARDWARE RESPONSE ON THE SOCKET OPEN */
	if(socketOpenCallback) socketOpenCallback(sck_nbr);
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <W6100_OpenTCPSocket+0x11c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d004      	beq.n	800148a <W6100_OpenTCPSocket+0xa6>
 8001480:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <W6100_OpenTCPSocket+0x11c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	4610      	mov	r0, r2
 8001488:	4798      	blx	r3
	/* END OF HARDWARE RESPONSE */							// Socket established

	SPI_W6100_WSOCK(Sn_IRCLR, 0x01, sck_nbr, REG);			// Interrupt clear
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	2301      	movs	r3, #1
 800148e:	2101      	movs	r1, #1
 8001490:	2028      	movs	r0, #40	; 0x28
 8001492:	f7ff fdaf 	bl	8000ff4 <SPI_W6100_WSOCK>

	// Read destination address
	dest_adr = (SPI_W6100_RSOCK(Sn_DIPR0, sck_nbr, REG) << 24);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2201      	movs	r2, #1
 800149a:	4619      	mov	r1, r3
 800149c:	f44f 7090 	mov.w	r0, #288	; 0x120
 80014a0:	f7ff fd6d 	bl	8000f7e <SPI_W6100_RSOCK>
 80014a4:	4603      	mov	r3, r0
 80014a6:	061b      	lsls	r3, r3, #24
 80014a8:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR1, sck_nbr, REG) << 16);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4619      	mov	r1, r3
 80014b0:	f240 1021 	movw	r0, #289	; 0x121
 80014b4:	f7ff fd63 	bl	8000f7e <SPI_W6100_RSOCK>
 80014b8:	4603      	mov	r3, r0
 80014ba:	041b      	lsls	r3, r3, #16
 80014bc:	461a      	mov	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR2, sck_nbr, REG) << 8);
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	2201      	movs	r2, #1
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 7091 	mov.w	r0, #290	; 0x122
 80014ce:	f7ff fd56 	bl	8000f7e <SPI_W6100_RSOCK>
 80014d2:	4603      	mov	r3, r0
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
	dest_adr |= SPI_W6100_RSOCK(Sn_DIPR3, sck_nbr, REG);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2201      	movs	r2, #1
 80014e2:	4619      	mov	r1, r3
 80014e4:	f240 1023 	movw	r0, #291	; 0x123
 80014e8:	f7ff fd49 	bl	8000f7e <SPI_W6100_RSOCK>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]

	return dest_adr;	// Return destination address
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000094 	.word	0x20000094

08001504 <W6100_ReceiveData>:




uint8_t W6100_ReceiveData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab, uint8_t size) {
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b08b      	sub	sp, #44	; 0x2c
 8001508:	af00      	add	r7, sp, #0
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	461a      	mov	r2, r3
 8001510:	4603      	mov	r3, r0
 8001512:	73fb      	strb	r3, [r7, #15]
 8001514:	4613      	mov	r3, r2
 8001516:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	uint32_t get_size, gSn_RX_MAX, get_start_address, Sn_RX_RD_temp;

	if ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) == 0x1c) {								// Check if socket close request pending
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2201      	movs	r2, #1
 800151c:	4619      	mov	r1, r3
 800151e:	2030      	movs	r0, #48	; 0x30
 8001520:	f7ff fd2d 	bl	8000f7e <SPI_W6100_RSOCK>
 8001524:	4603      	mov	r3, r0
 8001526:	2b1c      	cmp	r3, #28
 8001528:	d103      	bne.n	8001532 <W6100_ReceiveData+0x2e>
		W6100_PassiveCloseSocket(sck_nbr);
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f9c1 	bl	80018b4 <W6100_PassiveCloseSocket>
	}

	if ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0b00000100) == 0x04) {					// Check if data received
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	2020      	movs	r0, #32
 800153a:	f7ff fd20 	bl	8000f7e <SPI_W6100_RSOCK>
 800153e:	4603      	mov	r3, r0
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b04      	cmp	r3, #4
 8001546:	f040 80a1 	bne.w	800168c <W6100_ReceiveData+0x188>


			// Read data from the buffer
			get_size = (SPI_W6100_RSOCK(Sn_RX_RSR0, sck_nbr, REG) << 8);
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	2201      	movs	r2, #1
 800154e:	4619      	mov	r1, r3
 8001550:	f44f 7009 	mov.w	r0, #548	; 0x224
 8001554:	f7ff fd13 	bl	8000f7e <SPI_W6100_RSOCK>
 8001558:	4603      	mov	r3, r0
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	623b      	str	r3, [r7, #32]
			get_size |= SPI_W6100_RSOCK(Sn_RX_RSR1, sck_nbr, REG);
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	2201      	movs	r2, #1
 8001562:	4619      	mov	r1, r3
 8001564:	f240 2025 	movw	r0, #549	; 0x225
 8001568:	f7ff fd09 	bl	8000f7e <SPI_W6100_RSOCK>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	4313      	orrs	r3, r2
 8001574:	623b      	str	r3, [r7, #32]
			gSn_RX_MAX = (SPI_W6100_RSOCK(Sn_RX_BSR, sck_nbr, REG) * 1024);
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	2201      	movs	r2, #1
 800157a:	4619      	mov	r1, r3
 800157c:	f44f 7008 	mov.w	r0, #544	; 0x220
 8001580:	f7ff fcfd 	bl	8000f7e <SPI_W6100_RSOCK>
 8001584:	4603      	mov	r3, r0
 8001586:	029b      	lsls	r3, r3, #10
 8001588:	61fb      	str	r3, [r7, #28]
			get_start_address = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2201      	movs	r2, #1
 800158e:	4619      	mov	r1, r3
 8001590:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001594:	f7ff fcf3 	bl	8000f7e <SPI_W6100_RSOCK>
 8001598:	4603      	mov	r3, r0
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	617b      	str	r3, [r7, #20]
			get_start_address |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4619      	mov	r1, r3
 80015a4:	f240 2029 	movw	r0, #553	; 0x229
 80015a8:	f7ff fce9 	bl	8000f7e <SPI_W6100_RSOCK>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]

			// Move data to the array
			memset(tab, '\0', size);
 80015b6:	7bbb      	ldrb	r3, [r7, #14]
 80015b8:	461a      	mov	r2, r3
 80015ba:	2100      	movs	r1, #0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fa74 	bl	8001aaa <memset>
			for (i=0; i<get_size; i++) {
 80015c2:	2300      	movs	r3, #0
 80015c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015c8:	e016      	b.n	80015f8 <W6100_ReceiveData+0xf4>
				tab[i] = SPI_W6100_RSOCK((get_start_address+i), sck_nbr, RX_BUF);
 80015ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	b298      	uxth	r0, r3
 80015d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	18d4      	adds	r4, r2, r3
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2203      	movs	r2, #3
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff fcca 	bl	8000f7e <SPI_W6100_RSOCK>
 80015ea:	4603      	mov	r3, r0
 80015ec:	7023      	strb	r3, [r4, #0]
			for (i=0; i<get_size; i++) {
 80015ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f2:	3301      	adds	r3, #1
 80015f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015fc:	6a3a      	ldr	r2, [r7, #32]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d8e3      	bhi.n	80015ca <W6100_ReceiveData+0xc6>
			}

			memcpy(&get_start_address, &dest_adr, get_size);
 8001602:	f107 0108 	add.w	r1, r7, #8
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	6a3a      	ldr	r2, [r7, #32]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fa41 	bl	8001a94 <memcpy>

			Sn_RX_RD_temp = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2201      	movs	r2, #1
 8001616:	4619      	mov	r1, r3
 8001618:	f44f 700a 	mov.w	r0, #552	; 0x228
 800161c:	f7ff fcaf 	bl	8000f7e <SPI_W6100_RSOCK>
 8001620:	4603      	mov	r3, r0
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	2201      	movs	r2, #1
 800162a:	4619      	mov	r1, r3
 800162c:	f240 2029 	movw	r0, #553	; 0x229
 8001630:	f7ff fca5 	bl	8000f7e <SPI_W6100_RSOCK>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp += get_size;
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	4413      	add	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
			SPI_W6100_WSOCK(Sn_RX_RD0, (Sn_RX_RD_temp>>8), sck_nbr, REG);
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	b2d9      	uxtb	r1, r3
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	2301      	movs	r3, #1
 8001650:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001654:	f7ff fcce 	bl	8000ff4 <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_RX_RD1, (Sn_RX_RD_temp), sck_nbr, REG);
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	b2d9      	uxtb	r1, r3
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	2301      	movs	r3, #1
 8001660:	f240 2029 	movw	r0, #553	; 0x229
 8001664:	f7ff fcc6 	bl	8000ff4 <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_CR, 0x40, sck_nbr, REG);
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	2301      	movs	r3, #1
 800166c:	2140      	movs	r1, #64	; 0x40
 800166e:	2010      	movs	r0, #16
 8001670:	f7ff fcc0 	bl	8000ff4 <SPI_W6100_WSOCK>
			while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);
 8001674:	bf00      	nop
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2201      	movs	r2, #1
 800167a:	4619      	mov	r1, r3
 800167c:	2010      	movs	r0, #16
 800167e:	f7ff fc7e 	bl	8000f7e <SPI_W6100_RSOCK>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f6      	bne.n	8001676 <W6100_ReceiveData+0x172>

			return 1;	// Return 1 if data was received
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <W6100_ReceiveData+0x18a>
	}
	else 	return 0;	// Return 0 of no data was received
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	372c      	adds	r7, #44	; 0x2c
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}

08001696 <W6100_TransmitData>:

void W6100_TransmitData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab, uint8_t size) {
 8001696:	b580      	push	{r7, lr}
 8001698:	b08a      	sub	sp, #40	; 0x28
 800169a:	af00      	add	r7, sp, #0
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	4613      	mov	r3, r2
 80016a8:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	uint8_t send_size = size;
 80016aa:	7bbb      	ldrb	r3, [r7, #14]
 80016ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t gSn_TX_MAX, get_start_address, Sn_TX_WR_temp, Sn_TX_FSR_temp;

	gSn_TX_MAX = (SPI_W6100_RSOCK(Sn_TX_BSR, sck_nbr, REG) * 1024);						// Socket TX buffer size
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2201      	movs	r2, #1
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016ba:	f7ff fc60 	bl	8000f7e <SPI_W6100_RSOCK>
 80016be:	4603      	mov	r3, r0
 80016c0:	029b      	lsls	r3, r3, #10
 80016c2:	61fb      	str	r3, [r7, #28]

	if(send_size > gSn_TX_MAX) send_size = gSn_TX_MAX;
 80016c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d219      	bcs.n	8001702 <W6100_TransmitData+0x6c>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	while(send_size > Sn_TX_FSR_temp) {													// wait until Socket Tx buffer is free
 80016d4:	e015      	b.n	8001702 <W6100_TransmitData+0x6c>
		Sn_TX_FSR_temp = (SPI_W6100_RSOCK(Sn_TX_FSR0, sck_nbr, REG) << 8);
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	2201      	movs	r2, #1
 80016da:	4619      	mov	r1, r3
 80016dc:	f44f 7001 	mov.w	r0, #516	; 0x204
 80016e0:	f7ff fc4d 	bl	8000f7e <SPI_W6100_RSOCK>
 80016e4:	4603      	mov	r3, r0
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	623b      	str	r3, [r7, #32]
		Sn_TX_FSR_temp |= SPI_W6100_RSOCK(Sn_TX_FSR1, sck_nbr, REG);
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	2201      	movs	r2, #1
 80016ee:	4619      	mov	r1, r3
 80016f0:	f240 2005 	movw	r0, #517	; 0x205
 80016f4:	f7ff fc43 	bl	8000f7e <SPI_W6100_RSOCK>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	6a3b      	ldr	r3, [r7, #32]
 80016fe:	4313      	orrs	r3, r2
 8001700:	623b      	str	r3, [r7, #32]
	while(send_size > Sn_TX_FSR_temp) {													// wait until Socket Tx buffer is free
 8001702:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001706:	6a3a      	ldr	r2, [r7, #32]
 8001708:	429a      	cmp	r2, r3
 800170a:	d3e4      	bcc.n	80016d6 <W6100_TransmitData+0x40>
	}

	get_start_address = (SPI_W6100_RSOCK(Sn_TX_WR0, sck_nbr, REG) << 8);
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	2201      	movs	r2, #1
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8001716:	f7ff fc32 	bl	8000f7e <SPI_W6100_RSOCK>
 800171a:	4603      	mov	r3, r0
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	617b      	str	r3, [r7, #20]
	get_start_address |= SPI_W6100_RSOCK(Sn_TX_WR1, sck_nbr, REG);
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	2201      	movs	r2, #1
 8001724:	4619      	mov	r1, r3
 8001726:	f240 200d 	movw	r0, #525	; 0x20d
 800172a:	f7ff fc28 	bl	8000f7e <SPI_W6100_RSOCK>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]


	Sn_TX_WR_temp = (SPI_W6100_RSOCK(Sn_TX_WR0, sck_nbr, REG) << 8);
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2201      	movs	r2, #1
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8001742:	f7ff fc1c 	bl	8000f7e <SPI_W6100_RSOCK>
 8001746:	4603      	mov	r3, r0
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	61bb      	str	r3, [r7, #24]
	Sn_TX_WR_temp |= SPI_W6100_RSOCK(Sn_TX_WR1, sck_nbr, REG);
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2201      	movs	r2, #1
 8001750:	4619      	mov	r1, r3
 8001752:	f240 200d 	movw	r0, #525	; 0x20d
 8001756:	f7ff fc12 	bl	8000f7e <SPI_W6100_RSOCK>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
	Sn_TX_WR_temp += size;
 8001764:	7bbb      	ldrb	r3, [r7, #14]
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4413      	add	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
	SPI_W6100_WSOCK(Sn_TX_WR0, (Sn_TX_WR_temp>>8), sck_nbr, REG);
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	b2d9      	uxtb	r1, r3
 8001772:	7bfa      	ldrb	r2, [r7, #15]
 8001774:	2301      	movs	r3, #1
 8001776:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800177a:	f7ff fc3b 	bl	8000ff4 <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_TX_WR1, (Sn_TX_WR_temp), sck_nbr, REG);
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	b2d9      	uxtb	r1, r3
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	2301      	movs	r3, #1
 8001786:	f240 200d 	movw	r0, #525	; 0x20d
 800178a:	f7ff fc33 	bl	8000ff4 <SPI_W6100_WSOCK>

	// Move data to the array
	for (i=0; i<size; i++) {
 800178e:	2300      	movs	r3, #0
 8001790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001794:	e014      	b.n	80017c0 <W6100_TransmitData+0x12a>
		SPI_W6100_WSOCK((get_start_address+i), tab[i], sck_nbr, TX_BUF);
 8001796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800179a:	b29a      	uxth	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	b298      	uxth	r0, r3
 80017a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	7819      	ldrb	r1, [r3, #0]
 80017ae:	7bfa      	ldrb	r2, [r7, #15]
 80017b0:	2302      	movs	r3, #2
 80017b2:	f7ff fc1f 	bl	8000ff4 <SPI_W6100_WSOCK>
	for (i=0; i<size; i++) {
 80017b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ba:	3301      	adds	r3, #1
 80017bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d3e5      	bcc.n	8001796 <W6100_TransmitData+0x100>
	}

	memcpy(&get_start_address, &dest_adr, send_size);
 80017ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80017ce:	f107 0108 	add.w	r1, r7, #8
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f95c 	bl	8001a94 <memcpy>

	SPI_W6100_WSOCK(Sn_CR, 0x20, sck_nbr, REG);											// SEND command sent to TCP/TCP6 mode
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	2301      	movs	r3, #1
 80017e0:	2120      	movs	r1, #32
 80017e2:	2010      	movs	r0, #16
 80017e4:	f7ff fc06 	bl	8000ff4 <SPI_W6100_WSOCK>
	while(SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG) != 0x00);								// Wait for SEND command clear
 80017e8:	bf00      	nop
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	2201      	movs	r2, #1
 80017ee:	4619      	mov	r1, r3
 80017f0:	2010      	movs	r0, #16
 80017f2:	f7ff fbc4 	bl	8000f7e <SPI_W6100_RSOCK>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f6      	bne.n	80017ea <W6100_TransmitData+0x154>

	while(((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x10) == 0) && ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x08) == 0));
 80017fc:	bf00      	nop
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	2201      	movs	r2, #1
 8001802:	4619      	mov	r1, r3
 8001804:	2020      	movs	r0, #32
 8001806:	f7ff fbba 	bl	8000f7e <SPI_W6100_RSOCK>
 800180a:	4603      	mov	r3, r0
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10a      	bne.n	800182a <W6100_TransmitData+0x194>
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2201      	movs	r2, #1
 8001818:	4619      	mov	r1, r3
 800181a:	2020      	movs	r0, #32
 800181c:	f7ff fbaf 	bl	8000f7e <SPI_W6100_RSOCK>
 8001820:	4603      	mov	r3, r0
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0e9      	beq.n	80017fe <W6100_TransmitData+0x168>

	if((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x10) == 0x10) SPI_W6100_WSOCK(Sn_IRCLR, 0x10, sck_nbr, REG);	// Clear SENDOK interrupt
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2201      	movs	r2, #1
 800182e:	4619      	mov	r1, r3
 8001830:	2020      	movs	r0, #32
 8001832:	f7ff fba4 	bl	8000f7e <SPI_W6100_RSOCK>
 8001836:	4603      	mov	r3, r0
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b10      	cmp	r3, #16
 800183e:	d105      	bne.n	800184c <W6100_TransmitData+0x1b6>
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	2301      	movs	r3, #1
 8001844:	2110      	movs	r1, #16
 8001846:	2028      	movs	r0, #40	; 0x28
 8001848:	f7ff fbd4 	bl	8000ff4 <SPI_W6100_WSOCK>

}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <registerDataReceivedCallback>:

void registerDataReceivedCallback(void (*callback)(char * RxBuf)) {
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	dataReceivedCallback = callback;
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <registerDataReceivedCallback+0x1c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000098 	.word	0x20000098

08001874 <registerSocketOpenCallback>:


void registerSocketOpenCallback(void (*callback)(uint8_t sck_nbr)) {
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	socketOpenCallback = callback;
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <registerSocketOpenCallback+0x1c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000094 	.word	0x20000094

08001894 <registerSocketCloseCallback>:

void registerSocketCloseCallback(void (*callback)(uint8_t sck_nbr)) {
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	socketCloseCallback = callback;
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <registerSocketCloseCallback+0x1c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000090 	.word	0x20000090

080018b4 <W6100_PassiveCloseSocket>:


void W6100_PassiveCloseSocket(uint8_t sck_nbr) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	SPI_W6100_WSOCK(Sn_CR, 0x08, sck_nbr, REG);						// Send FIN packet (DISCON command)
 80018be:	79fa      	ldrb	r2, [r7, #7]
 80018c0:	2301      	movs	r3, #1
 80018c2:	2108      	movs	r1, #8
 80018c4:	2010      	movs	r0, #16
 80018c6:	f7ff fb95 	bl	8000ff4 <SPI_W6100_WSOCK>
	while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);			// Wait for DISCON command clear
 80018ca:	bf00      	nop
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2201      	movs	r2, #1
 80018d0:	4619      	mov	r1, r3
 80018d2:	2010      	movs	r0, #16
 80018d4:	f7ff fb53 	bl	8000f7e <SPI_W6100_RSOCK>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f6      	bne.n	80018cc <W6100_PassiveCloseSocket+0x18>
	// Wait for ACK packet
	while((((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b10) == 0) && (((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b1000) == 0));
 80018de:	bf00      	nop
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	2201      	movs	r2, #1
 80018e4:	4619      	mov	r1, r3
 80018e6:	2020      	movs	r0, #32
 80018e8:	f7ff fb49 	bl	8000f7e <SPI_W6100_RSOCK>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10a      	bne.n	800190c <W6100_PassiveCloseSocket+0x58>
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4619      	mov	r1, r3
 80018fc:	2020      	movs	r0, #32
 80018fe:	f7ff fb3e 	bl	8000f7e <SPI_W6100_RSOCK>
 8001902:	4603      	mov	r3, r0
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d0e9      	beq.n	80018e0 <W6100_PassiveCloseSocket+0x2c>

	if ((((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b10) == 0b10)) {
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2201      	movs	r2, #1
 8001910:	4619      	mov	r1, r3
 8001912:	2020      	movs	r0, #32
 8001914:	f7ff fb33 	bl	8000f7e <SPI_W6100_RSOCK>
 8001918:	4603      	mov	r3, r0
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b02      	cmp	r3, #2
 8001920:	d10f      	bne.n	8001942 <W6100_PassiveCloseSocket+0x8e>
		SPI_W6100_WSOCK(Sn_IRCLR, 0x02, sck_nbr, REG);				// Clear DISCON interrupt
 8001922:	79fa      	ldrb	r2, [r7, #7]
 8001924:	2301      	movs	r3, #1
 8001926:	2102      	movs	r1, #2
 8001928:	2028      	movs	r0, #40	; 0x28
 800192a:	f7ff fb63 	bl	8000ff4 <SPI_W6100_WSOCK>
		while((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x00);		// Wait until socket is CLOSED
 800192e:	bf00      	nop
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2201      	movs	r2, #1
 8001934:	4619      	mov	r1, r3
 8001936:	2030      	movs	r0, #48	; 0x30
 8001938:	f7ff fb21 	bl	8000f7e <SPI_W6100_RSOCK>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f6      	bne.n	8001930 <W6100_PassiveCloseSocket+0x7c>
	}
	/* HARDWARE RESPONSE ON THE SOCKET CLOSE */
	if(socketCloseCallback) socketCloseCallback(sck_nbr);			// Response for a socket close
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <W6100_PassiveCloseSocket+0xa8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <W6100_PassiveCloseSocket+0xa0>
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <W6100_PassiveCloseSocket+0xa8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	79fa      	ldrb	r2, [r7, #7]
 8001950:	4610      	mov	r0, r2
 8001952:	4798      	blx	r3
	/* END OF HARDWARE RESPONSE */
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000090 	.word	0x20000090

08001960 <EXTI9_5_IRQHandler>:


// W6100 external interrupt handler (line PC5)
// Fired when data is received by W6100 ETH
__attribute__((interrupt)) void EXTI9_5_IRQHandler(void) {
 8001960:	4668      	mov	r0, sp
 8001962:	f020 0107 	bic.w	r1, r0, #7
 8001966:	468d      	mov	sp, r1
 8001968:	b581      	push	{r0, r7, lr}
 800196a:	b08b      	sub	sp, #44	; 0x2c
 800196c:	af00      	add	r7, sp, #0

	char rx_buf[40];

	if(EXTI->PR & EXTI_PR_PR5) {
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <EXTI9_5_IRQHandler+0x80>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f003 0320 	and.w	r3, r3, #32
 8001976:	2b00      	cmp	r3, #0
 8001978:	d02a      	beq.n	80019d0 <EXTI9_5_IRQHandler+0x70>
		EXTI->PR = EXTI_PR_PR5;		// Clear ISR flag
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <EXTI9_5_IRQHandler+0x80>)
 800197c:	2220      	movs	r2, #32
 800197e:	615a      	str	r2, [r3, #20]
		/* W6100: Generic Interrupt fired */
		// Check if W6100 RECEIVE ISR for Socket 0 was fired
		if(SPI_W6100_RCR(SIR) && 0x01){
 8001980:	f242 1001 	movw	r0, #8449	; 0x2101
 8001984:	f7ff fab2 	bl	8000eec <SPI_W6100_RCR>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d020      	beq.n	80019d0 <EXTI9_5_IRQHandler+0x70>
			/* Check if SOCKET 0 data was received */
			if(SPI_W6100_RSOCK(Sn_IR, 0, REG) && 0x04) {
 800198e:	2201      	movs	r2, #1
 8001990:	2100      	movs	r1, #0
 8001992:	2020      	movs	r0, #32
 8001994:	f7ff faf3 	bl	8000f7e <SPI_W6100_RSOCK>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d018      	beq.n	80019d0 <EXTI9_5_IRQHandler+0x70>
				if (W6100_ReceiveData(0, socket_dest_adr[0], (uint8_t*)rx_buf, sizeof(rx_buf))) {		// Check if data arrived
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <EXTI9_5_IRQHandler+0x84>)
 80019a0:	6819      	ldr	r1, [r3, #0]
 80019a2:	463a      	mov	r2, r7
 80019a4:	2328      	movs	r3, #40	; 0x28
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fdac 	bl	8001504 <W6100_ReceiveData>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d008      	beq.n	80019c4 <EXTI9_5_IRQHandler+0x64>
					/* HARDWARE RESPONSE ON DATA RECEIVED FROM SOCKET[0] */
					if(dataReceivedCallback) dataReceivedCallback(rx_buf);	// Callback function
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <EXTI9_5_IRQHandler+0x88>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d004      	beq.n	80019c4 <EXTI9_5_IRQHandler+0x64>
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <EXTI9_5_IRQHandler+0x88>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	463a      	mov	r2, r7
 80019c0:	4610      	mov	r0, r2
 80019c2:	4798      	blx	r3
					/* END OF HARDWARE RESPONSE */
				}
				SPI_W6100_WSOCK(Sn_IRCLR, 0x04, 0, REG);					// Clear data interrupt (must be after callback!)
 80019c4:	2301      	movs	r3, #1
 80019c6:	2200      	movs	r2, #0
 80019c8:	2104      	movs	r1, #4
 80019ca:	2028      	movs	r0, #40	; 0x28
 80019cc:	f7ff fb12 	bl	8000ff4 <SPI_W6100_WSOCK>
			}

		}
	}
}
 80019d0:	bf00      	nop
 80019d2:	372c      	adds	r7, #44	; 0x2c
 80019d4:	46bd      	mov	sp, r7
 80019d6:	e8bd 4081 	ldmia.w	sp!, {r0, r7, lr}
 80019da:	4685      	mov	sp, r0
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40013c00 	.word	0x40013c00
 80019e4:	20000108 	.word	0x20000108
 80019e8:	20000098 	.word	0x20000098

080019ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019f2:	e003      	b.n	80019fc <LoopCopyDataInit>

080019f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019fa:	3104      	adds	r1, #4

080019fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019fc:	480b      	ldr	r0, [pc, #44]	; (8001a2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a04:	d3f6      	bcc.n	80019f4 <CopyDataInit>
  ldr  r2, =_sbss
 8001a06:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a08:	e002      	b.n	8001a10 <LoopFillZerobss>

08001a0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a0c:	f842 3b04 	str.w	r3, [r2], #4

08001a10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a14:	d3f9      	bcc.n	8001a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a16:	f7ff fa11 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f000 f817 	bl	8001a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1e:	f7ff f939 	bl	8000c94 <main>
  bx  lr    
 8001a22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a28:	0800241c 	.word	0x0800241c
  ldr  r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a30:	20000064 	.word	0x20000064
  ldr  r2, =_sbss
 8001a34:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 8001a38:	20000114 	.word	0x20000114

08001a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC_IRQHandler>
	...

08001a40 <__errno>:
 8001a40:	4b01      	ldr	r3, [pc, #4]	; (8001a48 <__errno+0x8>)
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000000 	.word	0x20000000

08001a4c <__libc_init_array>:
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	4e0d      	ldr	r6, [pc, #52]	; (8001a84 <__libc_init_array+0x38>)
 8001a50:	4c0d      	ldr	r4, [pc, #52]	; (8001a88 <__libc_init_array+0x3c>)
 8001a52:	1ba4      	subs	r4, r4, r6
 8001a54:	10a4      	asrs	r4, r4, #2
 8001a56:	2500      	movs	r5, #0
 8001a58:	42a5      	cmp	r5, r4
 8001a5a:	d109      	bne.n	8001a70 <__libc_init_array+0x24>
 8001a5c:	4e0b      	ldr	r6, [pc, #44]	; (8001a8c <__libc_init_array+0x40>)
 8001a5e:	4c0c      	ldr	r4, [pc, #48]	; (8001a90 <__libc_init_array+0x44>)
 8001a60:	f000 fc28 	bl	80022b4 <_init>
 8001a64:	1ba4      	subs	r4, r4, r6
 8001a66:	10a4      	asrs	r4, r4, #2
 8001a68:	2500      	movs	r5, #0
 8001a6a:	42a5      	cmp	r5, r4
 8001a6c:	d105      	bne.n	8001a7a <__libc_init_array+0x2e>
 8001a6e:	bd70      	pop	{r4, r5, r6, pc}
 8001a70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a74:	4798      	blx	r3
 8001a76:	3501      	adds	r5, #1
 8001a78:	e7ee      	b.n	8001a58 <__libc_init_array+0xc>
 8001a7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a7e:	4798      	blx	r3
 8001a80:	3501      	adds	r5, #1
 8001a82:	e7f2      	b.n	8001a6a <__libc_init_array+0x1e>
 8001a84:	08002414 	.word	0x08002414
 8001a88:	08002414 	.word	0x08002414
 8001a8c:	08002414 	.word	0x08002414
 8001a90:	08002418 	.word	0x08002418

08001a94 <memcpy>:
 8001a94:	b510      	push	{r4, lr}
 8001a96:	1e43      	subs	r3, r0, #1
 8001a98:	440a      	add	r2, r1
 8001a9a:	4291      	cmp	r1, r2
 8001a9c:	d100      	bne.n	8001aa0 <memcpy+0xc>
 8001a9e:	bd10      	pop	{r4, pc}
 8001aa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001aa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001aa8:	e7f7      	b.n	8001a9a <memcpy+0x6>

08001aaa <memset>:
 8001aaa:	4402      	add	r2, r0
 8001aac:	4603      	mov	r3, r0
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d100      	bne.n	8001ab4 <memset+0xa>
 8001ab2:	4770      	bx	lr
 8001ab4:	f803 1b01 	strb.w	r1, [r3], #1
 8001ab8:	e7f9      	b.n	8001aae <memset+0x4>
	...

08001abc <siprintf>:
 8001abc:	b40e      	push	{r1, r2, r3}
 8001abe:	b500      	push	{lr}
 8001ac0:	b09c      	sub	sp, #112	; 0x70
 8001ac2:	ab1d      	add	r3, sp, #116	; 0x74
 8001ac4:	9002      	str	r0, [sp, #8]
 8001ac6:	9006      	str	r0, [sp, #24]
 8001ac8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001acc:	4809      	ldr	r0, [pc, #36]	; (8001af4 <siprintf+0x38>)
 8001ace:	9107      	str	r1, [sp, #28]
 8001ad0:	9104      	str	r1, [sp, #16]
 8001ad2:	4909      	ldr	r1, [pc, #36]	; (8001af8 <siprintf+0x3c>)
 8001ad4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ad8:	9105      	str	r1, [sp, #20]
 8001ada:	6800      	ldr	r0, [r0, #0]
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	a902      	add	r1, sp, #8
 8001ae0:	f000 f866 	bl	8001bb0 <_svfiprintf_r>
 8001ae4:	9b02      	ldr	r3, [sp, #8]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	b01c      	add	sp, #112	; 0x70
 8001aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8001af0:	b003      	add	sp, #12
 8001af2:	4770      	bx	lr
 8001af4:	20000000 	.word	0x20000000
 8001af8:	ffff0208 	.word	0xffff0208

08001afc <__ssputs_r>:
 8001afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b00:	688e      	ldr	r6, [r1, #8]
 8001b02:	429e      	cmp	r6, r3
 8001b04:	4682      	mov	sl, r0
 8001b06:	460c      	mov	r4, r1
 8001b08:	4690      	mov	r8, r2
 8001b0a:	4699      	mov	r9, r3
 8001b0c:	d837      	bhi.n	8001b7e <__ssputs_r+0x82>
 8001b0e:	898a      	ldrh	r2, [r1, #12]
 8001b10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b14:	d031      	beq.n	8001b7a <__ssputs_r+0x7e>
 8001b16:	6825      	ldr	r5, [r4, #0]
 8001b18:	6909      	ldr	r1, [r1, #16]
 8001b1a:	1a6f      	subs	r7, r5, r1
 8001b1c:	6965      	ldr	r5, [r4, #20]
 8001b1e:	2302      	movs	r3, #2
 8001b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b24:	fb95 f5f3 	sdiv	r5, r5, r3
 8001b28:	f109 0301 	add.w	r3, r9, #1
 8001b2c:	443b      	add	r3, r7
 8001b2e:	429d      	cmp	r5, r3
 8001b30:	bf38      	it	cc
 8001b32:	461d      	movcc	r5, r3
 8001b34:	0553      	lsls	r3, r2, #21
 8001b36:	d530      	bpl.n	8001b9a <__ssputs_r+0x9e>
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f000 fb21 	bl	8002180 <_malloc_r>
 8001b3e:	4606      	mov	r6, r0
 8001b40:	b950      	cbnz	r0, 8001b58 <__ssputs_r+0x5c>
 8001b42:	230c      	movs	r3, #12
 8001b44:	f8ca 3000 	str.w	r3, [sl]
 8001b48:	89a3      	ldrh	r3, [r4, #12]
 8001b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4e:	81a3      	strh	r3, [r4, #12]
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b58:	463a      	mov	r2, r7
 8001b5a:	6921      	ldr	r1, [r4, #16]
 8001b5c:	f7ff ff9a 	bl	8001a94 <memcpy>
 8001b60:	89a3      	ldrh	r3, [r4, #12]
 8001b62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6a:	81a3      	strh	r3, [r4, #12]
 8001b6c:	6126      	str	r6, [r4, #16]
 8001b6e:	6165      	str	r5, [r4, #20]
 8001b70:	443e      	add	r6, r7
 8001b72:	1bed      	subs	r5, r5, r7
 8001b74:	6026      	str	r6, [r4, #0]
 8001b76:	60a5      	str	r5, [r4, #8]
 8001b78:	464e      	mov	r6, r9
 8001b7a:	454e      	cmp	r6, r9
 8001b7c:	d900      	bls.n	8001b80 <__ssputs_r+0x84>
 8001b7e:	464e      	mov	r6, r9
 8001b80:	4632      	mov	r2, r6
 8001b82:	4641      	mov	r1, r8
 8001b84:	6820      	ldr	r0, [r4, #0]
 8001b86:	f000 fa93 	bl	80020b0 <memmove>
 8001b8a:	68a3      	ldr	r3, [r4, #8]
 8001b8c:	1b9b      	subs	r3, r3, r6
 8001b8e:	60a3      	str	r3, [r4, #8]
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	441e      	add	r6, r3
 8001b94:	6026      	str	r6, [r4, #0]
 8001b96:	2000      	movs	r0, #0
 8001b98:	e7dc      	b.n	8001b54 <__ssputs_r+0x58>
 8001b9a:	462a      	mov	r2, r5
 8001b9c:	f000 fb4a 	bl	8002234 <_realloc_r>
 8001ba0:	4606      	mov	r6, r0
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	d1e2      	bne.n	8001b6c <__ssputs_r+0x70>
 8001ba6:	6921      	ldr	r1, [r4, #16]
 8001ba8:	4650      	mov	r0, sl
 8001baa:	f000 fa9b 	bl	80020e4 <_free_r>
 8001bae:	e7c8      	b.n	8001b42 <__ssputs_r+0x46>

08001bb0 <_svfiprintf_r>:
 8001bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb4:	461d      	mov	r5, r3
 8001bb6:	898b      	ldrh	r3, [r1, #12]
 8001bb8:	061f      	lsls	r7, r3, #24
 8001bba:	b09d      	sub	sp, #116	; 0x74
 8001bbc:	4680      	mov	r8, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	4616      	mov	r6, r2
 8001bc2:	d50f      	bpl.n	8001be4 <_svfiprintf_r+0x34>
 8001bc4:	690b      	ldr	r3, [r1, #16]
 8001bc6:	b96b      	cbnz	r3, 8001be4 <_svfiprintf_r+0x34>
 8001bc8:	2140      	movs	r1, #64	; 0x40
 8001bca:	f000 fad9 	bl	8002180 <_malloc_r>
 8001bce:	6020      	str	r0, [r4, #0]
 8001bd0:	6120      	str	r0, [r4, #16]
 8001bd2:	b928      	cbnz	r0, 8001be0 <_svfiprintf_r+0x30>
 8001bd4:	230c      	movs	r3, #12
 8001bd6:	f8c8 3000 	str.w	r3, [r8]
 8001bda:	f04f 30ff 	mov.w	r0, #4294967295
 8001bde:	e0c8      	b.n	8001d72 <_svfiprintf_r+0x1c2>
 8001be0:	2340      	movs	r3, #64	; 0x40
 8001be2:	6163      	str	r3, [r4, #20]
 8001be4:	2300      	movs	r3, #0
 8001be6:	9309      	str	r3, [sp, #36]	; 0x24
 8001be8:	2320      	movs	r3, #32
 8001bea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001bee:	2330      	movs	r3, #48	; 0x30
 8001bf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bf4:	9503      	str	r5, [sp, #12]
 8001bf6:	f04f 0b01 	mov.w	fp, #1
 8001bfa:	4637      	mov	r7, r6
 8001bfc:	463d      	mov	r5, r7
 8001bfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001c02:	b10b      	cbz	r3, 8001c08 <_svfiprintf_r+0x58>
 8001c04:	2b25      	cmp	r3, #37	; 0x25
 8001c06:	d13e      	bne.n	8001c86 <_svfiprintf_r+0xd6>
 8001c08:	ebb7 0a06 	subs.w	sl, r7, r6
 8001c0c:	d00b      	beq.n	8001c26 <_svfiprintf_r+0x76>
 8001c0e:	4653      	mov	r3, sl
 8001c10:	4632      	mov	r2, r6
 8001c12:	4621      	mov	r1, r4
 8001c14:	4640      	mov	r0, r8
 8001c16:	f7ff ff71 	bl	8001afc <__ssputs_r>
 8001c1a:	3001      	adds	r0, #1
 8001c1c:	f000 80a4 	beq.w	8001d68 <_svfiprintf_r+0x1b8>
 8001c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c22:	4453      	add	r3, sl
 8001c24:	9309      	str	r3, [sp, #36]	; 0x24
 8001c26:	783b      	ldrb	r3, [r7, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 809d 	beq.w	8001d68 <_svfiprintf_r+0x1b8>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295
 8001c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c38:	9304      	str	r3, [sp, #16]
 8001c3a:	9307      	str	r3, [sp, #28]
 8001c3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c40:	931a      	str	r3, [sp, #104]	; 0x68
 8001c42:	462f      	mov	r7, r5
 8001c44:	2205      	movs	r2, #5
 8001c46:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001c4a:	4850      	ldr	r0, [pc, #320]	; (8001d8c <_svfiprintf_r+0x1dc>)
 8001c4c:	f7fe fad0 	bl	80001f0 <memchr>
 8001c50:	9b04      	ldr	r3, [sp, #16]
 8001c52:	b9d0      	cbnz	r0, 8001c8a <_svfiprintf_r+0xda>
 8001c54:	06d9      	lsls	r1, r3, #27
 8001c56:	bf44      	itt	mi
 8001c58:	2220      	movmi	r2, #32
 8001c5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c5e:	071a      	lsls	r2, r3, #28
 8001c60:	bf44      	itt	mi
 8001c62:	222b      	movmi	r2, #43	; 0x2b
 8001c64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001c68:	782a      	ldrb	r2, [r5, #0]
 8001c6a:	2a2a      	cmp	r2, #42	; 0x2a
 8001c6c:	d015      	beq.n	8001c9a <_svfiprintf_r+0xea>
 8001c6e:	9a07      	ldr	r2, [sp, #28]
 8001c70:	462f      	mov	r7, r5
 8001c72:	2000      	movs	r0, #0
 8001c74:	250a      	movs	r5, #10
 8001c76:	4639      	mov	r1, r7
 8001c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c7c:	3b30      	subs	r3, #48	; 0x30
 8001c7e:	2b09      	cmp	r3, #9
 8001c80:	d94d      	bls.n	8001d1e <_svfiprintf_r+0x16e>
 8001c82:	b1b8      	cbz	r0, 8001cb4 <_svfiprintf_r+0x104>
 8001c84:	e00f      	b.n	8001ca6 <_svfiprintf_r+0xf6>
 8001c86:	462f      	mov	r7, r5
 8001c88:	e7b8      	b.n	8001bfc <_svfiprintf_r+0x4c>
 8001c8a:	4a40      	ldr	r2, [pc, #256]	; (8001d8c <_svfiprintf_r+0x1dc>)
 8001c8c:	1a80      	subs	r0, r0, r2
 8001c8e:	fa0b f000 	lsl.w	r0, fp, r0
 8001c92:	4318      	orrs	r0, r3
 8001c94:	9004      	str	r0, [sp, #16]
 8001c96:	463d      	mov	r5, r7
 8001c98:	e7d3      	b.n	8001c42 <_svfiprintf_r+0x92>
 8001c9a:	9a03      	ldr	r2, [sp, #12]
 8001c9c:	1d11      	adds	r1, r2, #4
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	9103      	str	r1, [sp, #12]
 8001ca2:	2a00      	cmp	r2, #0
 8001ca4:	db01      	blt.n	8001caa <_svfiprintf_r+0xfa>
 8001ca6:	9207      	str	r2, [sp, #28]
 8001ca8:	e004      	b.n	8001cb4 <_svfiprintf_r+0x104>
 8001caa:	4252      	negs	r2, r2
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	9207      	str	r2, [sp, #28]
 8001cb2:	9304      	str	r3, [sp, #16]
 8001cb4:	783b      	ldrb	r3, [r7, #0]
 8001cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8001cb8:	d10c      	bne.n	8001cd4 <_svfiprintf_r+0x124>
 8001cba:	787b      	ldrb	r3, [r7, #1]
 8001cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8001cbe:	d133      	bne.n	8001d28 <_svfiprintf_r+0x178>
 8001cc0:	9b03      	ldr	r3, [sp, #12]
 8001cc2:	1d1a      	adds	r2, r3, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	9203      	str	r2, [sp, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bfb8      	it	lt
 8001ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8001cd0:	3702      	adds	r7, #2
 8001cd2:	9305      	str	r3, [sp, #20]
 8001cd4:	4d2e      	ldr	r5, [pc, #184]	; (8001d90 <_svfiprintf_r+0x1e0>)
 8001cd6:	7839      	ldrb	r1, [r7, #0]
 8001cd8:	2203      	movs	r2, #3
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f7fe fa88 	bl	80001f0 <memchr>
 8001ce0:	b138      	cbz	r0, 8001cf2 <_svfiprintf_r+0x142>
 8001ce2:	2340      	movs	r3, #64	; 0x40
 8001ce4:	1b40      	subs	r0, r0, r5
 8001ce6:	fa03 f000 	lsl.w	r0, r3, r0
 8001cea:	9b04      	ldr	r3, [sp, #16]
 8001cec:	4303      	orrs	r3, r0
 8001cee:	3701      	adds	r7, #1
 8001cf0:	9304      	str	r3, [sp, #16]
 8001cf2:	7839      	ldrb	r1, [r7, #0]
 8001cf4:	4827      	ldr	r0, [pc, #156]	; (8001d94 <_svfiprintf_r+0x1e4>)
 8001cf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cfa:	2206      	movs	r2, #6
 8001cfc:	1c7e      	adds	r6, r7, #1
 8001cfe:	f7fe fa77 	bl	80001f0 <memchr>
 8001d02:	2800      	cmp	r0, #0
 8001d04:	d038      	beq.n	8001d78 <_svfiprintf_r+0x1c8>
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <_svfiprintf_r+0x1e8>)
 8001d08:	bb13      	cbnz	r3, 8001d50 <_svfiprintf_r+0x1a0>
 8001d0a:	9b03      	ldr	r3, [sp, #12]
 8001d0c:	3307      	adds	r3, #7
 8001d0e:	f023 0307 	bic.w	r3, r3, #7
 8001d12:	3308      	adds	r3, #8
 8001d14:	9303      	str	r3, [sp, #12]
 8001d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d18:	444b      	add	r3, r9
 8001d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8001d1c:	e76d      	b.n	8001bfa <_svfiprintf_r+0x4a>
 8001d1e:	fb05 3202 	mla	r2, r5, r2, r3
 8001d22:	2001      	movs	r0, #1
 8001d24:	460f      	mov	r7, r1
 8001d26:	e7a6      	b.n	8001c76 <_svfiprintf_r+0xc6>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	3701      	adds	r7, #1
 8001d2c:	9305      	str	r3, [sp, #20]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	250a      	movs	r5, #10
 8001d32:	4638      	mov	r0, r7
 8001d34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d38:	3a30      	subs	r2, #48	; 0x30
 8001d3a:	2a09      	cmp	r2, #9
 8001d3c:	d903      	bls.n	8001d46 <_svfiprintf_r+0x196>
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0c8      	beq.n	8001cd4 <_svfiprintf_r+0x124>
 8001d42:	9105      	str	r1, [sp, #20]
 8001d44:	e7c6      	b.n	8001cd4 <_svfiprintf_r+0x124>
 8001d46:	fb05 2101 	mla	r1, r5, r1, r2
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4607      	mov	r7, r0
 8001d4e:	e7f0      	b.n	8001d32 <_svfiprintf_r+0x182>
 8001d50:	ab03      	add	r3, sp, #12
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	4622      	mov	r2, r4
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <_svfiprintf_r+0x1ec>)
 8001d58:	a904      	add	r1, sp, #16
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	f3af 8000 	nop.w
 8001d60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001d64:	4681      	mov	r9, r0
 8001d66:	d1d6      	bne.n	8001d16 <_svfiprintf_r+0x166>
 8001d68:	89a3      	ldrh	r3, [r4, #12]
 8001d6a:	065b      	lsls	r3, r3, #25
 8001d6c:	f53f af35 	bmi.w	8001bda <_svfiprintf_r+0x2a>
 8001d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d72:	b01d      	add	sp, #116	; 0x74
 8001d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d78:	ab03      	add	r3, sp, #12
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	4622      	mov	r2, r4
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <_svfiprintf_r+0x1ec>)
 8001d80:	a904      	add	r1, sp, #16
 8001d82:	4640      	mov	r0, r8
 8001d84:	f000 f882 	bl	8001e8c <_printf_i>
 8001d88:	e7ea      	b.n	8001d60 <_svfiprintf_r+0x1b0>
 8001d8a:	bf00      	nop
 8001d8c:	080023e1 	.word	0x080023e1
 8001d90:	080023e7 	.word	0x080023e7
 8001d94:	080023eb 	.word	0x080023eb
 8001d98:	00000000 	.word	0x00000000
 8001d9c:	08001afd 	.word	0x08001afd

08001da0 <_printf_common>:
 8001da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001da4:	4691      	mov	r9, r2
 8001da6:	461f      	mov	r7, r3
 8001da8:	688a      	ldr	r2, [r1, #8]
 8001daa:	690b      	ldr	r3, [r1, #16]
 8001dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001db0:	4293      	cmp	r3, r2
 8001db2:	bfb8      	it	lt
 8001db4:	4613      	movlt	r3, r2
 8001db6:	f8c9 3000 	str.w	r3, [r9]
 8001dba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001dbe:	4606      	mov	r6, r0
 8001dc0:	460c      	mov	r4, r1
 8001dc2:	b112      	cbz	r2, 8001dca <_printf_common+0x2a>
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f8c9 3000 	str.w	r3, [r9]
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	0699      	lsls	r1, r3, #26
 8001dce:	bf42      	ittt	mi
 8001dd0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001dd4:	3302      	addmi	r3, #2
 8001dd6:	f8c9 3000 	strmi.w	r3, [r9]
 8001dda:	6825      	ldr	r5, [r4, #0]
 8001ddc:	f015 0506 	ands.w	r5, r5, #6
 8001de0:	d107      	bne.n	8001df2 <_printf_common+0x52>
 8001de2:	f104 0a19 	add.w	sl, r4, #25
 8001de6:	68e3      	ldr	r3, [r4, #12]
 8001de8:	f8d9 2000 	ldr.w	r2, [r9]
 8001dec:	1a9b      	subs	r3, r3, r2
 8001dee:	42ab      	cmp	r3, r5
 8001df0:	dc28      	bgt.n	8001e44 <_printf_common+0xa4>
 8001df2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001df6:	6822      	ldr	r2, [r4, #0]
 8001df8:	3300      	adds	r3, #0
 8001dfa:	bf18      	it	ne
 8001dfc:	2301      	movne	r3, #1
 8001dfe:	0692      	lsls	r2, r2, #26
 8001e00:	d42d      	bmi.n	8001e5e <_printf_common+0xbe>
 8001e02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e06:	4639      	mov	r1, r7
 8001e08:	4630      	mov	r0, r6
 8001e0a:	47c0      	blx	r8
 8001e0c:	3001      	adds	r0, #1
 8001e0e:	d020      	beq.n	8001e52 <_printf_common+0xb2>
 8001e10:	6823      	ldr	r3, [r4, #0]
 8001e12:	68e5      	ldr	r5, [r4, #12]
 8001e14:	f8d9 2000 	ldr.w	r2, [r9]
 8001e18:	f003 0306 	and.w	r3, r3, #6
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	bf08      	it	eq
 8001e20:	1aad      	subeq	r5, r5, r2
 8001e22:	68a3      	ldr	r3, [r4, #8]
 8001e24:	6922      	ldr	r2, [r4, #16]
 8001e26:	bf0c      	ite	eq
 8001e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e2c:	2500      	movne	r5, #0
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	bfc4      	itt	gt
 8001e32:	1a9b      	subgt	r3, r3, r2
 8001e34:	18ed      	addgt	r5, r5, r3
 8001e36:	f04f 0900 	mov.w	r9, #0
 8001e3a:	341a      	adds	r4, #26
 8001e3c:	454d      	cmp	r5, r9
 8001e3e:	d11a      	bne.n	8001e76 <_printf_common+0xd6>
 8001e40:	2000      	movs	r0, #0
 8001e42:	e008      	b.n	8001e56 <_printf_common+0xb6>
 8001e44:	2301      	movs	r3, #1
 8001e46:	4652      	mov	r2, sl
 8001e48:	4639      	mov	r1, r7
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	47c0      	blx	r8
 8001e4e:	3001      	adds	r0, #1
 8001e50:	d103      	bne.n	8001e5a <_printf_common+0xba>
 8001e52:	f04f 30ff 	mov.w	r0, #4294967295
 8001e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e5a:	3501      	adds	r5, #1
 8001e5c:	e7c3      	b.n	8001de6 <_printf_common+0x46>
 8001e5e:	18e1      	adds	r1, r4, r3
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	2030      	movs	r0, #48	; 0x30
 8001e64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e68:	4422      	add	r2, r4
 8001e6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e72:	3302      	adds	r3, #2
 8001e74:	e7c5      	b.n	8001e02 <_printf_common+0x62>
 8001e76:	2301      	movs	r3, #1
 8001e78:	4622      	mov	r2, r4
 8001e7a:	4639      	mov	r1, r7
 8001e7c:	4630      	mov	r0, r6
 8001e7e:	47c0      	blx	r8
 8001e80:	3001      	adds	r0, #1
 8001e82:	d0e6      	beq.n	8001e52 <_printf_common+0xb2>
 8001e84:	f109 0901 	add.w	r9, r9, #1
 8001e88:	e7d8      	b.n	8001e3c <_printf_common+0x9c>
	...

08001e8c <_printf_i>:
 8001e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001e94:	460c      	mov	r4, r1
 8001e96:	7e09      	ldrb	r1, [r1, #24]
 8001e98:	b085      	sub	sp, #20
 8001e9a:	296e      	cmp	r1, #110	; 0x6e
 8001e9c:	4617      	mov	r7, r2
 8001e9e:	4606      	mov	r6, r0
 8001ea0:	4698      	mov	r8, r3
 8001ea2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001ea4:	f000 80b3 	beq.w	800200e <_printf_i+0x182>
 8001ea8:	d822      	bhi.n	8001ef0 <_printf_i+0x64>
 8001eaa:	2963      	cmp	r1, #99	; 0x63
 8001eac:	d036      	beq.n	8001f1c <_printf_i+0x90>
 8001eae:	d80a      	bhi.n	8001ec6 <_printf_i+0x3a>
 8001eb0:	2900      	cmp	r1, #0
 8001eb2:	f000 80b9 	beq.w	8002028 <_printf_i+0x19c>
 8001eb6:	2958      	cmp	r1, #88	; 0x58
 8001eb8:	f000 8083 	beq.w	8001fc2 <_printf_i+0x136>
 8001ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ec0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001ec4:	e032      	b.n	8001f2c <_printf_i+0xa0>
 8001ec6:	2964      	cmp	r1, #100	; 0x64
 8001ec8:	d001      	beq.n	8001ece <_printf_i+0x42>
 8001eca:	2969      	cmp	r1, #105	; 0x69
 8001ecc:	d1f6      	bne.n	8001ebc <_printf_i+0x30>
 8001ece:	6820      	ldr	r0, [r4, #0]
 8001ed0:	6813      	ldr	r3, [r2, #0]
 8001ed2:	0605      	lsls	r5, r0, #24
 8001ed4:	f103 0104 	add.w	r1, r3, #4
 8001ed8:	d52a      	bpl.n	8001f30 <_printf_i+0xa4>
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6011      	str	r1, [r2, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	da03      	bge.n	8001eea <_printf_i+0x5e>
 8001ee2:	222d      	movs	r2, #45	; 0x2d
 8001ee4:	425b      	negs	r3, r3
 8001ee6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001eea:	486f      	ldr	r0, [pc, #444]	; (80020a8 <_printf_i+0x21c>)
 8001eec:	220a      	movs	r2, #10
 8001eee:	e039      	b.n	8001f64 <_printf_i+0xd8>
 8001ef0:	2973      	cmp	r1, #115	; 0x73
 8001ef2:	f000 809d 	beq.w	8002030 <_printf_i+0x1a4>
 8001ef6:	d808      	bhi.n	8001f0a <_printf_i+0x7e>
 8001ef8:	296f      	cmp	r1, #111	; 0x6f
 8001efa:	d020      	beq.n	8001f3e <_printf_i+0xb2>
 8001efc:	2970      	cmp	r1, #112	; 0x70
 8001efe:	d1dd      	bne.n	8001ebc <_printf_i+0x30>
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	f043 0320 	orr.w	r3, r3, #32
 8001f06:	6023      	str	r3, [r4, #0]
 8001f08:	e003      	b.n	8001f12 <_printf_i+0x86>
 8001f0a:	2975      	cmp	r1, #117	; 0x75
 8001f0c:	d017      	beq.n	8001f3e <_printf_i+0xb2>
 8001f0e:	2978      	cmp	r1, #120	; 0x78
 8001f10:	d1d4      	bne.n	8001ebc <_printf_i+0x30>
 8001f12:	2378      	movs	r3, #120	; 0x78
 8001f14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f18:	4864      	ldr	r0, [pc, #400]	; (80020ac <_printf_i+0x220>)
 8001f1a:	e055      	b.n	8001fc8 <_printf_i+0x13c>
 8001f1c:	6813      	ldr	r3, [r2, #0]
 8001f1e:	1d19      	adds	r1, r3, #4
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6011      	str	r1, [r2, #0]
 8001f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e08c      	b.n	800204a <_printf_i+0x1be>
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6011      	str	r1, [r2, #0]
 8001f34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f38:	bf18      	it	ne
 8001f3a:	b21b      	sxthne	r3, r3
 8001f3c:	e7cf      	b.n	8001ede <_printf_i+0x52>
 8001f3e:	6813      	ldr	r3, [r2, #0]
 8001f40:	6825      	ldr	r5, [r4, #0]
 8001f42:	1d18      	adds	r0, r3, #4
 8001f44:	6010      	str	r0, [r2, #0]
 8001f46:	0628      	lsls	r0, r5, #24
 8001f48:	d501      	bpl.n	8001f4e <_printf_i+0xc2>
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	e002      	b.n	8001f54 <_printf_i+0xc8>
 8001f4e:	0668      	lsls	r0, r5, #25
 8001f50:	d5fb      	bpl.n	8001f4a <_printf_i+0xbe>
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	4854      	ldr	r0, [pc, #336]	; (80020a8 <_printf_i+0x21c>)
 8001f56:	296f      	cmp	r1, #111	; 0x6f
 8001f58:	bf14      	ite	ne
 8001f5a:	220a      	movne	r2, #10
 8001f5c:	2208      	moveq	r2, #8
 8001f5e:	2100      	movs	r1, #0
 8001f60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f64:	6865      	ldr	r5, [r4, #4]
 8001f66:	60a5      	str	r5, [r4, #8]
 8001f68:	2d00      	cmp	r5, #0
 8001f6a:	f2c0 8095 	blt.w	8002098 <_printf_i+0x20c>
 8001f6e:	6821      	ldr	r1, [r4, #0]
 8001f70:	f021 0104 	bic.w	r1, r1, #4
 8001f74:	6021      	str	r1, [r4, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d13d      	bne.n	8001ff6 <_printf_i+0x16a>
 8001f7a:	2d00      	cmp	r5, #0
 8001f7c:	f040 808e 	bne.w	800209c <_printf_i+0x210>
 8001f80:	4665      	mov	r5, ip
 8001f82:	2a08      	cmp	r2, #8
 8001f84:	d10b      	bne.n	8001f9e <_printf_i+0x112>
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	07db      	lsls	r3, r3, #31
 8001f8a:	d508      	bpl.n	8001f9e <_printf_i+0x112>
 8001f8c:	6923      	ldr	r3, [r4, #16]
 8001f8e:	6862      	ldr	r2, [r4, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	bfde      	ittt	le
 8001f94:	2330      	movle	r3, #48	; 0x30
 8001f96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f9e:	ebac 0305 	sub.w	r3, ip, r5
 8001fa2:	6123      	str	r3, [r4, #16]
 8001fa4:	f8cd 8000 	str.w	r8, [sp]
 8001fa8:	463b      	mov	r3, r7
 8001faa:	aa03      	add	r2, sp, #12
 8001fac:	4621      	mov	r1, r4
 8001fae:	4630      	mov	r0, r6
 8001fb0:	f7ff fef6 	bl	8001da0 <_printf_common>
 8001fb4:	3001      	adds	r0, #1
 8001fb6:	d14d      	bne.n	8002054 <_printf_i+0x1c8>
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	b005      	add	sp, #20
 8001fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fc2:	4839      	ldr	r0, [pc, #228]	; (80020a8 <_printf_i+0x21c>)
 8001fc4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001fc8:	6813      	ldr	r3, [r2, #0]
 8001fca:	6821      	ldr	r1, [r4, #0]
 8001fcc:	1d1d      	adds	r5, r3, #4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6015      	str	r5, [r2, #0]
 8001fd2:	060a      	lsls	r2, r1, #24
 8001fd4:	d50b      	bpl.n	8001fee <_printf_i+0x162>
 8001fd6:	07ca      	lsls	r2, r1, #31
 8001fd8:	bf44      	itt	mi
 8001fda:	f041 0120 	orrmi.w	r1, r1, #32
 8001fde:	6021      	strmi	r1, [r4, #0]
 8001fe0:	b91b      	cbnz	r3, 8001fea <_printf_i+0x15e>
 8001fe2:	6822      	ldr	r2, [r4, #0]
 8001fe4:	f022 0220 	bic.w	r2, r2, #32
 8001fe8:	6022      	str	r2, [r4, #0]
 8001fea:	2210      	movs	r2, #16
 8001fec:	e7b7      	b.n	8001f5e <_printf_i+0xd2>
 8001fee:	064d      	lsls	r5, r1, #25
 8001ff0:	bf48      	it	mi
 8001ff2:	b29b      	uxthmi	r3, r3
 8001ff4:	e7ef      	b.n	8001fd6 <_printf_i+0x14a>
 8001ff6:	4665      	mov	r5, ip
 8001ff8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ffc:	fb02 3311 	mls	r3, r2, r1, r3
 8002000:	5cc3      	ldrb	r3, [r0, r3]
 8002002:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002006:	460b      	mov	r3, r1
 8002008:	2900      	cmp	r1, #0
 800200a:	d1f5      	bne.n	8001ff8 <_printf_i+0x16c>
 800200c:	e7b9      	b.n	8001f82 <_printf_i+0xf6>
 800200e:	6813      	ldr	r3, [r2, #0]
 8002010:	6825      	ldr	r5, [r4, #0]
 8002012:	6961      	ldr	r1, [r4, #20]
 8002014:	1d18      	adds	r0, r3, #4
 8002016:	6010      	str	r0, [r2, #0]
 8002018:	0628      	lsls	r0, r5, #24
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	d501      	bpl.n	8002022 <_printf_i+0x196>
 800201e:	6019      	str	r1, [r3, #0]
 8002020:	e002      	b.n	8002028 <_printf_i+0x19c>
 8002022:	066a      	lsls	r2, r5, #25
 8002024:	d5fb      	bpl.n	800201e <_printf_i+0x192>
 8002026:	8019      	strh	r1, [r3, #0]
 8002028:	2300      	movs	r3, #0
 800202a:	6123      	str	r3, [r4, #16]
 800202c:	4665      	mov	r5, ip
 800202e:	e7b9      	b.n	8001fa4 <_printf_i+0x118>
 8002030:	6813      	ldr	r3, [r2, #0]
 8002032:	1d19      	adds	r1, r3, #4
 8002034:	6011      	str	r1, [r2, #0]
 8002036:	681d      	ldr	r5, [r3, #0]
 8002038:	6862      	ldr	r2, [r4, #4]
 800203a:	2100      	movs	r1, #0
 800203c:	4628      	mov	r0, r5
 800203e:	f7fe f8d7 	bl	80001f0 <memchr>
 8002042:	b108      	cbz	r0, 8002048 <_printf_i+0x1bc>
 8002044:	1b40      	subs	r0, r0, r5
 8002046:	6060      	str	r0, [r4, #4]
 8002048:	6863      	ldr	r3, [r4, #4]
 800204a:	6123      	str	r3, [r4, #16]
 800204c:	2300      	movs	r3, #0
 800204e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002052:	e7a7      	b.n	8001fa4 <_printf_i+0x118>
 8002054:	6923      	ldr	r3, [r4, #16]
 8002056:	462a      	mov	r2, r5
 8002058:	4639      	mov	r1, r7
 800205a:	4630      	mov	r0, r6
 800205c:	47c0      	blx	r8
 800205e:	3001      	adds	r0, #1
 8002060:	d0aa      	beq.n	8001fb8 <_printf_i+0x12c>
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	079b      	lsls	r3, r3, #30
 8002066:	d413      	bmi.n	8002090 <_printf_i+0x204>
 8002068:	68e0      	ldr	r0, [r4, #12]
 800206a:	9b03      	ldr	r3, [sp, #12]
 800206c:	4298      	cmp	r0, r3
 800206e:	bfb8      	it	lt
 8002070:	4618      	movlt	r0, r3
 8002072:	e7a3      	b.n	8001fbc <_printf_i+0x130>
 8002074:	2301      	movs	r3, #1
 8002076:	464a      	mov	r2, r9
 8002078:	4639      	mov	r1, r7
 800207a:	4630      	mov	r0, r6
 800207c:	47c0      	blx	r8
 800207e:	3001      	adds	r0, #1
 8002080:	d09a      	beq.n	8001fb8 <_printf_i+0x12c>
 8002082:	3501      	adds	r5, #1
 8002084:	68e3      	ldr	r3, [r4, #12]
 8002086:	9a03      	ldr	r2, [sp, #12]
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	42ab      	cmp	r3, r5
 800208c:	dcf2      	bgt.n	8002074 <_printf_i+0x1e8>
 800208e:	e7eb      	b.n	8002068 <_printf_i+0x1dc>
 8002090:	2500      	movs	r5, #0
 8002092:	f104 0919 	add.w	r9, r4, #25
 8002096:	e7f5      	b.n	8002084 <_printf_i+0x1f8>
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1ac      	bne.n	8001ff6 <_printf_i+0x16a>
 800209c:	7803      	ldrb	r3, [r0, #0]
 800209e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020a6:	e76c      	b.n	8001f82 <_printf_i+0xf6>
 80020a8:	080023f2 	.word	0x080023f2
 80020ac:	08002403 	.word	0x08002403

080020b0 <memmove>:
 80020b0:	4288      	cmp	r0, r1
 80020b2:	b510      	push	{r4, lr}
 80020b4:	eb01 0302 	add.w	r3, r1, r2
 80020b8:	d807      	bhi.n	80020ca <memmove+0x1a>
 80020ba:	1e42      	subs	r2, r0, #1
 80020bc:	4299      	cmp	r1, r3
 80020be:	d00a      	beq.n	80020d6 <memmove+0x26>
 80020c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80020c8:	e7f8      	b.n	80020bc <memmove+0xc>
 80020ca:	4283      	cmp	r3, r0
 80020cc:	d9f5      	bls.n	80020ba <memmove+0xa>
 80020ce:	1881      	adds	r1, r0, r2
 80020d0:	1ad2      	subs	r2, r2, r3
 80020d2:	42d3      	cmn	r3, r2
 80020d4:	d100      	bne.n	80020d8 <memmove+0x28>
 80020d6:	bd10      	pop	{r4, pc}
 80020d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80020e0:	e7f7      	b.n	80020d2 <memmove+0x22>
	...

080020e4 <_free_r>:
 80020e4:	b538      	push	{r3, r4, r5, lr}
 80020e6:	4605      	mov	r5, r0
 80020e8:	2900      	cmp	r1, #0
 80020ea:	d045      	beq.n	8002178 <_free_r+0x94>
 80020ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020f0:	1f0c      	subs	r4, r1, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bfb8      	it	lt
 80020f6:	18e4      	addlt	r4, r4, r3
 80020f8:	f000 f8d2 	bl	80022a0 <__malloc_lock>
 80020fc:	4a1f      	ldr	r2, [pc, #124]	; (800217c <_free_r+0x98>)
 80020fe:	6813      	ldr	r3, [r2, #0]
 8002100:	4610      	mov	r0, r2
 8002102:	b933      	cbnz	r3, 8002112 <_free_r+0x2e>
 8002104:	6063      	str	r3, [r4, #4]
 8002106:	6014      	str	r4, [r2, #0]
 8002108:	4628      	mov	r0, r5
 800210a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800210e:	f000 b8c8 	b.w	80022a2 <__malloc_unlock>
 8002112:	42a3      	cmp	r3, r4
 8002114:	d90c      	bls.n	8002130 <_free_r+0x4c>
 8002116:	6821      	ldr	r1, [r4, #0]
 8002118:	1862      	adds	r2, r4, r1
 800211a:	4293      	cmp	r3, r2
 800211c:	bf04      	itt	eq
 800211e:	681a      	ldreq	r2, [r3, #0]
 8002120:	685b      	ldreq	r3, [r3, #4]
 8002122:	6063      	str	r3, [r4, #4]
 8002124:	bf04      	itt	eq
 8002126:	1852      	addeq	r2, r2, r1
 8002128:	6022      	streq	r2, [r4, #0]
 800212a:	6004      	str	r4, [r0, #0]
 800212c:	e7ec      	b.n	8002108 <_free_r+0x24>
 800212e:	4613      	mov	r3, r2
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	b10a      	cbz	r2, 8002138 <_free_r+0x54>
 8002134:	42a2      	cmp	r2, r4
 8002136:	d9fa      	bls.n	800212e <_free_r+0x4a>
 8002138:	6819      	ldr	r1, [r3, #0]
 800213a:	1858      	adds	r0, r3, r1
 800213c:	42a0      	cmp	r0, r4
 800213e:	d10b      	bne.n	8002158 <_free_r+0x74>
 8002140:	6820      	ldr	r0, [r4, #0]
 8002142:	4401      	add	r1, r0
 8002144:	1858      	adds	r0, r3, r1
 8002146:	4282      	cmp	r2, r0
 8002148:	6019      	str	r1, [r3, #0]
 800214a:	d1dd      	bne.n	8002108 <_free_r+0x24>
 800214c:	6810      	ldr	r0, [r2, #0]
 800214e:	6852      	ldr	r2, [r2, #4]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	4401      	add	r1, r0
 8002154:	6019      	str	r1, [r3, #0]
 8002156:	e7d7      	b.n	8002108 <_free_r+0x24>
 8002158:	d902      	bls.n	8002160 <_free_r+0x7c>
 800215a:	230c      	movs	r3, #12
 800215c:	602b      	str	r3, [r5, #0]
 800215e:	e7d3      	b.n	8002108 <_free_r+0x24>
 8002160:	6820      	ldr	r0, [r4, #0]
 8002162:	1821      	adds	r1, r4, r0
 8002164:	428a      	cmp	r2, r1
 8002166:	bf04      	itt	eq
 8002168:	6811      	ldreq	r1, [r2, #0]
 800216a:	6852      	ldreq	r2, [r2, #4]
 800216c:	6062      	str	r2, [r4, #4]
 800216e:	bf04      	itt	eq
 8002170:	1809      	addeq	r1, r1, r0
 8002172:	6021      	streq	r1, [r4, #0]
 8002174:	605c      	str	r4, [r3, #4]
 8002176:	e7c7      	b.n	8002108 <_free_r+0x24>
 8002178:	bd38      	pop	{r3, r4, r5, pc}
 800217a:	bf00      	nop
 800217c:	2000009c 	.word	0x2000009c

08002180 <_malloc_r>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	1ccd      	adds	r5, r1, #3
 8002184:	f025 0503 	bic.w	r5, r5, #3
 8002188:	3508      	adds	r5, #8
 800218a:	2d0c      	cmp	r5, #12
 800218c:	bf38      	it	cc
 800218e:	250c      	movcc	r5, #12
 8002190:	2d00      	cmp	r5, #0
 8002192:	4606      	mov	r6, r0
 8002194:	db01      	blt.n	800219a <_malloc_r+0x1a>
 8002196:	42a9      	cmp	r1, r5
 8002198:	d903      	bls.n	80021a2 <_malloc_r+0x22>
 800219a:	230c      	movs	r3, #12
 800219c:	6033      	str	r3, [r6, #0]
 800219e:	2000      	movs	r0, #0
 80021a0:	bd70      	pop	{r4, r5, r6, pc}
 80021a2:	f000 f87d 	bl	80022a0 <__malloc_lock>
 80021a6:	4a21      	ldr	r2, [pc, #132]	; (800222c <_malloc_r+0xac>)
 80021a8:	6814      	ldr	r4, [r2, #0]
 80021aa:	4621      	mov	r1, r4
 80021ac:	b991      	cbnz	r1, 80021d4 <_malloc_r+0x54>
 80021ae:	4c20      	ldr	r4, [pc, #128]	; (8002230 <_malloc_r+0xb0>)
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	b91b      	cbnz	r3, 80021bc <_malloc_r+0x3c>
 80021b4:	4630      	mov	r0, r6
 80021b6:	f000 f863 	bl	8002280 <_sbrk_r>
 80021ba:	6020      	str	r0, [r4, #0]
 80021bc:	4629      	mov	r1, r5
 80021be:	4630      	mov	r0, r6
 80021c0:	f000 f85e 	bl	8002280 <_sbrk_r>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	d124      	bne.n	8002212 <_malloc_r+0x92>
 80021c8:	230c      	movs	r3, #12
 80021ca:	6033      	str	r3, [r6, #0]
 80021cc:	4630      	mov	r0, r6
 80021ce:	f000 f868 	bl	80022a2 <__malloc_unlock>
 80021d2:	e7e4      	b.n	800219e <_malloc_r+0x1e>
 80021d4:	680b      	ldr	r3, [r1, #0]
 80021d6:	1b5b      	subs	r3, r3, r5
 80021d8:	d418      	bmi.n	800220c <_malloc_r+0x8c>
 80021da:	2b0b      	cmp	r3, #11
 80021dc:	d90f      	bls.n	80021fe <_malloc_r+0x7e>
 80021de:	600b      	str	r3, [r1, #0]
 80021e0:	50cd      	str	r5, [r1, r3]
 80021e2:	18cc      	adds	r4, r1, r3
 80021e4:	4630      	mov	r0, r6
 80021e6:	f000 f85c 	bl	80022a2 <__malloc_unlock>
 80021ea:	f104 000b 	add.w	r0, r4, #11
 80021ee:	1d23      	adds	r3, r4, #4
 80021f0:	f020 0007 	bic.w	r0, r0, #7
 80021f4:	1ac3      	subs	r3, r0, r3
 80021f6:	d0d3      	beq.n	80021a0 <_malloc_r+0x20>
 80021f8:	425a      	negs	r2, r3
 80021fa:	50e2      	str	r2, [r4, r3]
 80021fc:	e7d0      	b.n	80021a0 <_malloc_r+0x20>
 80021fe:	428c      	cmp	r4, r1
 8002200:	684b      	ldr	r3, [r1, #4]
 8002202:	bf16      	itet	ne
 8002204:	6063      	strne	r3, [r4, #4]
 8002206:	6013      	streq	r3, [r2, #0]
 8002208:	460c      	movne	r4, r1
 800220a:	e7eb      	b.n	80021e4 <_malloc_r+0x64>
 800220c:	460c      	mov	r4, r1
 800220e:	6849      	ldr	r1, [r1, #4]
 8002210:	e7cc      	b.n	80021ac <_malloc_r+0x2c>
 8002212:	1cc4      	adds	r4, r0, #3
 8002214:	f024 0403 	bic.w	r4, r4, #3
 8002218:	42a0      	cmp	r0, r4
 800221a:	d005      	beq.n	8002228 <_malloc_r+0xa8>
 800221c:	1a21      	subs	r1, r4, r0
 800221e:	4630      	mov	r0, r6
 8002220:	f000 f82e 	bl	8002280 <_sbrk_r>
 8002224:	3001      	adds	r0, #1
 8002226:	d0cf      	beq.n	80021c8 <_malloc_r+0x48>
 8002228:	6025      	str	r5, [r4, #0]
 800222a:	e7db      	b.n	80021e4 <_malloc_r+0x64>
 800222c:	2000009c 	.word	0x2000009c
 8002230:	200000a0 	.word	0x200000a0

08002234 <_realloc_r>:
 8002234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002236:	4607      	mov	r7, r0
 8002238:	4614      	mov	r4, r2
 800223a:	460e      	mov	r6, r1
 800223c:	b921      	cbnz	r1, 8002248 <_realloc_r+0x14>
 800223e:	4611      	mov	r1, r2
 8002240:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002244:	f7ff bf9c 	b.w	8002180 <_malloc_r>
 8002248:	b922      	cbnz	r2, 8002254 <_realloc_r+0x20>
 800224a:	f7ff ff4b 	bl	80020e4 <_free_r>
 800224e:	4625      	mov	r5, r4
 8002250:	4628      	mov	r0, r5
 8002252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002254:	f000 f826 	bl	80022a4 <_malloc_usable_size_r>
 8002258:	42a0      	cmp	r0, r4
 800225a:	d20f      	bcs.n	800227c <_realloc_r+0x48>
 800225c:	4621      	mov	r1, r4
 800225e:	4638      	mov	r0, r7
 8002260:	f7ff ff8e 	bl	8002180 <_malloc_r>
 8002264:	4605      	mov	r5, r0
 8002266:	2800      	cmp	r0, #0
 8002268:	d0f2      	beq.n	8002250 <_realloc_r+0x1c>
 800226a:	4631      	mov	r1, r6
 800226c:	4622      	mov	r2, r4
 800226e:	f7ff fc11 	bl	8001a94 <memcpy>
 8002272:	4631      	mov	r1, r6
 8002274:	4638      	mov	r0, r7
 8002276:	f7ff ff35 	bl	80020e4 <_free_r>
 800227a:	e7e9      	b.n	8002250 <_realloc_r+0x1c>
 800227c:	4635      	mov	r5, r6
 800227e:	e7e7      	b.n	8002250 <_realloc_r+0x1c>

08002280 <_sbrk_r>:
 8002280:	b538      	push	{r3, r4, r5, lr}
 8002282:	4c06      	ldr	r4, [pc, #24]	; (800229c <_sbrk_r+0x1c>)
 8002284:	2300      	movs	r3, #0
 8002286:	4605      	mov	r5, r0
 8002288:	4608      	mov	r0, r1
 800228a:	6023      	str	r3, [r4, #0]
 800228c:	f7fe fda0 	bl	8000dd0 <_sbrk>
 8002290:	1c43      	adds	r3, r0, #1
 8002292:	d102      	bne.n	800229a <_sbrk_r+0x1a>
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	b103      	cbz	r3, 800229a <_sbrk_r+0x1a>
 8002298:	602b      	str	r3, [r5, #0]
 800229a:	bd38      	pop	{r3, r4, r5, pc}
 800229c:	20000110 	.word	0x20000110

080022a0 <__malloc_lock>:
 80022a0:	4770      	bx	lr

080022a2 <__malloc_unlock>:
 80022a2:	4770      	bx	lr

080022a4 <_malloc_usable_size_r>:
 80022a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022a8:	1f18      	subs	r0, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bfbc      	itt	lt
 80022ae:	580b      	ldrlt	r3, [r1, r0]
 80022b0:	18c0      	addlt	r0, r0, r3
 80022b2:	4770      	bx	lr

080022b4 <_init>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	bf00      	nop
 80022b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ba:	bc08      	pop	{r3}
 80022bc:	469e      	mov	lr, r3
 80022be:	4770      	bx	lr

080022c0 <_fini>:
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	bf00      	nop
 80022c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c6:	bc08      	pop	{r3}
 80022c8:	469e      	mov	lr, r3
 80022ca:	4770      	bx	lr
