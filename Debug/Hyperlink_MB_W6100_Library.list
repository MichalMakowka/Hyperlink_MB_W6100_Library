
Hyperlink_MB_W6100_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001668  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080017f0  080017f0  000117f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001874  08001874  0001187c  2**0
                  CONTENTS
  4 .ARM          00000000  08001874  08001874  0001187c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001874  0800187c  0001187c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001874  08001874  00011874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001878  08001878  00011878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001187c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000000  0800187c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800187c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001187c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050f1  00000000  00000000  000118ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cd1  00000000  00000000  0001699d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e0  00000000  00000000  00017670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00017850  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f0c  00000000  00000000  000179c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002a07  00000000  00000000  000308d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083b7c  00000000  00000000  000332db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b6e57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000670  00000000  00000000  000b6ed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080017d8 	.word	0x080017d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080017d8 	.word	0x080017d8

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	db0b      	blt.n	8000206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	f003 021f 	and.w	r2, r3, #31
 80001f4:	4907      	ldr	r1, [pc, #28]	; (8000214 <__NVIC_EnableIRQ+0x38>)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	095b      	lsrs	r3, r3, #5
 80001fc:	2001      	movs	r0, #1
 80001fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e100 	.word	0xe000e100

08000218 <CanInit>:
 */

#include "can.h"


void CanInit(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

	// *** Pin configuration and remap assignment *** //
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;		// Enable CAN 1 CLK
 800021c:	4b1d      	ldr	r3, [pc, #116]	; (8000294 <CanInit+0x7c>)
 800021e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000220:	4a1c      	ldr	r2, [pc, #112]	; (8000294 <CanInit+0x7c>)
 8000222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000226:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOB->MODER |= GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1;	// PB8 and PB9 Alternative Function
 8000228:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <CanInit+0x80>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <CanInit+0x80>)
 800022e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000232:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[1] |= GPIO_AFRH_AFRH0_3 | GPIO_AFRH_AFRH0_0 | GPIO_AFRH_AFRH1_0 | GPIO_AFRH_AFRH1_3;		// Alternative function mapped to CAN1_Tx and CAN1_Rx
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <CanInit+0x80>)
 8000236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000238:	4a17      	ldr	r2, [pc, #92]	; (8000298 <CanInit+0x80>)
 800023a:	f043 0399 	orr.w	r3, r3, #153	; 0x99
 800023e:	6253      	str	r3, [r2, #36]	; 0x24

	CAN1->MCR |= CAN_MCR_INRQ;			// Initialisation mode on
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <CanInit+0x84>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a15      	ldr	r2, [pc, #84]	; (800029c <CanInit+0x84>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6013      	str	r3, [r2, #0]

	// *** CAN Test Mode *** //
//	CAN1->BTR |= CAN_BTR_LBKM;			// Loopback mode enabled (For Debug purposes)
	// ********************* //

	NVIC_EnableIRQ(CAN1_TX_IRQn);
 800024c:	2013      	movs	r0, #19
 800024e:	f7ff ffc5 	bl	80001dc <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000252:	2014      	movs	r0, #20
 8000254:	f7ff ffc2 	bl	80001dc <__NVIC_EnableIRQ>

	CAN1->IER |= CAN_IER_FMPIE0;		// Interrupt generated when state of FMP[1:0] bits are not 00b
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <CanInit+0x84>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a0f      	ldr	r2, [pc, #60]	; (800029c <CanInit+0x84>)
 800025e:	f043 0302 	orr.w	r3, r3, #2
 8000262:	6153      	str	r3, [r2, #20]

	CAN1->BTR = 0x00080004;				// CAN Bitrate: 500k
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <CanInit+0x84>)
 8000266:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <CanInit+0x88>)
 8000268:	61da      	str	r2, [r3, #28]


	CAN1->MCR &= ~CAN_MCR_INRQ;			// Initialisation mode off
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <CanInit+0x84>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a0b      	ldr	r2, [pc, #44]	; (800029c <CanInit+0x84>)
 8000270:	f023 0301 	bic.w	r3, r3, #1
 8000274:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MCR_INRQ);
 8000276:	bf00      	nop
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <CanInit+0x84>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1f9      	bne.n	8000278 <CanInit+0x60>


	CAN1->MCR &= ~CAN_MCR_SLEEP;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <CanInit+0x84>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <CanInit+0x84>)
 800028a:	f023 0302 	bic.w	r3, r3, #2
 800028e:	6013      	str	r3, [r2, #0]


}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40023800 	.word	0x40023800
 8000298:	40020400 	.word	0x40020400
 800029c:	40006400 	.word	0x40006400
 80002a0:	00080004 	.word	0x00080004

080002a4 <Can_Tx_Msg>:


void Can_Tx_Msg(CAN_MESSAGE * msg) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]

	CAN1->sTxMailBox[0].TIR = 0;		// Empty TIR register
 80002ac:	4b3c      	ldr	r3, [pc, #240]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	if(msg->format == STANDARD_FORMAT)	{
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d10a      	bne.n	80002d2 <Can_Tx_Msg+0x2e>
		CAN1->sTxMailBox[0].TIR |= (u_int) (msg->id << 21) | CAN_ID_STD;
 80002bc:	4b38      	ldr	r3, [pc, #224]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002be:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	055b      	lsls	r3, r3, #21
 80002c8:	4935      	ldr	r1, [pc, #212]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002ca:	4313      	orrs	r3, r2
 80002cc:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
 80002d0:	e009      	b.n	80002e6 <Can_Tx_Msg+0x42>
	} else {
		CAN1->sTxMailBox[0].TIR |= (u_int) (msg->id << 3) | CAN_ID_EXT;
 80002d2:	4b33      	ldr	r3, [pc, #204]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002d4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	00db      	lsls	r3, r3, #3
 80002de:	4930      	ldr	r1, [pc, #192]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002e0:	4313      	orrs	r3, r2
 80002e2:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
	}

	if (msg->type == DATA_FRAME)  {                 // DATA FRAME
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	695b      	ldr	r3, [r3, #20]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d106      	bne.n	80002fc <Can_Tx_Msg+0x58>
	    CAN1->sTxMailBox[0].TIR |= CAN_RTR_DATA;
 80002ee:	4b2c      	ldr	r3, [pc, #176]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002f0:	4a2b      	ldr	r2, [pc, #172]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002f2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80002f6:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 80002fa:	e005      	b.n	8000308 <Can_Tx_Msg+0x64>
	} else {                                        // REMOTE FRAME
	    CAN1->sTxMailBox[0].TIR |= CAN_RTR_REMOTE;
 80002fc:	4b28      	ldr	r3, [pc, #160]	; (80003a0 <Can_Tx_Msg+0xfc>)
 80002fe:	4a28      	ldr	r2, [pc, #160]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000300:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000304:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	}

	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	79db      	ldrb	r3, [r3, #7]
 800030c:	061a      	lsls	r2, r3, #24
	                          ((u_int)msg->data[2] << 16) |
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	799b      	ldrb	r3, [r3, #6]
 8000312:	041b      	lsls	r3, r3, #16
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 8000314:	431a      	orrs	r2, r3
	                          ((u_int)msg->data[1] <<  8) |
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	795b      	ldrb	r3, [r3, #5]
 800031a:	021b      	lsls	r3, r3, #8
	                          ((u_int)msg->data[2] << 16) |
 800031c:	4313      	orrs	r3, r2
	                          ((u_int)msg->data[0]));
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	7912      	ldrb	r2, [r2, #4]
 8000322:	4611      	mov	r1, r2
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 8000324:	4a1e      	ldr	r2, [pc, #120]	; (80003a0 <Can_Tx_Msg+0xfc>)
	                          ((u_int)msg->data[1] <<  8) |
 8000326:	430b      	orrs	r3, r1
	CAN1->sTxMailBox[0].TDLR = (((u_int)msg->data[3] << 24) |
 8000328:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	7adb      	ldrb	r3, [r3, #11]
 8000330:	061a      	lsls	r2, r3, #24
	                          ((u_int)msg->data[6] << 16) |
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	7a9b      	ldrb	r3, [r3, #10]
 8000336:	041b      	lsls	r3, r3, #16
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 8000338:	431a      	orrs	r2, r3
	                          ((u_int)msg->data[5] <<  8) |
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	7a5b      	ldrb	r3, [r3, #9]
 800033e:	021b      	lsls	r3, r3, #8
	                          ((u_int)msg->data[6] << 16) |
 8000340:	4313      	orrs	r3, r2
	                          ((u_int)msg->data[4]));
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	7a12      	ldrb	r2, [r2, #8]
 8000346:	4611      	mov	r1, r2
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 8000348:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <Can_Tx_Msg+0xfc>)
	                          ((u_int)msg->data[5] <<  8) |
 800034a:	430b      	orrs	r3, r1
	CAN1->sTxMailBox[0].TDHR = (((u_int)msg->data[7] << 24) |
 800034c:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c

	CAN1->sTxMailBox[0].TDTR &= ~CAN_TDT1R_DLC;
 8000350:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000352:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8000356:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000358:	f023 030f 	bic.w	r3, r3, #15
 800035c:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	CAN1->sTxMailBox[0].TDTR |=  (msg->len & CAN_TDT0R_DLC);
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000362:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	f003 030f 	and.w	r3, r3, #15
 800036e:	490c      	ldr	r1, [pc, #48]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000370:	4313      	orrs	r3, r2
 8000372:	f8c1 3184 	str.w	r3, [r1, #388]	; 0x184

	CAN1->IER |= CAN_IER_TMEIE;                      // enable  TME interrupt
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	4a09      	ldr	r2, [pc, #36]	; (80003a0 <Can_Tx_Msg+0xfc>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6153      	str	r3, [r2, #20]
	CAN1->sTxMailBox[0].TIR |=  CAN_TI0R_TXRQ;       // transmit message
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <Can_Tx_Msg+0xfc>)
 8000384:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000388:	4a05      	ldr	r2, [pc, #20]	; (80003a0 <Can_Tx_Msg+0xfc>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40006400 	.word	0x40006400

080003a4 <Can_Rx_Msg>:


void Can_Rx_Msg(CAN_MESSAGE * msg) {
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]

	if ((CAN1->sFIFOMailBox[0].RIR & CAN_ID_EXT) == 0) { // Standard ID
 80003ac:	4b2e      	ldr	r3, [pc, #184]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003ae:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->format = STANDARD_FORMAT;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
	    msg->id     = (uint32_t)0x000007FF & (CAN1->sFIFOMailBox[0].RIR >> 21);
 80003b8:	4b2b      	ldr	r3, [pc, #172]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003ba:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80003be:	0d5b      	lsrs	r3, r3, #21
 80003c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	601a      	str	r2, [r3, #0]
	  }  else  {                                          // Extended ID
	    msg->format = EXTENDED_FORMAT;
	    msg->id     = (uint32_t)0x0003FFFF & (CAN1->sFIFOMailBox[0].RIR >> 3);
	  }
	                                                  // Read type information
	  if ((CAN1->sFIFOMailBox[0].RIR & CAN_RTR_REMOTE) == 0) {
 80003c8:	4b27      	ldr	r3, [pc, #156]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003ca:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	    msg->type =   DATA_FRAME;                     // DATA   FRAME
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
	  }  else  {
	    msg->type = REMOTE_FRAME;                     // REMOTE FRAME
	  }

	  msg->len = (char)0x0000000F & CAN1->sFIFOMailBox[0].RDTR;
 80003d4:	4b24      	ldr	r3, [pc, #144]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003d6:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80003da:	f003 020f 	and.w	r2, r3, #15
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	60da      	str	r2, [r3, #12]
	                                                    // Read data
	  msg->data[0] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR);
 80003e2:	4b21      	ldr	r3, [pc, #132]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003e4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003e8:	b2da      	uxtb	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	711a      	strb	r2, [r3, #4]
	  msg->data[1] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 8);
 80003ee:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003f0:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80003f4:	0a1b      	lsrs	r3, r3, #8
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	715a      	strb	r2, [r3, #5]
	  msg->data[2] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 16);
 80003fc:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <Can_Rx_Msg+0xc4>)
 80003fe:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000402:	0c1b      	lsrs	r3, r3, #16
 8000404:	b2da      	uxtb	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	719a      	strb	r2, [r3, #6]
	  msg->data[3] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDLR >> 24);
 800040a:	4b17      	ldr	r3, [pc, #92]	; (8000468 <Can_Rx_Msg+0xc4>)
 800040c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000410:	0e1b      	lsrs	r3, r3, #24
 8000412:	b2da      	uxtb	r2, r3
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	71da      	strb	r2, [r3, #7]

	  msg->data[4] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR);
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <Can_Rx_Msg+0xc4>)
 800041a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800041e:	b2da      	uxtb	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	721a      	strb	r2, [r3, #8]
	  msg->data[5] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 8);
 8000424:	4b10      	ldr	r3, [pc, #64]	; (8000468 <Can_Rx_Msg+0xc4>)
 8000426:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800042a:	0a1b      	lsrs	r3, r3, #8
 800042c:	b2da      	uxtb	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	725a      	strb	r2, [r3, #9]
	  msg->data[6] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 16);
 8000432:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <Can_Rx_Msg+0xc4>)
 8000434:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000438:	0c1b      	lsrs	r3, r3, #16
 800043a:	b2da      	uxtb	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	729a      	strb	r2, [r3, #10]
	  msg->data[7] = (u_int)0x000000FF & (CAN1->sFIFOMailBox[0].RDHR >> 24);
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <Can_Rx_Msg+0xc4>)
 8000442:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8000446:	0e1b      	lsrs	r3, r3, #24
 8000448:	b2da      	uxtb	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	72da      	strb	r2, [r3, #11]

	  CAN1->RF0R |= CAN_RF0R_RFOM0;                    // Release FIFO 0 output mailbox
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <Can_Rx_Msg+0xc4>)
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	4a05      	ldr	r2, [pc, #20]	; (8000468 <Can_Rx_Msg+0xc4>)
 8000454:	f043 0320 	orr.w	r3, r3, #32
 8000458:	60d3      	str	r3, [r2, #12]

}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40006400 	.word	0x40006400

0800046c <Can_Set_Filter>:


void Can_Set_Filter(uint id, char format) {
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	460b      	mov	r3, r1
 8000476:	70fb      	strb	r3, [r7, #3]

	static unsigned short CAN_filterIdx = 0;
	uint CAN_msgId = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]

	  if (CAN_filterIdx > 13) {                       // check if Filter Memory is full
 800047c:	4b3f      	ldr	r3, [pc, #252]	; (800057c <Can_Set_Filter+0x110>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	2b0d      	cmp	r3, #13
 8000482:	d874      	bhi.n	800056e <Can_Set_Filter+0x102>
	    return;
	  }
	                                                  // Setup identifier information
	  if (format == STANDARD_FORMAT)  {               // Standard ID
 8000484:	78fb      	ldrb	r3, [r7, #3]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d105      	bne.n	8000496 <Can_Set_Filter+0x2a>
	      CAN_msgId  |= (unsigned int)(id << 21) | CAN_ID_STD;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	055b      	lsls	r3, r3, #21
 800048e:	68fa      	ldr	r2, [r7, #12]
 8000490:	4313      	orrs	r3, r2
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	e004      	b.n	80004a0 <Can_Set_Filter+0x34>
	  }  else  {                                      // Extended ID
	      CAN_msgId  |= (unsigned int)(id <<  3) | CAN_ID_EXT;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	00db      	lsls	r3, r3, #3
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	4313      	orrs	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
	  }

	  CAN1->FMR  |=  CAN_FMR_FINIT;                    // set Initialisation mode for filter banks
 80004a0:	4b37      	ldr	r3, [pc, #220]	; (8000580 <Can_Set_Filter+0x114>)
 80004a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80004a6:	4a36      	ldr	r2, [pc, #216]	; (8000580 <Can_Set_Filter+0x114>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	  CAN1->FA1R &=  ~(unsigned int)(1 << CAN_filterIdx); // deactivate filter
 80004b0:	4b33      	ldr	r3, [pc, #204]	; (8000580 <Can_Set_Filter+0x114>)
 80004b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80004b6:	4b31      	ldr	r3, [pc, #196]	; (800057c <Can_Set_Filter+0x110>)
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	4619      	mov	r1, r3
 80004bc:	2301      	movs	r3, #1
 80004be:	408b      	lsls	r3, r1
 80004c0:	43db      	mvns	r3, r3
 80004c2:	492f      	ldr	r1, [pc, #188]	; (8000580 <Can_Set_Filter+0x114>)
 80004c4:	4013      	ands	r3, r2
 80004c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	                                                  // initialize filter
	  CAN1->FS1R |= (unsigned int)(1 << CAN_filterIdx);// set 32-bit scale configuration
 80004ca:	4b2d      	ldr	r3, [pc, #180]	; (8000580 <Can_Set_Filter+0x114>)
 80004cc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80004d0:	4a2a      	ldr	r2, [pc, #168]	; (800057c <Can_Set_Filter+0x110>)
 80004d2:	8812      	ldrh	r2, [r2, #0]
 80004d4:	4611      	mov	r1, r2
 80004d6:	2201      	movs	r2, #1
 80004d8:	408a      	lsls	r2, r1
 80004da:	4611      	mov	r1, r2
 80004dc:	4a28      	ldr	r2, [pc, #160]	; (8000580 <Can_Set_Filter+0x114>)
 80004de:	430b      	orrs	r3, r1
 80004e0:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	  CAN1->FM1R |= (unsigned int)(1 << CAN_filterIdx);// set 2 32-bit identifier list mode
 80004e4:	4b26      	ldr	r3, [pc, #152]	; (8000580 <Can_Set_Filter+0x114>)
 80004e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80004ea:	4a24      	ldr	r2, [pc, #144]	; (800057c <Can_Set_Filter+0x110>)
 80004ec:	8812      	ldrh	r2, [r2, #0]
 80004ee:	4611      	mov	r1, r2
 80004f0:	2201      	movs	r2, #1
 80004f2:	408a      	lsls	r2, r1
 80004f4:	4611      	mov	r1, r2
 80004f6:	4a22      	ldr	r2, [pc, #136]	; (8000580 <Can_Set_Filter+0x114>)
 80004f8:	430b      	orrs	r3, r1
 80004fa:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	  CAN1->sFilterRegister[CAN_filterIdx].FR1 = CAN_msgId; //  32-bit identifier
 80004fe:	4920      	ldr	r1, [pc, #128]	; (8000580 <Can_Set_Filter+0x114>)
 8000500:	4b1e      	ldr	r3, [pc, #120]	; (800057c <Can_Set_Filter+0x110>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	3348      	adds	r3, #72	; 0x48
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	  CAN1->sFilterRegister[CAN_filterIdx].FR2 = CAN_msgId; //  32-bit identifier
 800050c:	4a1c      	ldr	r2, [pc, #112]	; (8000580 <Can_Set_Filter+0x114>)
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <Can_Set_Filter+0x110>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	3348      	adds	r3, #72	; 0x48
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	4413      	add	r3, r2
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	605a      	str	r2, [r3, #4]

	  CAN1->FFA1R &= ~(unsigned int)(1 << CAN_filterIdx);  // assign filter to FIFO 0
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <Can_Set_Filter+0x114>)
 800051e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <Can_Set_Filter+0x110>)
 8000524:	881b      	ldrh	r3, [r3, #0]
 8000526:	4619      	mov	r1, r3
 8000528:	2301      	movs	r3, #1
 800052a:	408b      	lsls	r3, r1
 800052c:	43db      	mvns	r3, r3
 800052e:	4914      	ldr	r1, [pc, #80]	; (8000580 <Can_Set_Filter+0x114>)
 8000530:	4013      	ands	r3, r2
 8000532:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
	  CAN1->FA1R  |=  (unsigned int)(1 << CAN_filterIdx);  // activate filter
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <Can_Set_Filter+0x114>)
 8000538:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800053c:	4a0f      	ldr	r2, [pc, #60]	; (800057c <Can_Set_Filter+0x110>)
 800053e:	8812      	ldrh	r2, [r2, #0]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	4611      	mov	r1, r2
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <Can_Set_Filter+0x114>)
 800054a:	430b      	orrs	r3, r1
 800054c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	  CAN1->FMR &= ~CAN_FMR_FINIT;                     // reset Initialisation mode for filter banks
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <Can_Set_Filter+0x114>)
 8000552:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000556:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <Can_Set_Filter+0x114>)
 8000558:	f023 0301 	bic.w	r3, r3, #1
 800055c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	  CAN_filterIdx += 1;                             // increase filter index
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <Can_Set_Filter+0x110>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <Can_Set_Filter+0x110>)
 800056a:	801a      	strh	r2, [r3, #0]
 800056c:	e000      	b.n	8000570 <Can_Set_Filter+0x104>
	    return;
 800056e:	bf00      	nop

}
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000020 	.word	0x20000020
 8000580:	40006400 	.word	0x40006400

08000584 <registerCanMsgRxCallback>:


void registerCanMsgRxCallback(void (*callback)(CAN_MESSAGE msg)) {
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	canMsgReceivedCallback = callback;
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <registerCanMsgRxCallback+0x1c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	2000001c 	.word	0x2000001c

080005a4 <CAN1_TX_IRQHandler>:



__attribute__((interrupt)) void CAN1_TX_IRQHandler (void)  {
 80005a4:	4668      	mov	r0, sp
 80005a6:	f020 0107 	bic.w	r1, r0, #7
 80005aa:	468d      	mov	sp, r1
 80005ac:	b481      	push	{r0, r7}
 80005ae:	af00      	add	r7, sp, #0
	if (CAN1->TSR & CAN_TSR_RQCP0) {                 // request completed mbx 0
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <CAN1_TX_IRQHandler+0x3c>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00b      	beq.n	80005d4 <CAN1_TX_IRQHandler+0x30>
	    CAN1->TSR |= CAN_TSR_RQCP0;                  // reset request complete mbx 0
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <CAN1_TX_IRQHandler+0x3c>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <CAN1_TX_IRQHandler+0x3c>)
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6093      	str	r3, [r2, #8]
	    CAN1->IER &= ~CAN_IER_TMEIE;                 // disable  TME interrupt
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <CAN1_TX_IRQHandler+0x3c>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <CAN1_TX_IRQHandler+0x3c>)
 80005ce:	f023 0301 	bic.w	r3, r3, #1
 80005d2:	6153      	str	r3, [r2, #20]
	}

// Tx Interrupt Action

}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc81      	pop	{r0, r7}
 80005da:	4685      	mov	sp, r0
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40006400 	.word	0x40006400

080005e4 <CAN1_RX0_IRQHandler>:



__attribute__((interrupt)) void CAN1_RX0_IRQHandler (void) {
 80005e4:	4668      	mov	r0, sp
 80005e6:	f020 0107 	bic.w	r1, r0, #7
 80005ea:	468d      	mov	sp, r1
 80005ec:	b591      	push	{r0, r4, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af02      	add	r7, sp, #8

	CAN_MESSAGE can_rx_message;

	if (CAN1->RF0R & CAN_RF0R_FMP0) {			      // message pending?
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <CAN1_RX0_IRQHandler+0x50>)
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	f003 0303 	and.w	r3, r3, #3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d013      	beq.n	8000626 <CAN1_RX0_IRQHandler+0x42>
		Can_Rx_Msg(&can_rx_message);                  // read the message
 80005fe:	463b      	mov	r3, r7
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fecf 	bl	80003a4 <Can_Rx_Msg>
		if (canMsgReceivedCallback) canMsgReceivedCallback(can_rx_message);
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <CAN1_RX0_IRQHandler+0x54>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00b      	beq.n	8000626 <CAN1_RX0_IRQHandler+0x42>
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <CAN1_RX0_IRQHandler+0x54>)
 8000610:	681c      	ldr	r4, [r3, #0]
 8000612:	466a      	mov	r2, sp
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	e893 0003 	ldmia.w	r3, {r0, r1}
 800061c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000620:	463b      	mov	r3, r7
 8000622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000624:	47a0      	blx	r4
	}

}
 8000626:	bf00      	nop
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	e8bd 4091 	ldmia.w	sp!, {r0, r4, r7, lr}
 8000630:	4685      	mov	sp, r0
 8000632:	4770      	bx	lr
 8000634:	40006400 	.word	0x40006400
 8000638:	2000001c 	.word	0x2000001c

0800063c <__NVIC_EnableIRQ>:
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064a:	2b00      	cmp	r3, #0
 800064c:	db0b      	blt.n	8000666 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f003 021f 	and.w	r2, r3, #31
 8000654:	4907      	ldr	r1, [pc, #28]	; (8000674 <__NVIC_EnableIRQ+0x38>)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	095b      	lsrs	r3, r3, #5
 800065c:	2001      	movs	r0, #1
 800065e:	fa00 f202 	lsl.w	r2, r0, r2
 8000662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000e100 	.word	0xe000e100

08000678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db0a      	blt.n	80006a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <__NVIC_SetPriority+0x4c>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a0:	e00a      	b.n	80006b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4908      	ldr	r1, [pc, #32]	; (80006c8 <__NVIC_SetPriority+0x50>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	3b04      	subs	r3, #4
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	761a      	strb	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006dc:	d301      	bcc.n	80006e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006de:	2301      	movs	r3, #1
 80006e0:	e00f      	b.n	8000702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <SysTick_Config+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ea:	210f      	movs	r1, #15
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f7ff ffc2 	bl	8000678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <SysTick_Config+0x40>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <SysTick_Config+0x40>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010

08000710 <SystemRegisterCFG>:
 */
#include "config.h"



void SystemRegisterCFG(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

	// *** Configure System Clock (36MHz for each system BUS) ***
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE;		// HSE as an input to the PLL loop
 8000714:	4b5f      	ldr	r3, [pc, #380]	; (8000894 <SystemRegisterCFG+0x184>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	4a5e      	ldr	r2, [pc, #376]	; (8000894 <SystemRegisterCFG+0x184>)
 800071a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800071e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP_1;		// PLLP DIV = /2
 8000720:	4b5c      	ldr	r3, [pc, #368]	; (8000894 <SystemRegisterCFG+0x184>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	4a5b      	ldr	r2, [pc, #364]	; (8000894 <SystemRegisterCFG+0x184>)
 8000726:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800072a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP_0;
 800072c:	4b59      	ldr	r3, [pc, #356]	; (8000894 <SystemRegisterCFG+0x184>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	4a58      	ldr	r2, [pc, #352]	; (8000894 <SystemRegisterCFG+0x184>)
 8000732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000736:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b001001000 << 6);			// Multiplication factor PLLN = 72
 8000738:	4b56      	ldr	r3, [pc, #344]	; (8000894 <SystemRegisterCFG+0x184>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	4a55      	ldr	r2, [pc, #340]	; (8000894 <SystemRegisterCFG+0x184>)
 800073e:	f443 5390 	orr.w	r3, r3, #4608	; 0x1200
 8000742:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0b000100);					// PLLM DIV = /4
 8000744:	4b53      	ldr	r3, [pc, #332]	; (8000894 <SystemRegisterCFG+0x184>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	4a52      	ldr	r2, [pc, #328]	; (8000894 <SystemRegisterCFG+0x184>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;				// System Clock MUX switched to PLL
 8000750:	4b50      	ldr	r3, [pc, #320]	; (8000894 <SystemRegisterCFG+0x184>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	4a4f      	ldr	r2, [pc, #316]	; (8000894 <SystemRegisterCFG+0x184>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (RCC_CFGR_HPRE_DIV2 << RCC_CFGR_HPRE_Pos);		// AHB DIV = /2
 800075c:	4b4d      	ldr	r3, [pc, #308]	; (8000894 <SystemRegisterCFG+0x184>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	4a4c      	ldr	r2, [pc, #304]	; (8000894 <SystemRegisterCFG+0x184>)
 8000762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000766:	6093      	str	r3, [r2, #8]
	RCC->CR |= RCC_CR_HSEON;	// HSE ON
 8000768:	4b4a      	ldr	r3, [pc, #296]	; (8000894 <SystemRegisterCFG+0x184>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a49      	ldr	r2, [pc, #292]	; (8000894 <SystemRegisterCFG+0x184>)
 800076e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000772:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); // Wait for HSE ON
 8000774:	bf00      	nop
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <SystemRegisterCFG+0x184>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f9      	beq.n	8000776 <SystemRegisterCFG+0x66>
	RCC->CR |= RCC_CR_PLLON;	// PLL ON
 8000782:	4b44      	ldr	r3, [pc, #272]	; (8000894 <SystemRegisterCFG+0x184>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a43      	ldr	r2, [pc, #268]	; (8000894 <SystemRegisterCFG+0x184>)
 8000788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800078c:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLRDY)); // Check if PLL not locked
 800078e:	bf00      	nop
 8000790:	4b40      	ldr	r3, [pc, #256]	; (8000894 <SystemRegisterCFG+0x184>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000798:	2b00      	cmp	r3, #0
 800079a:	d1f9      	bne.n	8000790 <SystemRegisterCFG+0x80>
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);	// Check for a correct source set
 800079c:	bf00      	nop
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <SystemRegisterCFG+0x184>)
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	f003 030c 	and.w	r3, r3, #12
 80007a6:	2b08      	cmp	r3, #8
 80007a8:	d1f9      	bne.n	800079e <SystemRegisterCFG+0x8e>
	RCC->CR &= ~RCC_CR_HSION;	// 16MHz HSI OFF
 80007aa:	4b3a      	ldr	r3, [pc, #232]	; (8000894 <SystemRegisterCFG+0x184>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a39      	ldr	r2, [pc, #228]	; (8000894 <SystemRegisterCFG+0x184>)
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	6013      	str	r3, [r2, #0]


	// RCC Configuration
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;	// GPIO Clock
 80007b6:	4b37      	ldr	r3, [pc, #220]	; (8000894 <SystemRegisterCFG+0x184>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a36      	ldr	r2, [pc, #216]	; (8000894 <SystemRegisterCFG+0x184>)
 80007bc:	f043 0307 	orr.w	r3, r3, #7
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;		// SPI1 clock
 80007c2:	4b34      	ldr	r3, [pc, #208]	; (8000894 <SystemRegisterCFG+0x184>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	4a33      	ldr	r2, [pc, #204]	; (8000894 <SystemRegisterCFG+0x184>)
 80007c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007cc:	6453      	str	r3, [r2, #68]	; 0x44

	// Standard GPIO Config (LEDs)
	GPIOC->MODER |= GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0 | GPIO_MODER_MODE11_0 | GPIO_MODER_MODE12_0;	// STM LEDs output
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <SystemRegisterCFG+0x188>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a31      	ldr	r2, [pc, #196]	; (8000898 <SystemRegisterCFG+0x188>)
 80007d4:	f043 73a2 	orr.w	r3, r3, #21233664	; 0x1440000
 80007d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007dc:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD8 | GPIO_ODR_OD9 | GPIO_ODR_OD11 | GPIO_ODR_OD12;		// STM LEDs OFF
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <SystemRegisterCFG+0x188>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a2d      	ldr	r2, [pc, #180]	; (8000898 <SystemRegisterCFG+0x188>)
 80007e4:	f443 53d8 	orr.w	r3, r3, #6912	; 0x1b00
 80007e8:	6153      	str	r3, [r2, #20]

	// W6100 External Reset config
	GPIOC->MODER |= GPIO_MODER_MODE4_0;		// Output
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <SystemRegisterCFG+0x188>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a2a      	ldr	r2, [pc, #168]	; (8000898 <SystemRegisterCFG+0x188>)
 80007f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f4:	6013      	str	r3, [r2, #0]
	GPIOC->ODR |= GPIO_ODR_OD4;				// Level high (reset disable)
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <SystemRegisterCFG+0x188>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a27      	ldr	r2, [pc, #156]	; (8000898 <SystemRegisterCFG+0x188>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6153      	str	r3, [r2, #20]

	// W6100 External Interrupt pin configuration
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;	// Enable clock for SYSCFG (Used for EXTI ISR)
 8000802:	4b24      	ldr	r3, [pc, #144]	; (8000894 <SystemRegisterCFG+0x184>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a23      	ldr	r2, [pc, #140]	; (8000894 <SystemRegisterCFG+0x184>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800080e:	f3bf 8f4f 	dsb	sy
	__DSB();
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PC;	// PC5 pin selected
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <SystemRegisterCFG+0x18c>)
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <SystemRegisterCFG+0x18c>)
 8000818:	f043 0320 	orr.w	r3, r3, #32
 800081c:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_IM5;						// Interrupt masked for line Px5
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <SystemRegisterCFG+0x190>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <SystemRegisterCFG+0x190>)
 8000824:	f043 0320 	orr.w	r3, r3, #32
 8000828:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR5;					// Falling edge for line Px5
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <SystemRegisterCFG+0x190>)
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <SystemRegisterCFG+0x190>)
 8000830:	f043 0320 	orr.w	r3, r3, #32
 8000834:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000836:	2017      	movs	r0, #23
 8000838:	f7ff ff00 	bl	800063c <__NVIC_EnableIRQ>


	// SPI GPIO Config
	GPIOA->MODER |= GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1;		// SPI1 AFIO Set (NSS Software)
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <SystemRegisterCFG+0x194>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <SystemRegisterCFG+0x194>)
 8000842:	f443 4329 	orr.w	r3, r3, #43264	; 0xa900
 8000846:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= GPIO_ODR_OD4;		// Slave select HIGH (disable)
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <SystemRegisterCFG+0x194>)
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <SystemRegisterCFG+0x194>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6153      	str	r3, [r2, #20]
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL5_0 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL6_0 |
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <SystemRegisterCFG+0x194>)
 8000856:	6a1b      	ldr	r3, [r3, #32]
 8000858:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <SystemRegisterCFG+0x194>)
 800085a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800085e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000862:	6213      	str	r3, [r2, #32]
					 GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL7_0 | GPIO_AFRL_AFRL7_2;			// SPI1 AFIO => SPI1

	// SPI Config
	SPI1->CR1 |= SPI_CR1_SPE | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_MSTR;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <SystemRegisterCFG+0x198>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <SystemRegisterCFG+0x198>)
 800086a:	f443 7351 	orr.w	r3, r3, #836	; 0x344
 800086e:	6013      	str	r3, [r2, #0]

	// IO-Link Config
	GPIOB->MODER |= GPIO_MODER_MODER14_0;		// EN_L+ pin: output
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <SystemRegisterCFG+0x19c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <SystemRegisterCFG+0x19c>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087a:	6013      	str	r3, [r2, #0]

	SysTick_Config(32000000 / 1000);
 800087c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8000880:	f7ff ff24 	bl	80006cc <SysTick_Config>
	// Reset the SysTick counter value.
	SysTick->VAL = 0UL;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <SystemRegisterCFG+0x1a0>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
	// Set SysTick source and IRQ.
	SysTick->CTRL = (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk);
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <SystemRegisterCFG+0x1a0>)
 800088c:	2206      	movs	r2, #6
 800088e:	601a      	str	r2, [r3, #0]


}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40020800 	.word	0x40020800
 800089c:	40013800 	.word	0x40013800
 80008a0:	40013c00 	.word	0x40013c00
 80008a4:	40020000 	.word	0x40020000
 80008a8:	40013000 	.word	0x40013000
 80008ac:	40020400 	.word	0x40020400
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <SysTick_Handler>:
	// Disable the SysTick timer
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}


__attribute__((interrupt)) void SysTick_Handler(void){
 80008b4:	4668      	mov	r0, sp
 80008b6:	f020 0107 	bic.w	r1, r0, #7
 80008ba:	468d      	mov	sp, r1
 80008bc:	b481      	push	{r0, r7}
 80008be:	af00      	add	r7, sp, #0
	delay++;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <SysTick_Handler+0x24>)
 80008c2:	881b      	ldrh	r3, [r3, #0]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	3301      	adds	r3, #1
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <SysTick_Handler+0x24>)
 80008cc:	801a      	strh	r2, [r3, #0]
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc81      	pop	{r0, r7}
 80008d4:	4685      	mov	sp, r0
 80008d6:	4770      	bx	lr
 80008d8:	20000030 	.word	0x20000030

080008dc <canVariables>:
 */
#include "control_sys.h"

enum can_msg {can_on_msg, can_off_msg};

void canVariables(CAN_MESSAGE * cmg) {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

	strcpy(cmg[can_on_msg].data, "mb_0000");
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3304      	adds	r3, #4
 80008e8:	4918      	ldr	r1, [pc, #96]	; (800094c <canVariables+0x70>)
 80008ea:	461a      	mov	r2, r3
 80008ec:	460b      	mov	r3, r1
 80008ee:	cb03      	ldmia	r3!, {r0, r1}
 80008f0:	6010      	str	r0, [r2, #0]
 80008f2:	6051      	str	r1, [r2, #4]
	cmg[can_on_msg].format = STANDARD_FORMAT;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
	cmg[can_on_msg].type = DATA_FRAME;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
	cmg[can_on_msg].len = sizeof(cmg[can_on_msg]);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2218      	movs	r2, #24
 8000904:	60da      	str	r2, [r3, #12]
	cmg[can_on_msg].id = 0x01;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2201      	movs	r2, #1
 800090a:	601a      	str	r2, [r3, #0]

	strcpy(cmg[can_off_msg].data, "mb_0001");
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3318      	adds	r3, #24
 8000910:	3304      	adds	r3, #4
 8000912:	490f      	ldr	r1, [pc, #60]	; (8000950 <canVariables+0x74>)
 8000914:	461a      	mov	r2, r3
 8000916:	460b      	mov	r3, r1
 8000918:	cb03      	ldmia	r3!, {r0, r1}
 800091a:	6010      	str	r0, [r2, #0]
 800091c:	6051      	str	r1, [r2, #4]
	cmg[can_off_msg].format = STANDARD_FORMAT;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3318      	adds	r3, #24
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
	cmg[can_off_msg].type = DATA_FRAME;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3318      	adds	r3, #24
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
	cmg[can_off_msg].len = sizeof(cmg[can_off_msg]);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3318      	adds	r3, #24
 8000932:	2218      	movs	r2, #24
 8000934:	60da      	str	r2, [r3, #12]
	cmg[can_off_msg].id = 0x02;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3318      	adds	r3, #24
 800093a:	2202      	movs	r2, #2
 800093c:	601a      	str	r2, [r3, #0]

}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	080017f0 	.word	0x080017f0
 8000950:	080017f8 	.word	0x080017f8

08000954 <dataPacketReceived>:


void dataPacketReceived(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	/* Reaction on Data Received */
	// Check Ethernet
	if (W6100_ReceiveData(0, destination_adr, (uint8_t*)rx_dat, sizeof(rx_dat))) {		// Check if data arrived
 8000958:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <dataPacketReceived+0xb4>)
 800095a:	6819      	ldr	r1, [r3, #0]
 800095c:	2328      	movs	r3, #40	; 0x28
 800095e:	4a2b      	ldr	r2, [pc, #172]	; (8000a0c <dataPacketReceived+0xb8>)
 8000960:	2000      	movs	r0, #0
 8000962:	f000 fc73 	bl	800124c <W6100_ReceiveData>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d04b      	beq.n	8000a04 <dataPacketReceived+0xb0>
		if (!strcmp(rx_dat, "systems_on\n")) {
 800096c:	4928      	ldr	r1, [pc, #160]	; (8000a10 <dataPacketReceived+0xbc>)
 800096e:	4827      	ldr	r0, [pc, #156]	; (8000a0c <dataPacketReceived+0xb8>)
 8000970:	f7ff fc2a 	bl	80001c8 <strcmp>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d110      	bne.n	800099c <dataPacketReceived+0x48>
			GPIOC->ODR &= ~GPIO_ODR_OD12;
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <dataPacketReceived+0xc0>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <dataPacketReceived+0xc0>)
 8000980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000984:	6153      	str	r3, [r2, #20]
			// Send msg to the client
			W6100_TransmitData(0, destination_adr, (uint8_t*)"System Enabled\n", sizeof("System Enabled\n"));
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <dataPacketReceived+0xb4>)
 8000988:	6819      	ldr	r1, [r3, #0]
 800098a:	2310      	movs	r3, #16
 800098c:	4a22      	ldr	r2, [pc, #136]	; (8000a18 <dataPacketReceived+0xc4>)
 800098e:	2000      	movs	r0, #0
 8000990:	f000 fd25 	bl	80013de <W6100_TransmitData>
			Can_Tx_Msg(&canMessages[can_on_msg]);
 8000994:	4821      	ldr	r0, [pc, #132]	; (8000a1c <dataPacketReceived+0xc8>)
 8000996:	f7ff fc85 	bl	80002a4 <Can_Tx_Msg>
			// Send msg to the client
			W6100_TransmitData(0, destination_adr, (uint8_t*)"Command unknown...\n", sizeof("Command unknown...\n"));
		}
	}

}
 800099a:	e033      	b.n	8000a04 <dataPacketReceived+0xb0>
		else if (!strcmp(rx_dat, "systems_off\n"))	{
 800099c:	4920      	ldr	r1, [pc, #128]	; (8000a20 <dataPacketReceived+0xcc>)
 800099e:	481b      	ldr	r0, [pc, #108]	; (8000a0c <dataPacketReceived+0xb8>)
 80009a0:	f7ff fc12 	bl	80001c8 <strcmp>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d110      	bne.n	80009cc <dataPacketReceived+0x78>
			GPIOC->ODR |= GPIO_ODR_OD12;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <dataPacketReceived+0xc0>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <dataPacketReceived+0xc0>)
 80009b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009b4:	6153      	str	r3, [r2, #20]
			W6100_TransmitData(0, destination_adr, (uint8_t*)"System Disabled\n", sizeof("System Disabled\n"));
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <dataPacketReceived+0xb4>)
 80009b8:	6819      	ldr	r1, [r3, #0]
 80009ba:	2311      	movs	r3, #17
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <dataPacketReceived+0xd0>)
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 fd0d 	bl	80013de <W6100_TransmitData>
			Can_Tx_Msg(&canMessages[can_off_msg]);
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <dataPacketReceived+0xd4>)
 80009c6:	f7ff fc6d 	bl	80002a4 <Can_Tx_Msg>
}
 80009ca:	e01b      	b.n	8000a04 <dataPacketReceived+0xb0>
		else if (!strcmp(rx_dat, "systems_st\n"))	{
 80009cc:	4917      	ldr	r1, [pc, #92]	; (8000a2c <dataPacketReceived+0xd8>)
 80009ce:	480f      	ldr	r0, [pc, #60]	; (8000a0c <dataPacketReceived+0xb8>)
 80009d0:	f7ff fbfa 	bl	80001c8 <strcmp>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10d      	bne.n	80009f6 <dataPacketReceived+0xa2>
			GPIOC->ODR ^= GPIO_ODR_OD12;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <dataPacketReceived+0xc0>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <dataPacketReceived+0xc0>)
 80009e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80009e4:	6153      	str	r3, [r2, #20]
			W6100_TransmitData(0, destination_adr, (uint8_t*)"Checking status...\n", sizeof("Checking status...\n"));
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <dataPacketReceived+0xb4>)
 80009e8:	6819      	ldr	r1, [r3, #0]
 80009ea:	2314      	movs	r3, #20
 80009ec:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <dataPacketReceived+0xdc>)
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 fcf5 	bl	80013de <W6100_TransmitData>
}
 80009f4:	e006      	b.n	8000a04 <dataPacketReceived+0xb0>
			W6100_TransmitData(0, destination_adr, (uint8_t*)"Command unknown...\n", sizeof("Command unknown...\n"));
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <dataPacketReceived+0xb4>)
 80009f8:	6819      	ldr	r1, [r3, #0]
 80009fa:	2314      	movs	r3, #20
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <dataPacketReceived+0xe0>)
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 fced 	bl	80013de <W6100_TransmitData>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000008c 	.word	0x2000008c
 8000a0c:	20000064 	.word	0x20000064
 8000a10:	08001800 	.word	0x08001800
 8000a14:	40020800 	.word	0x40020800
 8000a18:	0800180c 	.word	0x0800180c
 8000a1c:	20000034 	.word	0x20000034
 8000a20:	0800181c 	.word	0x0800181c
 8000a24:	0800182c 	.word	0x0800182c
 8000a28:	2000004c 	.word	0x2000004c
 8000a2c:	08001840 	.word	0x08001840
 8000a30:	0800184c 	.word	0x0800184c
 8000a34:	08001860 	.word	0x08001860

08000a38 <canMessageReceived>:

void canMessageReceived(CAN_MESSAGE msg) {
 8000a38:	b084      	sub	sp, #16
 8000a3a:	b490      	push	{r4, r7}
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	f107 0408 	add.w	r4, r7, #8
 8000a42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	GPIOC->ODR ^= GPIO_ODR_OD11;
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <canMessageReceived+0x24>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <canMessageReceived+0x24>)
 8000a4c:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 8000a50:	6153      	str	r3, [r2, #20]
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc90      	pop	{r4, r7}
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr
 8000a5c:	40020800 	.word	0x40020800

08000a60 <serverOffResponse>:

void serverOffResponse(uint8_t sck_nbr) {
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR |= GPIO_ODR_OD8;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <serverOffResponse+0x30>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <serverOffResponse+0x30>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a74:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~GPIO_ODR_OD9;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <serverOffResponse+0x30>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <serverOffResponse+0x30>)
 8000a7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000a80:	6153      	str	r3, [r2, #20]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40020800 	.word	0x40020800

08000a94 <serverStartResponse>:

void serverStartResponse(uint8_t sck_nbr) {
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR &= ~GPIO_ODR_OD8;
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <serverStartResponse+0x30>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <serverStartResponse+0x30>)
 8000aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000aa8:	6153      	str	r3, [r2, #20]
	GPIOC->ODR |= GPIO_ODR_OD9;
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <serverStartResponse+0x30>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <serverStartResponse+0x30>)
 8000ab0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab4:	6153      	str	r3, [r2, #20]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40020800 	.word	0x40020800

08000ac8 <main>:
#include "can.h"
#include "control_sys.h"


int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

	SystemRegisterCFG();			// Setup basic peripheral registers
 8000ace:	f7ff fe1f 	bl	8000710 <SystemRegisterCFG>
	canVariables(canMessages);		// Initialises CAN msg structures for the communication
 8000ad2:	4825      	ldr	r0, [pc, #148]	; (8000b68 <main+0xa0>)
 8000ad4:	f7ff ff02 	bl	80008dc <canVariables>

	registerSocketCloseCallback(serverOffResponse);		// Register callback function for server close
 8000ad8:	4824      	ldr	r0, [pc, #144]	; (8000b6c <main+0xa4>)
 8000ada:	f000 fd7f 	bl	80015dc <registerSocketCloseCallback>
	registerSocketOpenCallback(serverStartResponse);	// Register callback function for server start (socket connected)
 8000ade:	4824      	ldr	r0, [pc, #144]	; (8000b70 <main+0xa8>)
 8000ae0:	f000 fd6c 	bl	80015bc <registerSocketOpenCallback>
	registerDataReceivedCallback(dataPacketReceived);	// Register callback function when data packets received
 8000ae4:	4823      	ldr	r0, [pc, #140]	; (8000b74 <main+0xac>)
 8000ae6:	f000 fd59 	bl	800159c <registerDataReceivedCallback>
	registerCanMsgRxCallback(canMessageReceived);
 8000aea:	4823      	ldr	r0, [pc, #140]	; (8000b78 <main+0xb0>)
 8000aec:	f7ff fd4a 	bl	8000584 <registerCanMsgRxCallback>

	GPIOC->ODR &= ~GPIO_ODR_OD9;						// Server RED LED ON
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <main+0xb4>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <main+0xb4>)
 8000af6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000afa:	6153      	str	r3, [r2, #20]

	W6100_INIT();										// Initialise W6100 with basic network information
 8000afc:	f000 f95d 	bl	8000dba <W6100_INIT>

	/* Socket Configuration */
	uint8_t txTotalSize = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	71fb      	strb	r3, [r7, #7]
	uint8_t rxTotalSize = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	71bb      	strb	r3, [r7, #6]

	for (uint8_t i=0; i<7; i++) {
 8000b08:	2300      	movs	r3, #0
 8000b0a:	717b      	strb	r3, [r7, #5]
 8000b0c:	e016      	b.n	8000b3c <main+0x74>
		SPI_W6100_WSOCK(Sn_TX_BSR, 0x04, i, REG);		// assign 4 Kbytes TX buffer per SOCKET
 8000b0e:	797a      	ldrb	r2, [r7, #5]
 8000b10:	2301      	movs	r3, #1
 8000b12:	2104      	movs	r1, #4
 8000b14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b18:	f000 f910 	bl	8000d3c <SPI_W6100_WSOCK>
		SPI_W6100_WSOCK(Sn_RX_BSR, 0x04, i, REG);		// assign 4 Kbytes RX buffer per SOCKET
 8000b1c:	797a      	ldrb	r2, [r7, #5]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2104      	movs	r1, #4
 8000b22:	f44f 7008 	mov.w	r0, #544	; 0x220
 8000b26:	f000 f909 	bl	8000d3c <SPI_W6100_WSOCK>
		txTotalSize += 0x04;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	71fb      	strb	r3, [r7, #7]
		rxTotalSize += 0x04;
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	3304      	adds	r3, #4
 8000b34:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i=0; i<7; i++) {
 8000b36:	797b      	ldrb	r3, [r7, #5]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	717b      	strb	r3, [r7, #5]
 8000b3c:	797b      	ldrb	r3, [r7, #5]
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d9e5      	bls.n	8000b0e <main+0x46>
	}

	destination_adr = W6100_OpenTCPSocket(0, 5000);		// Open TCP socket 0 on port 5000 and return its destination address
 8000b42:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b46:	2000      	movs	r0, #0
 8000b48:	f000 faf0 	bl	800112c <W6100_OpenTCPSocket>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <main+0xb8>)
 8000b50:	601a      	str	r2, [r3, #0]


	CanInit();
 8000b52:	f7ff fb61 	bl	8000218 <CanInit>

	Can_Set_Filter(0x03, STANDARD_FORMAT);
 8000b56:	2100      	movs	r1, #0
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f7ff fc87 	bl	800046c <Can_Set_Filter>
	Can_Set_Filter(0x04, STANDARD_FORMAT);
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2004      	movs	r0, #4
 8000b62:	f7ff fc83 	bl	800046c <Can_Set_Filter>


	/* MAIN Loop */
	while (1) {
 8000b66:	e7fe      	b.n	8000b66 <main+0x9e>
 8000b68:	20000034 	.word	0x20000034
 8000b6c:	08000a61 	.word	0x08000a61
 8000b70:	08000a95 	.word	0x08000a95
 8000b74:	08000955 	.word	0x08000955
 8000b78:	08000a39 	.word	0x08000a39
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	2000008c 	.word	0x2000008c

08000b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <SystemInit+0x28>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <SystemInit+0x28>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <SystemInit+0x28>)
 8000b9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <SPI_Eth_SS>:





void SPI_Eth_SS(uint8_t state) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	if (state) {
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <SPI_Eth_SS+0x1e>
		GPIOA->ODR &= ~GPIO_ODR_OD4;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <SPI_Eth_SS+0x3c>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	4a09      	ldr	r2, [pc, #36]	; (8000bec <SPI_Eth_SS+0x3c>)
 8000bc6:	f023 0310 	bic.w	r3, r3, #16
 8000bca:	6153      	str	r3, [r2, #20]
	}
	else if (!state) {
		GPIOA->ODR |= GPIO_ODR_OD4;
	}
}
 8000bcc:	e008      	b.n	8000be0 <SPI_Eth_SS+0x30>
	else if (!state) {
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d105      	bne.n	8000be0 <SPI_Eth_SS+0x30>
		GPIOA->ODR |= GPIO_ODR_OD4;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SPI_Eth_SS+0x3c>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <SPI_Eth_SS+0x3c>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6153      	str	r3, [r2, #20]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40020000 	.word	0x40020000

08000bf0 <SPI_Eth_RT>:

uint8_t SPI_Eth_RT(uint8_t data) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
	while(!(SPI1->SR & SPI_SR_TXE));	// Wait for Tx buffer empty
 8000bfa:	bf00      	nop
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <SPI_Eth_RT+0x40>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d0f9      	beq.n	8000bfc <SPI_Eth_RT+0xc>
	SPI1->DR = data;
 8000c08:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <SPI_Eth_RT+0x40>)
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	60d3      	str	r3, [r2, #12]
	while(!(SPI1->SR & SPI_SR_RXNE));	// Wait for Rx buffer not empty
 8000c0e:	bf00      	nop
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <SPI_Eth_RT+0x40>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d0f9      	beq.n	8000c10 <SPI_Eth_RT+0x20>
	data = SPI1->DR;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SPI_Eth_RT+0x40>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	71fb      	strb	r3, [r7, #7]
	return data;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	40013000 	.word	0x40013000

08000c34 <SPI_W6100_RCR>:

uint8_t SPI_W6100_RCR(uint16_t adr) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
	/* See Page 76 - W6100 datasheet */
	uint8_t dat;
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f7ff ffb6 	bl	8000bb0 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ffcf 	bl	8000bf0 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ffca 	bl	8000bf0 <SPI_Eth_RT>
	SPI_Eth_RT(0x00);		// Send Control Byte	[CR, Read, Variable Length Data Mode]
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f7ff ffc7 	bl	8000bf0 <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);	// Send garbage data to read the Common Register
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ffc4 	bl	8000bf0 <SPI_Eth_RT>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(OFF);		// NSS Slave Disable
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ff9f 	bl	8000bb0 <SPI_Eth_SS>
	return dat;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <SPI_W6100_WCR>:

void SPI_W6100_WCR(uint16_t adr, uint8_t val) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	460a      	mov	r2, r1
 8000c86:	80fb      	strh	r3, [r7, #6]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	717b      	strb	r3, [r7, #5]
	/* See Page 76 - W6100 datasheet */
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff ff8f 	bl	8000bb0 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ffa8 	bl	8000bf0 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ffa3 	bl	8000bf0 <SPI_Eth_RT>
	SPI_Eth_RT(0x04);		// Send Control Byte	[CR, Write, Variable Length Data Mode]
 8000caa:	2004      	movs	r0, #4
 8000cac:	f7ff ffa0 	bl	8000bf0 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 8000cb0:	797b      	ldrb	r3, [r7, #5]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff9c 	bl	8000bf0 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f7ff ff79 	bl	8000bb0 <SPI_Eth_SS>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <SPI_W6100_RSOCK>:

uint8_t SPI_W6100_RSOCK(uint16_t adr, uint8_t socket_nbr, uint8_t block) {
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	80fb      	strh	r3, [r7, #6]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	717b      	strb	r3, [r7, #5]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	713b      	strb	r3, [r7, #4]
	uint8_t dat;
	uint8_t cb_temp = 0x00;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 8000cdc:	797b      	ldrb	r3, [r7, #5]
 8000cde:	015b      	lsls	r3, r3, #5
 8000ce0:	b25a      	sxtb	r2, r3
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 8000cec:	793b      	ldrb	r3, [r7, #4]
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff ff57 	bl	8000bb0 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff70 	bl	8000bf0 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff6b 	bl	8000bf0 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff67 	bl	8000bf0 <SPI_Eth_RT>
	dat = SPI_Eth_RT(0x00);		// Send garbage data to read the Common Register
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff ff64 	bl	8000bf0 <SPI_Eth_RT>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73bb      	strb	r3, [r7, #14]
	SPI_Eth_SS(OFF);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff ff3f 	bl	8000bb0 <SPI_Eth_SS>
	return dat;
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <SPI_W6100_WSOCK>:

void SPI_W6100_WSOCK(uint16_t adr, uint8_t val, uint8_t socket_nbr, uint8_t block) {
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4604      	mov	r4, r0
 8000d44:	4608      	mov	r0, r1
 8000d46:	4611      	mov	r1, r2
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	80fb      	strh	r3, [r7, #6]
 8000d4e:	4603      	mov	r3, r0
 8000d50:	717b      	strb	r3, [r7, #5]
 8000d52:	460b      	mov	r3, r1
 8000d54:	713b      	strb	r3, [r7, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	70fb      	strb	r3, [r7, #3]
	uint8_t cb_temp = 0x04;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (socket_nbr << 5);
 8000d5e:	793b      	ldrb	r3, [r7, #4]
 8000d60:	015b      	lsls	r3, r3, #5
 8000d62:	b25a      	sxtb	r2, r3
 8000d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	73fb      	strb	r3, [r7, #15]
	cb_temp |= (block << 3);
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	b25a      	sxtb	r2, r3
 8000d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	73fb      	strb	r3, [r7, #15]
	SPI_Eth_SS(ON);			// NSS Slave Enable
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f7ff ff16 	bl	8000bb0 <SPI_Eth_SS>
	SPI_Eth_RT(adr>>8);		// Send upper address half
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	0a1b      	lsrs	r3, r3, #8
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff2f 	bl	8000bf0 <SPI_Eth_RT>
	SPI_Eth_RT(adr);		// Send lower address half
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ff2a 	bl	8000bf0 <SPI_Eth_RT>
	SPI_Eth_RT(cb_temp);	// Send Control Byte
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff26 	bl	8000bf0 <SPI_Eth_RT>
	SPI_Eth_RT(val);		// Send val to be written in the register
 8000da4:	797b      	ldrb	r3, [r7, #5]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff ff22 	bl	8000bf0 <SPI_Eth_RT>
	SPI_Eth_SS(OFF);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff feff 	bl	8000bb0 <SPI_Eth_SS>
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd90      	pop	{r4, r7, pc}

08000dba <W6100_INIT>:

void W6100_INIT(void) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
	/* *** W6100 Init *** */
	SPI_W6100_WCR(NETLCKR, 0x3a);	// NETLCKR		Network settings unlock
 8000dbe:	213a      	movs	r1, #58	; 0x3a
 8000dc0:	f244 10f5 	movw	r0, #16885	; 0x41f5
 8000dc4:	f7ff ff5a 	bl	8000c7c <SPI_W6100_WCR>

	SPI_W6100_WCR(SHAR0, MAC0);	// SHAR[5:0]	Set hardware MAC address
 8000dc8:	2111      	movs	r1, #17
 8000dca:	f244 1020 	movw	r0, #16672	; 0x4120
 8000dce:	f7ff ff55 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR1, MAC1);
 8000dd2:	2122      	movs	r1, #34	; 0x22
 8000dd4:	f244 1021 	movw	r0, #16673	; 0x4121
 8000dd8:	f7ff ff50 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR2, MAC2);
 8000ddc:	2133      	movs	r1, #51	; 0x33
 8000dde:	f244 1022 	movw	r0, #16674	; 0x4122
 8000de2:	f7ff ff4b 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR3, MAC3);
 8000de6:	21aa      	movs	r1, #170	; 0xaa
 8000de8:	f244 1023 	movw	r0, #16675	; 0x4123
 8000dec:	f7ff ff46 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR4, MAC4);
 8000df0:	21bb      	movs	r1, #187	; 0xbb
 8000df2:	f244 1024 	movw	r0, #16676	; 0x4124
 8000df6:	f7ff ff41 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SHAR5, MAC5);
 8000dfa:	21cc      	movs	r1, #204	; 0xcc
 8000dfc:	f244 1025 	movw	r0, #16677	; 0x4125
 8000e00:	f7ff ff3c 	bl	8000c7c <SPI_W6100_WCR>

	SPI_W6100_WCR(GAR0, GIP0);	// GAR[0:3]		Gateway IP address 192.168.0.1
 8000e04:	21c0      	movs	r1, #192	; 0xc0
 8000e06:	f244 1030 	movw	r0, #16688	; 0x4130
 8000e0a:	f7ff ff37 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR1, GIP1);
 8000e0e:	21a8      	movs	r1, #168	; 0xa8
 8000e10:	f244 1031 	movw	r0, #16689	; 0x4131
 8000e14:	f7ff ff32 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR2, GIP2);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	f244 1032 	movw	r0, #16690	; 0x4132
 8000e1e:	f7ff ff2d 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GAR3, GIP3);
 8000e22:	2101      	movs	r1, #1
 8000e24:	f244 1033 	movw	r0, #16691	; 0x4133
 8000e28:	f7ff ff28 	bl	8000c7c <SPI_W6100_WCR>

	SPI_W6100_WCR(SUBR0, SBM0);	// SUBR[0:3]	Subnet mask address 255:255:255:0
 8000e2c:	21ff      	movs	r1, #255	; 0xff
 8000e2e:	f244 1034 	movw	r0, #16692	; 0x4134
 8000e32:	f7ff ff23 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR1, SBM1);
 8000e36:	21ff      	movs	r1, #255	; 0xff
 8000e38:	f244 1035 	movw	r0, #16693	; 0x4135
 8000e3c:	f7ff ff1e 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR2, SBM2);
 8000e40:	21ff      	movs	r1, #255	; 0xff
 8000e42:	f244 1036 	movw	r0, #16694	; 0x4136
 8000e46:	f7ff ff19 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUBR3, SBM3);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f244 1037 	movw	r0, #16695	; 0x4137
 8000e50:	f7ff ff14 	bl	8000c7c <SPI_W6100_WCR>

	SPI_W6100_WCR(SIPR0, IPV0);	// SIPR[0:3]	IPv4 Source IP Address 192.168.0.27
 8000e54:	21c0      	movs	r1, #192	; 0xc0
 8000e56:	f244 1038 	movw	r0, #16696	; 0x4138
 8000e5a:	f7ff ff0f 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR1, IPV1);
 8000e5e:	21a8      	movs	r1, #168	; 0xa8
 8000e60:	f244 1039 	movw	r0, #16697	; 0x4139
 8000e64:	f7ff ff0a 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR2, IPV2);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f244 103a 	movw	r0, #16698	; 0x413a
 8000e6e:	f7ff ff05 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SIPR3, IPV3);
 8000e72:	211b      	movs	r1, #27
 8000e74:	f244 103b 	movw	r0, #16699	; 0x413b
 8000e78:	f7ff ff00 	bl	8000c7c <SPI_W6100_WCR>

	SPI_W6100_WCR(LLAR0, 0xfe);	// Link Local Address, FE80::1322:33FF:FEAA:BBCC
 8000e7c:	21fe      	movs	r1, #254	; 0xfe
 8000e7e:	f244 1040 	movw	r0, #16704	; 0x4140
 8000e82:	f7ff fefb 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR1, 0x80);
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	f244 1041 	movw	r0, #16705	; 0x4141
 8000e8c:	f7ff fef6 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR2, 0x00);
 8000e90:	2100      	movs	r1, #0
 8000e92:	f244 1042 	movw	r0, #16706	; 0x4142
 8000e96:	f7ff fef1 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR3, 0x01);
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	f244 1043 	movw	r0, #16707	; 0x4143
 8000ea0:	f7ff feec 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR4, 0x00);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	f244 1044 	movw	r0, #16708	; 0x4144
 8000eaa:	f7ff fee7 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR5, 0x00);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f244 1045 	movw	r0, #16709	; 0x4145
 8000eb4:	f7ff fee2 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR6, 0x00);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	f244 1046 	movw	r0, #16710	; 0x4146
 8000ebe:	f7ff fedd 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR7, 0x00);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	f244 1047 	movw	r0, #16711	; 0x4147
 8000ec8:	f7ff fed8 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR8, 0x13);
 8000ecc:	2113      	movs	r1, #19
 8000ece:	f244 1048 	movw	r0, #16712	; 0x4148
 8000ed2:	f7ff fed3 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR9, 0x22);
 8000ed6:	2122      	movs	r1, #34	; 0x22
 8000ed8:	f244 1049 	movw	r0, #16713	; 0x4149
 8000edc:	f7ff fece 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR10, 0x33);
 8000ee0:	2133      	movs	r1, #51	; 0x33
 8000ee2:	f244 104a 	movw	r0, #16714	; 0x414a
 8000ee6:	f7ff fec9 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR11, 0xff);
 8000eea:	21ff      	movs	r1, #255	; 0xff
 8000eec:	f244 104b 	movw	r0, #16715	; 0x414b
 8000ef0:	f7ff fec4 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR12, 0xfe);
 8000ef4:	21fe      	movs	r1, #254	; 0xfe
 8000ef6:	f244 104c 	movw	r0, #16716	; 0x414c
 8000efa:	f7ff febf 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR13, 0xaa);
 8000efe:	21aa      	movs	r1, #170	; 0xaa
 8000f00:	f244 104d 	movw	r0, #16717	; 0x414d
 8000f04:	f7ff feba 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR14, 0xbb);
 8000f08:	21bb      	movs	r1, #187	; 0xbb
 8000f0a:	f244 104e 	movw	r0, #16718	; 0x414e
 8000f0e:	f7ff feb5 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(LLAR15, 0xcc);
 8000f12:	21cc      	movs	r1, #204	; 0xcc
 8000f14:	f244 104f 	movw	r0, #16719	; 0x414f
 8000f18:	f7ff feb0 	bl	8000c7c <SPI_W6100_WCR>

	SPI_W6100_WCR(GUAR0, 0x20);	// Global Unicast Address, 2001:0DB8:E001::1222:33FF:FEAA:BBCC
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	f244 1050 	movw	r0, #16720	; 0x4150
 8000f22:	f7ff feab 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR1, 0x01);
 8000f26:	2101      	movs	r1, #1
 8000f28:	f244 1051 	movw	r0, #16721	; 0x4151
 8000f2c:	f7ff fea6 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR2, 0x0d);
 8000f30:	210d      	movs	r1, #13
 8000f32:	f244 1052 	movw	r0, #16722	; 0x4152
 8000f36:	f7ff fea1 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR3, 0xb8);
 8000f3a:	21b8      	movs	r1, #184	; 0xb8
 8000f3c:	f244 1053 	movw	r0, #16723	; 0x4153
 8000f40:	f7ff fe9c 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR4, 0xe0);
 8000f44:	21e0      	movs	r1, #224	; 0xe0
 8000f46:	f244 1054 	movw	r0, #16724	; 0x4154
 8000f4a:	f7ff fe97 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR5, 0x01);
 8000f4e:	2101      	movs	r1, #1
 8000f50:	f244 1055 	movw	r0, #16725	; 0x4155
 8000f54:	f7ff fe92 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR6, 0x00);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	f244 1056 	movw	r0, #16726	; 0x4156
 8000f5e:	f7ff fe8d 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR7, 0x00);
 8000f62:	2100      	movs	r1, #0
 8000f64:	f244 1057 	movw	r0, #16727	; 0x4157
 8000f68:	f7ff fe88 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR8, 0x13);
 8000f6c:	2113      	movs	r1, #19
 8000f6e:	f244 1058 	movw	r0, #16728	; 0x4158
 8000f72:	f7ff fe83 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR9, 0x22);
 8000f76:	2122      	movs	r1, #34	; 0x22
 8000f78:	f244 1059 	movw	r0, #16729	; 0x4159
 8000f7c:	f7ff fe7e 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR10, 0x33);
 8000f80:	2133      	movs	r1, #51	; 0x33
 8000f82:	f244 105a 	movw	r0, #16730	; 0x415a
 8000f86:	f7ff fe79 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR11, 0xff);
 8000f8a:	21ff      	movs	r1, #255	; 0xff
 8000f8c:	f244 105b 	movw	r0, #16731	; 0x415b
 8000f90:	f7ff fe74 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR12, 0xfe);
 8000f94:	21fe      	movs	r1, #254	; 0xfe
 8000f96:	f244 105c 	movw	r0, #16732	; 0x415c
 8000f9a:	f7ff fe6f 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR13, 0xaa);
 8000f9e:	21aa      	movs	r1, #170	; 0xaa
 8000fa0:	f244 105d 	movw	r0, #16733	; 0x415d
 8000fa4:	f7ff fe6a 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR14, 0xbb);
 8000fa8:	21bb      	movs	r1, #187	; 0xbb
 8000faa:	f244 105e 	movw	r0, #16734	; 0x415e
 8000fae:	f7ff fe65 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GUAR15, 0xcc);
 8000fb2:	21cc      	movs	r1, #204	; 0xcc
 8000fb4:	f244 105f 	movw	r0, #16735	; 0x415f
 8000fb8:	f7ff fe60 	bl	8000c7c <SPI_W6100_WCR>

	SPI_W6100_WCR(SUB6R0, 0xff);	// IPv6 Subnet Prefix, FFFF:FFFF::
 8000fbc:	21ff      	movs	r1, #255	; 0xff
 8000fbe:	f244 1060 	movw	r0, #16736	; 0x4160
 8000fc2:	f7ff fe5b 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R1, 0xff);
 8000fc6:	21ff      	movs	r1, #255	; 0xff
 8000fc8:	f244 1061 	movw	r0, #16737	; 0x4161
 8000fcc:	f7ff fe56 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R2, 0xff);
 8000fd0:	21ff      	movs	r1, #255	; 0xff
 8000fd2:	f244 1062 	movw	r0, #16738	; 0x4162
 8000fd6:	f7ff fe51 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R3, 0xff);
 8000fda:	21ff      	movs	r1, #255	; 0xff
 8000fdc:	f244 1063 	movw	r0, #16739	; 0x4163
 8000fe0:	f7ff fe4c 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R4, 0xff);
 8000fe4:	21ff      	movs	r1, #255	; 0xff
 8000fe6:	f244 1064 	movw	r0, #16740	; 0x4164
 8000fea:	f7ff fe47 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R5, 0xff);
 8000fee:	21ff      	movs	r1, #255	; 0xff
 8000ff0:	f244 1065 	movw	r0, #16741	; 0x4165
 8000ff4:	f7ff fe42 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R6, 0xff);
 8000ff8:	21ff      	movs	r1, #255	; 0xff
 8000ffa:	f244 1066 	movw	r0, #16742	; 0x4166
 8000ffe:	f7ff fe3d 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R7, 0xff);
 8001002:	21ff      	movs	r1, #255	; 0xff
 8001004:	f244 1067 	movw	r0, #16743	; 0x4167
 8001008:	f7ff fe38 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R8, 0x00);
 800100c:	2100      	movs	r1, #0
 800100e:	f244 1068 	movw	r0, #16744	; 0x4168
 8001012:	f7ff fe33 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R9, 0x00);
 8001016:	2100      	movs	r1, #0
 8001018:	f244 1069 	movw	r0, #16745	; 0x4169
 800101c:	f7ff fe2e 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R10, 0x00);
 8001020:	2100      	movs	r1, #0
 8001022:	f244 106a 	movw	r0, #16746	; 0x416a
 8001026:	f7ff fe29 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R11, 0x00);
 800102a:	2100      	movs	r1, #0
 800102c:	f244 106b 	movw	r0, #16747	; 0x416b
 8001030:	f7ff fe24 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R12, 0x00);
 8001034:	2100      	movs	r1, #0
 8001036:	f244 106c 	movw	r0, #16748	; 0x416c
 800103a:	f7ff fe1f 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R13, 0x00);
 800103e:	2100      	movs	r1, #0
 8001040:	f244 106d 	movw	r0, #16749	; 0x416d
 8001044:	f7ff fe1a 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R14, 0x00);
 8001048:	2100      	movs	r1, #0
 800104a:	f244 106e 	movw	r0, #16750	; 0x416e
 800104e:	f7ff fe15 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SUB6R15, 0x00);
 8001052:	2100      	movs	r1, #0
 8001054:	f244 106f 	movw	r0, #16751	; 0x416f
 8001058:	f7ff fe10 	bl	8000c7c <SPI_W6100_WCR>

	SPI_W6100_WCR(GA6R0, 0xfe);	// IPv6 Gateway Address, FFFF:FFFF::
 800105c:	21fe      	movs	r1, #254	; 0xfe
 800105e:	f244 1070 	movw	r0, #16752	; 0x4170
 8001062:	f7ff fe0b 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R1, 0x80);
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	f244 1071 	movw	r0, #16753	; 0x4171
 800106c:	f7ff fe06 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R2, 0x00);
 8001070:	2100      	movs	r1, #0
 8001072:	f244 1072 	movw	r0, #16754	; 0x4172
 8001076:	f7ff fe01 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R3, 0x00);
 800107a:	2100      	movs	r1, #0
 800107c:	f244 1073 	movw	r0, #16755	; 0x4173
 8001080:	f7ff fdfc 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R4, 0x00);
 8001084:	2100      	movs	r1, #0
 8001086:	f244 1074 	movw	r0, #16756	; 0x4174
 800108a:	f7ff fdf7 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R5, 0x00);
 800108e:	2100      	movs	r1, #0
 8001090:	f244 1075 	movw	r0, #16757	; 0x4175
 8001094:	f7ff fdf2 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R6, 0x00);
 8001098:	2100      	movs	r1, #0
 800109a:	f244 1076 	movw	r0, #16758	; 0x4176
 800109e:	f7ff fded 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R7, 0x00);
 80010a2:	2100      	movs	r1, #0
 80010a4:	f244 1077 	movw	r0, #16759	; 0x4177
 80010a8:	f7ff fde8 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R8, 0x13);
 80010ac:	2113      	movs	r1, #19
 80010ae:	f244 1078 	movw	r0, #16760	; 0x4178
 80010b2:	f7ff fde3 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R9, 0x22);
 80010b6:	2122      	movs	r1, #34	; 0x22
 80010b8:	f244 1079 	movw	r0, #16761	; 0x4179
 80010bc:	f7ff fdde 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R10, 0x33);
 80010c0:	2133      	movs	r1, #51	; 0x33
 80010c2:	f244 107a 	movw	r0, #16762	; 0x417a
 80010c6:	f7ff fdd9 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R11, 0xff);
 80010ca:	21ff      	movs	r1, #255	; 0xff
 80010cc:	f244 107b 	movw	r0, #16763	; 0x417b
 80010d0:	f7ff fdd4 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R12, 0xfe);
 80010d4:	21fe      	movs	r1, #254	; 0xfe
 80010d6:	f244 107c 	movw	r0, #16764	; 0x417c
 80010da:	f7ff fdcf 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R13, 0x44);
 80010de:	2144      	movs	r1, #68	; 0x44
 80010e0:	f244 107d 	movw	r0, #16765	; 0x417d
 80010e4:	f7ff fdca 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R14, 0x55);
 80010e8:	2155      	movs	r1, #85	; 0x55
 80010ea:	f244 107e 	movw	r0, #16766	; 0x417e
 80010ee:	f7ff fdc5 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(GA6R15, 0x66);
 80010f2:	2166      	movs	r1, #102	; 0x66
 80010f4:	f244 107f 	movw	r0, #16767	; 0x417f
 80010f8:	f7ff fdc0 	bl	8000c7c <SPI_W6100_WCR>

	SPI_W6100_WCR(NETLCKR, 0x00);	// NETLCKR		Network settings lock
 80010fc:	2100      	movs	r1, #0
 80010fe:	f244 10f5 	movw	r0, #16885	; 0x41f5
 8001102:	f7ff fdbb 	bl	8000c7c <SPI_W6100_WCR>

	// W6100 Packet Received Interrupt setup (for Socket 0)
	// *** Modify this code to fire interrupts for other sockets if in use ***
	SPI_W6100_WCR(SYCR1, 0x80);				// Interrupt enabled (by default after reset)
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	f242 0005 	movw	r0, #8197	; 0x2005
 800110c:	f7ff fdb6 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WCR(SIMR, 0x01);				// enable SIMR[S0_INT] – enable SOCKET 0 Interrupt
 8001110:	2101      	movs	r1, #1
 8001112:	f242 1014 	movw	r0, #8468	; 0x2114
 8001116:	f7ff fdb1 	bl	8000c7c <SPI_W6100_WCR>
	SPI_W6100_WSOCK(Sn_IMR, 0x04, 0, REG);	// Enable RECV Interrupt Mask Bit for Socket 0
 800111a:	2301      	movs	r3, #1
 800111c:	2200      	movs	r2, #0
 800111e:	2104      	movs	r1, #4
 8001120:	2024      	movs	r0, #36	; 0x24
 8001122:	f7ff fe0b 	bl	8000d3c <SPI_W6100_WSOCK>
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <W6100_OpenTCPSocket>:




uint32_t W6100_OpenTCPSocket (uint8_t sck_nbr, uint16_t port) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	460a      	mov	r2, r1
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	80bb      	strh	r3, [r7, #4]
	uint32_t dest_adr;
	/* *** Open Socket as TCP4 *** */
	SPI_W6100_WSOCK(Sn_MR, 0x01, sck_nbr, REG);				// Set TCP4 mode
 800113c:	79fa      	ldrb	r2, [r7, #7]
 800113e:	2301      	movs	r3, #1
 8001140:	2101      	movs	r1, #1
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fdfa 	bl	8000d3c <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR0, (port >> 8), sck_nbr, REG);	// Set PORT number
 8001148:	88bb      	ldrh	r3, [r7, #4]
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	b29b      	uxth	r3, r3
 800114e:	b2d9      	uxtb	r1, r3
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	2301      	movs	r3, #1
 8001154:	f44f 708a 	mov.w	r0, #276	; 0x114
 8001158:	f7ff fdf0 	bl	8000d3c <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_PORTR1, (port & 0xff), sck_nbr, REG);
 800115c:	88bb      	ldrh	r3, [r7, #4]
 800115e:	b2d9      	uxtb	r1, r3
 8001160:	79fa      	ldrb	r2, [r7, #7]
 8001162:	2301      	movs	r3, #1
 8001164:	f240 1015 	movw	r0, #277	; 0x115
 8001168:	f7ff fde8 	bl	8000d3c <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_CR, 0x01, sck_nbr, REG);				// Set OPEN command
 800116c:	79fa      	ldrb	r2, [r7, #7]
 800116e:	2301      	movs	r3, #1
 8001170:	2101      	movs	r1, #1
 8001172:	2010      	movs	r0, #16
 8001174:	f7ff fde2 	bl	8000d3c <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until OPEN command is cleared
 8001178:	bf00      	nop
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2201      	movs	r2, #1
 800117e:	4619      	mov	r1, r3
 8001180:	2010      	movs	r0, #16
 8001182:	f7ff fda0 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f6      	bne.n	800117a <W6100_OpenTCPSocket+0x4e>


	SPI_W6100_WSOCK(Sn_CR, 0x02, sck_nbr, REG);				// Set LISTEN command
 800118c:	79fa      	ldrb	r2, [r7, #7]
 800118e:	2301      	movs	r3, #1
 8001190:	2102      	movs	r1, #2
 8001192:	2010      	movs	r0, #16
 8001194:	f7ff fdd2 	bl	8000d3c <SPI_W6100_WSOCK>
	while ((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);	// Wait until LISTEN command is cleared
 8001198:	bf00      	nop
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2201      	movs	r2, #1
 800119e:	4619      	mov	r1, r3
 80011a0:	2010      	movs	r0, #16
 80011a2:	f7ff fd90 	bl	8000cc6 <SPI_W6100_RSOCK>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f6      	bne.n	800119a <W6100_OpenTCPSocket+0x6e>

	// CONNECT NOW
	while ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x17);	// Wait until SOCKET ESTABLISHED
 80011ac:	bf00      	nop
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2201      	movs	r2, #1
 80011b2:	4619      	mov	r1, r3
 80011b4:	2030      	movs	r0, #48	; 0x30
 80011b6:	f7ff fd86 	bl	8000cc6 <SPI_W6100_RSOCK>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b17      	cmp	r3, #23
 80011be:	d1f6      	bne.n	80011ae <W6100_OpenTCPSocket+0x82>

	/* HARDWARE RESPONSE ON THE SOCKET OPEN */
	if(socketOpenCallback) socketOpenCallback(sck_nbr);
 80011c0:	4b21      	ldr	r3, [pc, #132]	; (8001248 <W6100_OpenTCPSocket+0x11c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <W6100_OpenTCPSocket+0xa6>
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <W6100_OpenTCPSocket+0x11c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	79fa      	ldrb	r2, [r7, #7]
 80011ce:	4610      	mov	r0, r2
 80011d0:	4798      	blx	r3
	/* END OF HARDWARE RESPONSE */							// Socket established

	SPI_W6100_WSOCK(Sn_IRCLR, 0x01, sck_nbr, REG);			// Interrupt clear
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	2301      	movs	r3, #1
 80011d6:	2101      	movs	r1, #1
 80011d8:	2028      	movs	r0, #40	; 0x28
 80011da:	f7ff fdaf 	bl	8000d3c <SPI_W6100_WSOCK>

	// Read destination address
	dest_adr = (SPI_W6100_RSOCK(Sn_DIPR0, sck_nbr, REG) << 24);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2201      	movs	r2, #1
 80011e2:	4619      	mov	r1, r3
 80011e4:	f44f 7090 	mov.w	r0, #288	; 0x120
 80011e8:	f7ff fd6d 	bl	8000cc6 <SPI_W6100_RSOCK>
 80011ec:	4603      	mov	r3, r0
 80011ee:	061b      	lsls	r3, r3, #24
 80011f0:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR1, sck_nbr, REG) << 16);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2201      	movs	r2, #1
 80011f6:	4619      	mov	r1, r3
 80011f8:	f240 1021 	movw	r0, #289	; 0x121
 80011fc:	f7ff fd63 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001200:	4603      	mov	r3, r0
 8001202:	041b      	lsls	r3, r3, #16
 8001204:	461a      	mov	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]
	dest_adr |= (SPI_W6100_RSOCK(Sn_DIPR2, sck_nbr, REG) << 8);
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2201      	movs	r2, #1
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 7091 	mov.w	r0, #290	; 0x122
 8001216:	f7ff fd56 	bl	8000cc6 <SPI_W6100_RSOCK>
 800121a:	4603      	mov	r3, r0
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
	dest_adr |= SPI_W6100_RSOCK(Sn_DIPR3, sck_nbr, REG);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f240 1023 	movw	r0, #291	; 0x123
 8001230:	f7ff fd49 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001234:	4603      	mov	r3, r0
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]

	return dest_adr;	// Return destination address
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000028 	.word	0x20000028

0800124c <W6100_ReceiveData>:




uint8_t W6100_ReceiveData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab, uint8_t size) {
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b08b      	sub	sp, #44	; 0x2c
 8001250:	af00      	add	r7, sp, #0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	461a      	mov	r2, r3
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	4613      	mov	r3, r2
 800125e:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	uint32_t get_size, gSn_RX_MAX, get_start_address, Sn_RX_RD_temp;

	if ((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) == 0x1c) {								// Check if socket close request pending
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2201      	movs	r2, #1
 8001264:	4619      	mov	r1, r3
 8001266:	2030      	movs	r0, #48	; 0x30
 8001268:	f7ff fd2d 	bl	8000cc6 <SPI_W6100_RSOCK>
 800126c:	4603      	mov	r3, r0
 800126e:	2b1c      	cmp	r3, #28
 8001270:	d103      	bne.n	800127a <W6100_ReceiveData+0x2e>
		W6100_PassiveCloseSocket(sck_nbr);
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f9c1 	bl	80015fc <W6100_PassiveCloseSocket>
	}

	if ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0b00000100) == 0x04) {					// Check if data received
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2201      	movs	r2, #1
 800127e:	4619      	mov	r1, r3
 8001280:	2020      	movs	r0, #32
 8001282:	f7ff fd20 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001286:	4603      	mov	r3, r0
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b04      	cmp	r3, #4
 800128e:	f040 80a1 	bne.w	80013d4 <W6100_ReceiveData+0x188>


			// Read data from the buffer
			get_size = (SPI_W6100_RSOCK(Sn_RX_RSR0, sck_nbr, REG) << 8);
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	2201      	movs	r2, #1
 8001296:	4619      	mov	r1, r3
 8001298:	f44f 7009 	mov.w	r0, #548	; 0x224
 800129c:	f7ff fd13 	bl	8000cc6 <SPI_W6100_RSOCK>
 80012a0:	4603      	mov	r3, r0
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	623b      	str	r3, [r7, #32]
			get_size |= SPI_W6100_RSOCK(Sn_RX_RSR1, sck_nbr, REG);
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	2201      	movs	r2, #1
 80012aa:	4619      	mov	r1, r3
 80012ac:	f240 2025 	movw	r0, #549	; 0x225
 80012b0:	f7ff fd09 	bl	8000cc6 <SPI_W6100_RSOCK>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	623b      	str	r3, [r7, #32]
			gSn_RX_MAX = (SPI_W6100_RSOCK(Sn_RX_BSR, sck_nbr, REG) * 1024);
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2201      	movs	r2, #1
 80012c2:	4619      	mov	r1, r3
 80012c4:	f44f 7008 	mov.w	r0, #544	; 0x220
 80012c8:	f7ff fcfd 	bl	8000cc6 <SPI_W6100_RSOCK>
 80012cc:	4603      	mov	r3, r0
 80012ce:	029b      	lsls	r3, r3, #10
 80012d0:	61fb      	str	r3, [r7, #28]
			get_start_address = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	2201      	movs	r2, #1
 80012d6:	4619      	mov	r1, r3
 80012d8:	f44f 700a 	mov.w	r0, #552	; 0x228
 80012dc:	f7ff fcf3 	bl	8000cc6 <SPI_W6100_RSOCK>
 80012e0:	4603      	mov	r3, r0
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	617b      	str	r3, [r7, #20]
			get_start_address |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	2201      	movs	r2, #1
 80012ea:	4619      	mov	r1, r3
 80012ec:	f240 2029 	movw	r0, #553	; 0x229
 80012f0:	f7ff fce9 	bl	8000cc6 <SPI_W6100_RSOCK>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	617b      	str	r3, [r7, #20]

			// Move data to the array
			memset(tab, '\0', size);
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	461a      	mov	r2, r3
 8001302:	2100      	movs	r1, #0
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fa5e 	bl	80017c6 <memset>
			for (i=0; i<get_size; i++) {
 800130a:	2300      	movs	r3, #0
 800130c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001310:	e016      	b.n	8001340 <W6100_ReceiveData+0xf4>
				tab[i] = SPI_W6100_RSOCK((get_start_address+i), sck_nbr, RX_BUF);
 8001312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001316:	b29a      	uxth	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	b29b      	uxth	r3, r3
 800131c:	4413      	add	r3, r2
 800131e:	b298      	uxth	r0, r3
 8001320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	18d4      	adds	r4, r2, r3
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	2203      	movs	r2, #3
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff fcca 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001332:	4603      	mov	r3, r0
 8001334:	7023      	strb	r3, [r4, #0]
			for (i=0; i<get_size; i++) {
 8001336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800133a:	3301      	adds	r3, #1
 800133c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001344:	6a3a      	ldr	r2, [r7, #32]
 8001346:	429a      	cmp	r2, r3
 8001348:	d8e3      	bhi.n	8001312 <W6100_ReceiveData+0xc6>
			}

			memcpy(&get_start_address, &dest_adr, get_size);
 800134a:	f107 0108 	add.w	r1, r7, #8
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	6a3a      	ldr	r2, [r7, #32]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fa2b 	bl	80017b0 <memcpy>

			Sn_RX_RD_temp = (SPI_W6100_RSOCK(Sn_RX_RD0, sck_nbr, REG) << 8);
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	2201      	movs	r2, #1
 800135e:	4619      	mov	r1, r3
 8001360:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001364:	f7ff fcaf 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001368:	4603      	mov	r3, r0
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp |= SPI_W6100_RSOCK(Sn_RX_RD1, sck_nbr, REG);
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2201      	movs	r2, #1
 8001372:	4619      	mov	r1, r3
 8001374:	f240 2029 	movw	r0, #553	; 0x229
 8001378:	f7ff fca5 	bl	8000cc6 <SPI_W6100_RSOCK>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
			Sn_RX_RD_temp += get_size;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	4413      	add	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
			SPI_W6100_WSOCK(Sn_RX_RD0, (Sn_RX_RD_temp>>8), sck_nbr, REG);
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	b2d9      	uxtb	r1, r3
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	2301      	movs	r3, #1
 8001398:	f44f 700a 	mov.w	r0, #552	; 0x228
 800139c:	f7ff fcce 	bl	8000d3c <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_RX_RD1, (Sn_RX_RD_temp), sck_nbr, REG);
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	b2d9      	uxtb	r1, r3
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	2301      	movs	r3, #1
 80013a8:	f240 2029 	movw	r0, #553	; 0x229
 80013ac:	f7ff fcc6 	bl	8000d3c <SPI_W6100_WSOCK>
			SPI_W6100_WSOCK(Sn_CR, 0x40, sck_nbr, REG);
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	2301      	movs	r3, #1
 80013b4:	2140      	movs	r1, #64	; 0x40
 80013b6:	2010      	movs	r0, #16
 80013b8:	f7ff fcc0 	bl	8000d3c <SPI_W6100_WSOCK>
			while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);
 80013bc:	bf00      	nop
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	2201      	movs	r2, #1
 80013c2:	4619      	mov	r1, r3
 80013c4:	2010      	movs	r0, #16
 80013c6:	f7ff fc7e 	bl	8000cc6 <SPI_W6100_RSOCK>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f6      	bne.n	80013be <W6100_ReceiveData+0x172>

			return 1;	// Return 1 if data was received
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <W6100_ReceiveData+0x18a>
	}
	else 	return 0;	// Return 0 of no data was received
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	372c      	adds	r7, #44	; 0x2c
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}

080013de <W6100_TransmitData>:

void W6100_TransmitData(uint8_t sck_nbr, uint32_t dest_adr, uint8_t * tab, uint8_t size) {
 80013de:	b580      	push	{r7, lr}
 80013e0:	b08a      	sub	sp, #40	; 0x28
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4603      	mov	r3, r0
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	4613      	mov	r3, r2
 80013f0:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	uint8_t send_size = size;
 80013f2:	7bbb      	ldrb	r3, [r7, #14]
 80013f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t gSn_TX_MAX, get_start_address, Sn_TX_WR_temp, Sn_TX_FSR_temp;

	gSn_TX_MAX = (SPI_W6100_RSOCK(Sn_TX_BSR, sck_nbr, REG) * 1024);						// Socket TX buffer size
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2201      	movs	r2, #1
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001402:	f7ff fc60 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001406:	4603      	mov	r3, r0
 8001408:	029b      	lsls	r3, r3, #10
 800140a:	61fb      	str	r3, [r7, #28]

	if(send_size > gSn_TX_MAX) send_size = gSn_TX_MAX;
 800140c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	429a      	cmp	r2, r3
 8001414:	d219      	bcs.n	800144a <W6100_TransmitData+0x6c>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	while(send_size > Sn_TX_FSR_temp) {													// wait until Socket Tx buffer is free
 800141c:	e015      	b.n	800144a <W6100_TransmitData+0x6c>
		Sn_TX_FSR_temp = (SPI_W6100_RSOCK(Sn_TX_FSR0, sck_nbr, REG) << 8);
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2201      	movs	r2, #1
 8001422:	4619      	mov	r1, r3
 8001424:	f44f 7001 	mov.w	r0, #516	; 0x204
 8001428:	f7ff fc4d 	bl	8000cc6 <SPI_W6100_RSOCK>
 800142c:	4603      	mov	r3, r0
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	623b      	str	r3, [r7, #32]
		Sn_TX_FSR_temp |= SPI_W6100_RSOCK(Sn_TX_FSR1, sck_nbr, REG);
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	2201      	movs	r2, #1
 8001436:	4619      	mov	r1, r3
 8001438:	f240 2005 	movw	r0, #517	; 0x205
 800143c:	f7ff fc43 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	4313      	orrs	r3, r2
 8001448:	623b      	str	r3, [r7, #32]
	while(send_size > Sn_TX_FSR_temp) {													// wait until Socket Tx buffer is free
 800144a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800144e:	6a3a      	ldr	r2, [r7, #32]
 8001450:	429a      	cmp	r2, r3
 8001452:	d3e4      	bcc.n	800141e <W6100_TransmitData+0x40>
	}

	get_start_address = (SPI_W6100_RSOCK(Sn_TX_WR0, sck_nbr, REG) << 8);
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	2201      	movs	r2, #1
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800145e:	f7ff fc32 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001462:	4603      	mov	r3, r0
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	617b      	str	r3, [r7, #20]
	get_start_address |= SPI_W6100_RSOCK(Sn_TX_WR1, sck_nbr, REG);
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2201      	movs	r2, #1
 800146c:	4619      	mov	r1, r3
 800146e:	f240 200d 	movw	r0, #525	; 0x20d
 8001472:	f7ff fc28 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	4313      	orrs	r3, r2
 800147e:	617b      	str	r3, [r7, #20]


	Sn_TX_WR_temp = (SPI_W6100_RSOCK(Sn_TX_WR0, sck_nbr, REG) << 8);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2201      	movs	r2, #1
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800148a:	f7ff fc1c 	bl	8000cc6 <SPI_W6100_RSOCK>
 800148e:	4603      	mov	r3, r0
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	61bb      	str	r3, [r7, #24]
	Sn_TX_WR_temp |= SPI_W6100_RSOCK(Sn_TX_WR1, sck_nbr, REG);
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	2201      	movs	r2, #1
 8001498:	4619      	mov	r1, r3
 800149a:	f240 200d 	movw	r0, #525	; 0x20d
 800149e:	f7ff fc12 	bl	8000cc6 <SPI_W6100_RSOCK>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
	Sn_TX_WR_temp += size;
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4413      	add	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
	SPI_W6100_WSOCK(Sn_TX_WR0, (Sn_TX_WR_temp>>8), sck_nbr, REG);
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b2d9      	uxtb	r1, r3
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	2301      	movs	r3, #1
 80014be:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80014c2:	f7ff fc3b 	bl	8000d3c <SPI_W6100_WSOCK>
	SPI_W6100_WSOCK(Sn_TX_WR1, (Sn_TX_WR_temp), sck_nbr, REG);
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	b2d9      	uxtb	r1, r3
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	2301      	movs	r3, #1
 80014ce:	f240 200d 	movw	r0, #525	; 0x20d
 80014d2:	f7ff fc33 	bl	8000d3c <SPI_W6100_WSOCK>

	// Move data to the array
	for (i=0; i<size; i++) {
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014dc:	e014      	b.n	8001508 <W6100_TransmitData+0x12a>
		SPI_W6100_WSOCK((get_start_address+i), tab[i], sck_nbr, TX_BUF);
 80014de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	b298      	uxth	r0, r3
 80014ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	7819      	ldrb	r1, [r3, #0]
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	2302      	movs	r3, #2
 80014fa:	f7ff fc1f 	bl	8000d3c <SPI_W6100_WSOCK>
	for (i=0; i<size; i++) {
 80014fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001502:	3301      	adds	r3, #1
 8001504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001508:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	429a      	cmp	r2, r3
 8001510:	d3e5      	bcc.n	80014de <W6100_TransmitData+0x100>
	}

	memcpy(&get_start_address, &dest_adr, send_size);
 8001512:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001516:	f107 0108 	add.w	r1, r7, #8
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f946 	bl	80017b0 <memcpy>

	SPI_W6100_WSOCK(Sn_CR, 0x20, sck_nbr, REG);											// SEND command sent to TCP/TCP6 mode
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	2301      	movs	r3, #1
 8001528:	2120      	movs	r1, #32
 800152a:	2010      	movs	r0, #16
 800152c:	f7ff fc06 	bl	8000d3c <SPI_W6100_WSOCK>
	while(SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG) != 0x00);								// Wait for SEND command clear
 8001530:	bf00      	nop
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	2010      	movs	r0, #16
 800153a:	f7ff fbc4 	bl	8000cc6 <SPI_W6100_RSOCK>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f6      	bne.n	8001532 <W6100_TransmitData+0x154>

	while(((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x10) == 0) && ((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x08) == 0));
 8001544:	bf00      	nop
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	2201      	movs	r2, #1
 800154a:	4619      	mov	r1, r3
 800154c:	2020      	movs	r0, #32
 800154e:	f7ff fbba 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001552:	4603      	mov	r3, r0
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10a      	bne.n	8001572 <W6100_TransmitData+0x194>
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	2201      	movs	r2, #1
 8001560:	4619      	mov	r1, r3
 8001562:	2020      	movs	r0, #32
 8001564:	f7ff fbaf 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001568:	4603      	mov	r3, r0
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0e9      	beq.n	8001546 <W6100_TransmitData+0x168>

	if((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG) & 0x10) == 0x10) SPI_W6100_WSOCK(Sn_IRCLR, 0x10, sck_nbr, REG);	// Clear SENDOK interrupt
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	2201      	movs	r2, #1
 8001576:	4619      	mov	r1, r3
 8001578:	2020      	movs	r0, #32
 800157a:	f7ff fba4 	bl	8000cc6 <SPI_W6100_RSOCK>
 800157e:	4603      	mov	r3, r0
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	2b10      	cmp	r3, #16
 8001586:	d105      	bne.n	8001594 <W6100_TransmitData+0x1b6>
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	2301      	movs	r3, #1
 800158c:	2110      	movs	r1, #16
 800158e:	2028      	movs	r0, #40	; 0x28
 8001590:	f7ff fbd4 	bl	8000d3c <SPI_W6100_WSOCK>

}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <registerDataReceivedCallback>:

void registerDataReceivedCallback(void (*callback)(void)) {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	dataReceivedCallback = callback;
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <registerDataReceivedCallback+0x1c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000002c 	.word	0x2000002c

080015bc <registerSocketOpenCallback>:


void registerSocketOpenCallback(void (*callback)(uint8_t sck_nbr)) {
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	socketOpenCallback = callback;
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <registerSocketOpenCallback+0x1c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000028 	.word	0x20000028

080015dc <registerSocketCloseCallback>:

void registerSocketCloseCallback(void (*callback)(uint8_t sck_nbr)) {
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	socketCloseCallback = callback;
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <registerSocketCloseCallback+0x1c>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6013      	str	r3, [r2, #0]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000024 	.word	0x20000024

080015fc <W6100_PassiveCloseSocket>:


void W6100_PassiveCloseSocket(uint8_t sck_nbr) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	SPI_W6100_WSOCK(Sn_CR, 0x08, sck_nbr, REG);						// Send FIN packet (DISCON command)
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	2301      	movs	r3, #1
 800160a:	2108      	movs	r1, #8
 800160c:	2010      	movs	r0, #16
 800160e:	f7ff fb95 	bl	8000d3c <SPI_W6100_WSOCK>
	while((SPI_W6100_RSOCK(Sn_CR, sck_nbr, REG)) != 0x00);			// Wait for DISCON command clear
 8001612:	bf00      	nop
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2201      	movs	r2, #1
 8001618:	4619      	mov	r1, r3
 800161a:	2010      	movs	r0, #16
 800161c:	f7ff fb53 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f6      	bne.n	8001614 <W6100_PassiveCloseSocket+0x18>
	// Wait for ACK packet
	while((((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b10) == 0) && (((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b1000) == 0));
 8001626:	bf00      	nop
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2201      	movs	r2, #1
 800162c:	4619      	mov	r1, r3
 800162e:	2020      	movs	r0, #32
 8001630:	f7ff fb49 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001634:	4603      	mov	r3, r0
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10a      	bne.n	8001654 <W6100_PassiveCloseSocket+0x58>
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2201      	movs	r2, #1
 8001642:	4619      	mov	r1, r3
 8001644:	2020      	movs	r0, #32
 8001646:	f7ff fb3e 	bl	8000cc6 <SPI_W6100_RSOCK>
 800164a:	4603      	mov	r3, r0
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0e9      	beq.n	8001628 <W6100_PassiveCloseSocket+0x2c>

	if ((((SPI_W6100_RSOCK(Sn_IR, sck_nbr, REG)) & 0b10) == 0b10)) {
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	2201      	movs	r2, #1
 8001658:	4619      	mov	r1, r3
 800165a:	2020      	movs	r0, #32
 800165c:	f7ff fb33 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001660:	4603      	mov	r3, r0
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b02      	cmp	r3, #2
 8001668:	d10f      	bne.n	800168a <W6100_PassiveCloseSocket+0x8e>
		SPI_W6100_WSOCK(Sn_IRCLR, 0x02, sck_nbr, REG);				// Clear DISCON interrupt
 800166a:	79fa      	ldrb	r2, [r7, #7]
 800166c:	2301      	movs	r3, #1
 800166e:	2102      	movs	r1, #2
 8001670:	2028      	movs	r0, #40	; 0x28
 8001672:	f7ff fb63 	bl	8000d3c <SPI_W6100_WSOCK>
		while((SPI_W6100_RSOCK(Sn_SR, sck_nbr, REG)) != 0x00);		// Wait until socket is CLOSED
 8001676:	bf00      	nop
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2201      	movs	r2, #1
 800167c:	4619      	mov	r1, r3
 800167e:	2030      	movs	r0, #48	; 0x30
 8001680:	f7ff fb21 	bl	8000cc6 <SPI_W6100_RSOCK>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f6      	bne.n	8001678 <W6100_PassiveCloseSocket+0x7c>
	}

	if(socketCloseCallback) socketCloseCallback(sck_nbr);			// Response for a socket close
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <W6100_PassiveCloseSocket+0xa8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <W6100_PassiveCloseSocket+0xa0>
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <W6100_PassiveCloseSocket+0xa8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	79fa      	ldrb	r2, [r7, #7]
 8001698:	4610      	mov	r0, r2
 800169a:	4798      	blx	r3
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000024 	.word	0x20000024

080016a8 <EXTI9_5_IRQHandler>:


// W6100 external interrupt handler (line PC5)
// Fired when data is received by W6100 ETH
__attribute__((interrupt)) void EXTI9_5_IRQHandler(void) {
 80016a8:	4668      	mov	r0, sp
 80016aa:	f020 0107 	bic.w	r1, r0, #7
 80016ae:	468d      	mov	sp, r1
 80016b0:	b589      	push	{r0, r3, r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR5) {
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <EXTI9_5_IRQHandler+0x64>)
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f003 0320 	and.w	r3, r3, #32
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01e      	beq.n	80016fe <EXTI9_5_IRQHandler+0x56>
		EXTI->PR = EXTI_PR_PR5;		// Clear ISR flag
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <EXTI9_5_IRQHandler+0x64>)
 80016c2:	2220      	movs	r2, #32
 80016c4:	615a      	str	r2, [r3, #20]
		/* W6100: Interrupt fired */
		// Check if RECEIVE ISR was fired
		if(SPI_W6100_RCR(SIR) && 0x01){
 80016c6:	f242 1001 	movw	r0, #8449	; 0x2101
 80016ca:	f7ff fab3 	bl	8000c34 <SPI_W6100_RCR>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d014      	beq.n	80016fe <EXTI9_5_IRQHandler+0x56>
			// Check if SOCKET 1 data was received
			if(SPI_W6100_RSOCK(Sn_IR, 0, REG) && 0x04) {
 80016d4:	2201      	movs	r2, #1
 80016d6:	2100      	movs	r1, #0
 80016d8:	2020      	movs	r0, #32
 80016da:	f7ff faf4 	bl	8000cc6 <SPI_W6100_RSOCK>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d00c      	beq.n	80016fe <EXTI9_5_IRQHandler+0x56>
				if(dataReceivedCallback) dataReceivedCallback();	// Callback function
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <EXTI9_5_IRQHandler+0x68>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <EXTI9_5_IRQHandler+0x4a>
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <EXTI9_5_IRQHandler+0x68>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4798      	blx	r3
				SPI_W6100_WSOCK(Sn_IRCLR, 0x04, 0, REG);			// Clear data interrupt after reaction
 80016f2:	2301      	movs	r3, #1
 80016f4:	2200      	movs	r2, #0
 80016f6:	2104      	movs	r1, #4
 80016f8:	2028      	movs	r0, #40	; 0x28
 80016fa:	f7ff fb1f 	bl	8000d3c <SPI_W6100_WSOCK>
			}

		}
	}
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
 8001706:	4685      	mov	sp, r0
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40013c00 	.word	0x40013c00
 8001710:	2000002c 	.word	0x2000002c

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800171a:	e003      	b.n	8001724 <LoopCopyDataInit>

0800171c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800171e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001722:	3104      	adds	r1, #4

08001724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800172a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800172c:	d3f6      	bcc.n	800171c <CopyDataInit>
  ldr  r2, =_sbss
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001730:	e002      	b.n	8001738 <LoopFillZerobss>

08001732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001734:	f842 3b04 	str.w	r3, [r2], #4

08001738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800173a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800173c:	d3f9      	bcc.n	8001732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800173e:	f7ff fa21 	bl	8000b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001742:	f000 f811 	bl	8001768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f9bf 	bl	8000ac8 <main>
  bx  lr    
 800174a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800174c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001750:	0800187c 	.word	0x0800187c
  ldr  r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001758:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 800175c:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8001760:	20000090 	.word	0x20000090

08001764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC_IRQHandler>
	...

08001768 <__libc_init_array>:
 8001768:	b570      	push	{r4, r5, r6, lr}
 800176a:	4e0d      	ldr	r6, [pc, #52]	; (80017a0 <__libc_init_array+0x38>)
 800176c:	4c0d      	ldr	r4, [pc, #52]	; (80017a4 <__libc_init_array+0x3c>)
 800176e:	1ba4      	subs	r4, r4, r6
 8001770:	10a4      	asrs	r4, r4, #2
 8001772:	2500      	movs	r5, #0
 8001774:	42a5      	cmp	r5, r4
 8001776:	d109      	bne.n	800178c <__libc_init_array+0x24>
 8001778:	4e0b      	ldr	r6, [pc, #44]	; (80017a8 <__libc_init_array+0x40>)
 800177a:	4c0c      	ldr	r4, [pc, #48]	; (80017ac <__libc_init_array+0x44>)
 800177c:	f000 f82c 	bl	80017d8 <_init>
 8001780:	1ba4      	subs	r4, r4, r6
 8001782:	10a4      	asrs	r4, r4, #2
 8001784:	2500      	movs	r5, #0
 8001786:	42a5      	cmp	r5, r4
 8001788:	d105      	bne.n	8001796 <__libc_init_array+0x2e>
 800178a:	bd70      	pop	{r4, r5, r6, pc}
 800178c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001790:	4798      	blx	r3
 8001792:	3501      	adds	r5, #1
 8001794:	e7ee      	b.n	8001774 <__libc_init_array+0xc>
 8001796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800179a:	4798      	blx	r3
 800179c:	3501      	adds	r5, #1
 800179e:	e7f2      	b.n	8001786 <__libc_init_array+0x1e>
 80017a0:	08001874 	.word	0x08001874
 80017a4:	08001874 	.word	0x08001874
 80017a8:	08001874 	.word	0x08001874
 80017ac:	08001878 	.word	0x08001878

080017b0 <memcpy>:
 80017b0:	b510      	push	{r4, lr}
 80017b2:	1e43      	subs	r3, r0, #1
 80017b4:	440a      	add	r2, r1
 80017b6:	4291      	cmp	r1, r2
 80017b8:	d100      	bne.n	80017bc <memcpy+0xc>
 80017ba:	bd10      	pop	{r4, pc}
 80017bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80017c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80017c4:	e7f7      	b.n	80017b6 <memcpy+0x6>

080017c6 <memset>:
 80017c6:	4402      	add	r2, r0
 80017c8:	4603      	mov	r3, r0
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d100      	bne.n	80017d0 <memset+0xa>
 80017ce:	4770      	bx	lr
 80017d0:	f803 1b01 	strb.w	r1, [r3], #1
 80017d4:	e7f9      	b.n	80017ca <memset+0x4>
	...

080017d8 <_init>:
 80017d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017da:	bf00      	nop
 80017dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017de:	bc08      	pop	{r3}
 80017e0:	469e      	mov	lr, r3
 80017e2:	4770      	bx	lr

080017e4 <_fini>:
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e6:	bf00      	nop
 80017e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ea:	bc08      	pop	{r3}
 80017ec:	469e      	mov	lr, r3
 80017ee:	4770      	bx	lr
