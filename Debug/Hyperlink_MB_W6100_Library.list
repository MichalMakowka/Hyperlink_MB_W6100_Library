
Hyperlink_MB_W6100_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000128  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002b0  080002b8  000102b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002b0  080002b0  000102b8  2**0
                  CONTENTS
  4 .ARM          00000000  080002b0  080002b0  000102b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002b0  080002b8  000102b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002b0  080002b0  000102b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002b4  080002b4  000102b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002b8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002b8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000645  00000000  00000000  000102e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001b9  00000000  00000000  0001092d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000070  00000000  00000000  00010ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000048  00000000  00000000  00010b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001658c  00000000  00000000  00010ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000951  00000000  00000000  0002712c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dc0a  00000000  00000000  00027a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a5687  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ac  00000000  00000000  000a5704  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000298 	.word	0x08000298

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000298 	.word	0x08000298

080001c8 <main>:
 */

#include "stm32f405xx.h"

int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

  while (1)
 80001cc:	e7fe      	b.n	80001cc <main+0x4>
	...

080001d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d4:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <SystemInit+0x28>)
 80001d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001da:	4a07      	ldr	r2, [pc, #28]	; (80001f8 <SystemInit+0x28>)
 80001dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80001e4:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <SystemInit+0x28>)
 80001e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001ea:	609a      	str	r2, [r3, #8]
#endif
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80001fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000234 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000200:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000202:	e003      	b.n	800020c <LoopCopyDataInit>

08000204 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000204:	4b0c      	ldr	r3, [pc, #48]	; (8000238 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000206:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000208:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800020a:	3104      	adds	r1, #4

0800020c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800020c:	480b      	ldr	r0, [pc, #44]	; (800023c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800020e:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000210:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000212:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000214:	d3f6      	bcc.n	8000204 <CopyDataInit>
  ldr  r2, =_sbss
 8000216:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000218:	e002      	b.n	8000220 <LoopFillZerobss>

0800021a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800021a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800021c:	f842 3b04 	str.w	r3, [r2], #4

08000220 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000222:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000224:	d3f9      	bcc.n	800021a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000226:	f7ff ffd3 	bl	80001d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800022a:	f000 f811 	bl	8000250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800022e:	f7ff ffcb 	bl	80001c8 <main>
  bx  lr    
 8000232:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000234:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000238:	080002b8 	.word	0x080002b8
  ldr  r0, =_sdata
 800023c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000240:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8000244:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000248:	2000001c 	.word	0x2000001c

0800024c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800024c:	e7fe      	b.n	800024c <ADC_IRQHandler>
	...

08000250 <__libc_init_array>:
 8000250:	b570      	push	{r4, r5, r6, lr}
 8000252:	4e0d      	ldr	r6, [pc, #52]	; (8000288 <__libc_init_array+0x38>)
 8000254:	4c0d      	ldr	r4, [pc, #52]	; (800028c <__libc_init_array+0x3c>)
 8000256:	1ba4      	subs	r4, r4, r6
 8000258:	10a4      	asrs	r4, r4, #2
 800025a:	2500      	movs	r5, #0
 800025c:	42a5      	cmp	r5, r4
 800025e:	d109      	bne.n	8000274 <__libc_init_array+0x24>
 8000260:	4e0b      	ldr	r6, [pc, #44]	; (8000290 <__libc_init_array+0x40>)
 8000262:	4c0c      	ldr	r4, [pc, #48]	; (8000294 <__libc_init_array+0x44>)
 8000264:	f000 f818 	bl	8000298 <_init>
 8000268:	1ba4      	subs	r4, r4, r6
 800026a:	10a4      	asrs	r4, r4, #2
 800026c:	2500      	movs	r5, #0
 800026e:	42a5      	cmp	r5, r4
 8000270:	d105      	bne.n	800027e <__libc_init_array+0x2e>
 8000272:	bd70      	pop	{r4, r5, r6, pc}
 8000274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000278:	4798      	blx	r3
 800027a:	3501      	adds	r5, #1
 800027c:	e7ee      	b.n	800025c <__libc_init_array+0xc>
 800027e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000282:	4798      	blx	r3
 8000284:	3501      	adds	r5, #1
 8000286:	e7f2      	b.n	800026e <__libc_init_array+0x1e>
 8000288:	080002b0 	.word	0x080002b0
 800028c:	080002b0 	.word	0x080002b0
 8000290:	080002b0 	.word	0x080002b0
 8000294:	080002b4 	.word	0x080002b4

08000298 <_init>:
 8000298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029a:	bf00      	nop
 800029c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800029e:	bc08      	pop	{r3}
 80002a0:	469e      	mov	lr, r3
 80002a2:	4770      	bx	lr

080002a4 <_fini>:
 80002a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002a6:	bf00      	nop
 80002a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002aa:	bc08      	pop	{r3}
 80002ac:	469e      	mov	lr, r3
 80002ae:	4770      	bx	lr
